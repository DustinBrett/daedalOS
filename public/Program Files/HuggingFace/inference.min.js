var __defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__export=(e,t)=>{for(var r in t)__defProp(e,r,{get:t[r],enumerable:!0})},__copyProps=(e,t,r,a)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let n of __getOwnPropNames(t))__hasOwnProp.call(e,n)||n===r||__defProp(e,n,{get:()=>t[n],enumerable:!(a=__getOwnPropDesc(t,n))||a.enumerable});return e},__toCommonJS=e=>__copyProps(__defProp({},"__esModule",{value:!0}),e),src_exports={};function toArray(e){return Array.isArray(e)?e:[e]}__export(src_exports,{HfInference:()=>HfInference}),window.HfInference=__toCommonJS(src_exports);var HfInference=class{apiKey;defaultOptions;constructor(e="",t={}){this.apiKey=e,this.defaultOptions=t}async fillMask(e,t){return this.request(e,t)}async summarization(e,t){return(await this.request(e,t))?.[0]}async questionAnswer(e,t){return await this.request(e,t)}async tableQuestionAnswer(e,t){return await this.request(e,t)}async textClassification(e,t){return(await this.request(e,t))?.[0]}async textGeneration(e,t){return(await this.request(e,t))?.[0]}async tokenClassification(e,t){return toArray(await this.request(e,t))}async translation(e,t){return(await this.request(e,t))?.[0]}async zeroShotClassification(e,t){return toArray(await this.request(e,t))}async conversational(e,t){return await this.request(e,t)}async featureExtraction(e,t){return await this.request(e,t)}async automaticSpeechRecognition(e,t){return await this.request(e,{...t,binary:!0})}async audioClassification(e,t){return await this.request(e,{...t,binary:!0})}async imageClassification(e,t){return await this.request(e,{...t,binary:!0})}async objectDetection(e,t){return await this.request(e,{...t,binary:!0})}async imageSegmentation(e,t){return await this.request(e,{...t,binary:!0})}async textToImage(e,t){return await this.request(e,{...t,blob:!0})}async request(e,t){const r={...this.defaultOptions,...t},{model:a,...n}=e,i={};this.apiKey&&(i.Authorization=`Bearer ${this.apiKey}`),t?.binary||(i["Content-Type"]="application/json"),t?.binary&&(r.wait_for_model&&(i["X-Wait-For-Model"]="true"),!1===r.use_cache&&(i["X-Use-Cache"]="false"),r.dont_load_model&&(i["X-Load-Model"]="0"));const s=await fetch(`https://api-inference.huggingface.co/models/${a}`,{headers:i,method:"POST",body:t?.binary?e.data:JSON.stringify({...n,options:r}),credentials:t?.includeCredentials?"include":"same-origin"});if(!1!==r.retry_on_error&&503===s.status&&!r.wait_for_model)return this.request(e,{...r,wait_for_model:!0});if(t?.blob){if(!s.ok)throw new Error("An error occurred while fetching the blob");return await s.blob()}const o=await s.json();if(o.error)throw new Error(o.error);return o}};