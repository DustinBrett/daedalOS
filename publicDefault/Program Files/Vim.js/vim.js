window.VimWrapperModule = { init: (vimModuleInit) => {
var VimModule = vimModuleInit;
window.VimWrapperModule.VimModule = VimModule;
if (typeof VimModule === "undefined") VimModule = eval("(function() { try { return VimModule || {} } catch(e) { return {} } })()");
if (!VimModule.expectedDataFileDownloads) {
    VimModule.expectedDataFileDownloads = 0;
    VimModule.finishedDataFileDownloads = 0
}
VimModule.expectedDataFileDownloads++;
((function() {
    function runWithFS() {
        function assert(check, msg) {
            if (!check) throw msg + (new Error).stack
        }
        VimModule["FS_createPath"]("/", "usr", true, true);
        VimModule["FS_createPath"]("/usr", "local", true, true);
        VimModule["FS_createPath"]("/usr/local", "share", true, true);
        VimModule["FS_createPath"]("/usr/local/share", "vim", true, true);
        VimModule["FS_createPath"]("/usr/local/share/vim", "syntax", true, true);
        VimModule["FS_createPath"]("/usr/local/share/vim", "colors", true, true);
        fileData0 = [];
        fileData0.push.apply(fileData0, [34, 32, 68, 101, 102, 97, 117, 108, 116, 32, 118, 105, 109, 114, 99, 32, 102, 111, 114, 32, 118, 105, 109, 46, 106, 115, 10, 34, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 99, 41, 32, 50, 48, 49, 51, 32, 76, 117, 32, 87, 97, 110, 103, 32, 60, 99, 111, 111, 108, 119, 97, 110, 103, 108, 117, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 62, 10, 10, 10, 10, 34, 32, 89, 111, 117, 32, 99, 97, 110, 32, 101, 100, 105, 116, 32, 121, 111, 117, 114, 32, 111, 119, 110, 32, 126, 47, 46, 118, 105, 109, 114, 99, 10, 34, 32, 119, 104, 105, 99, 104, 32, 119, 105, 108, 108, 32, 98, 101, 32, 115, 97, 118, 101, 100, 32, 105, 110, 116, 111, 32, 108, 111, 99, 97, 108, 83, 116, 111, 114, 97, 103, 101, 32, 97, 110, 100, 32, 108, 111, 97, 100, 101, 100, 32, 110, 101, 120, 116, 32, 116, 105, 109, 101, 10, 10, 10, 10, 34, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32, 65, 80, 80, 69, 65, 82, 65, 78, 67, 69, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 10, 34, 32, 71, 85, 73, 32, 101, 108, 101, 109, 101, 110, 116, 115, 32, 40, 116, 97, 98, 108, 105, 110, 101, 44, 32, 115, 99, 114, 111, 108, 108, 98, 97, 114, 44, 32, 109, 101, 110, 117, 32, 101, 116, 99, 41, 32, 97, 114, 101, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 10, 115, 101, 116, 32, 103, 117, 105, 111, 112, 116, 105, 111, 110, 115, 61, 10, 10, 34, 32, 85, 115, 101, 32, 67, 83, 83, 32, 102, 111, 110, 116, 32, 102, 111, 114, 109, 97, 116, 10, 34, 32, 85, 115, 101, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 32, 102, 111, 110, 116, 115, 32, 111, 110, 108, 121, 33, 10, 115, 101, 116, 32, 103, 117, 105, 102, 111, 110, 116, 61, 49, 50, 112, 120, 92, 32, 92, 34, 83, 111, 117, 114, 99, 101, 92, 32, 67, 111, 100, 101, 92, 32, 80, 114, 111, 92, 34, 92, 92, 44, 109, 111, 110, 111, 115, 112, 97, 99, 101, 10, 10, 34, 32, 79, 110, 108, 121, 32, 68, 97, 114, 107, 115, 105, 100, 101, 32, 105, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 114, 105, 103, 104, 116, 32, 110, 111, 119, 10, 99, 111, 108, 111, 114, 115, 99, 104, 101, 109, 101, 32, 68, 97, 114, 107, 115, 105, 100, 101, 10, 10, 34, 32, 98, 108, 105, 110, 107, 32, 105, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 114, 105, 103, 104, 116, 32, 110, 111, 119, 10, 115, 101, 116, 32, 103, 117, 105, 99, 117, 114, 115, 111, 114, 61, 97, 58, 98, 108, 105, 110, 107, 111, 110, 48, 10, 10, 34, 32, 109, 97, 121, 32, 98, 101, 32, 118, 101, 114, 121, 32, 115, 108, 111, 119, 32, 111, 110, 32, 70, 105, 114, 101, 102, 111, 120, 10, 115, 121, 110, 116, 97, 120, 32, 111, 110, 10, 34, 32, 121, 111, 117, 32, 110, 101, 101, 100, 32, 116, 111, 32, 115, 101, 116, 32, 102, 105, 108, 101, 116, 121, 112, 101, 32, 121, 111, 117, 114, 115, 101, 108, 102, 44, 32, 101, 46, 103, 46, 32, 58, 115, 101, 116, 32, 102, 116, 61, 118, 105, 109, 10, 10, 10, 10, 34, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32, 69, 88, 80, 69, 82, 73, 77, 69, 78, 84, 65, 76, 32, 40, 110, 111, 116, 32, 105, 110, 32, 86, 105, 109, 41, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 34, 32, 82, 101, 97, 100, 32, 108, 111, 99, 97, 108, 32, 102, 105, 108, 101, 115, 10, 34, 32, 58, 98, 114, 111, 32, 101, 32, 108, 111, 99, 97, 108, 10, 10, 34, 32, 82, 101, 97, 100, 32, 102, 105, 108, 101, 115, 32, 102, 114, 111, 109, 32, 68, 114, 111, 112, 98, 111, 120, 10, 34, 32, 58, 98, 114, 111, 32, 101, 32, 100, 114, 111, 112, 98, 111, 120, 10, 10, 34, 32, 67, 97, 108, 108, 32, 74, 97, 118, 97, 83, 99, 114, 105, 112, 116, 32, 40, 78, 111, 116, 101, 32, 116, 104, 101, 32, 101, 115, 99, 97, 112, 101, 32, 111, 102, 32, 33, 41, 10, 33, 99, 111, 110, 115, 111, 108, 101, 46, 108, 111, 103, 40, 39, 72, 101, 108, 108, 111, 32, 102, 114, 111, 109, 32, 118, 105, 109, 114, 99, 92, 33, 39, 41, 59, 10, 10, 34, 32, 73, 102, 32, 121, 111, 117, 32, 97, 114, 101, 32, 101, 100, 105, 116, 105, 110, 103, 32, 97, 32, 74, 97, 118, 97, 83, 99, 114, 105, 112, 116, 32, 102, 105, 108, 101, 58, 10, 34, 32, 58, 33, 37, 10, 10, 34, 32, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 32, 65, 80, 73, 32, 119, 111, 114, 107, 115, 58, 10, 34, 32, 58, 33, 70, 83, 46, 109, 107, 100, 105, 114, 40, 39, 47, 102, 111, 111, 39, 41, 10, 10, 10, 10, 34, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 32, 79, 84, 72, 69, 82, 83, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 34, 32, 83, 111, 109, 101, 32, 97, 114, 101, 32, 97, 99, 116, 117, 97, 108, 108, 121, 32, 110, 111, 116, 32, 121, 101, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 10, 115, 101, 116, 32, 114, 117, 108, 101, 114, 10, 115, 101, 116, 32, 110, 117, 109, 98, 101, 114, 10, 115, 101, 116, 32, 119, 105, 108, 100, 109, 101, 110, 117, 10, 115, 101, 116, 32, 116, 97, 98, 115, 116, 111, 112, 61, 52, 10, 115, 101, 116, 32, 101, 120, 112, 97, 110, 100, 116, 97, 98, 10, 115, 101, 116, 32, 110, 111, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 10, 115, 101, 116, 32, 102, 105, 108, 101, 101, 110, 99, 111, 100, 105, 110, 103, 115, 61, 117, 116, 102, 56, 10, 115, 101, 116, 32, 98, 97, 99, 107, 115, 112, 97, 99, 101, 61, 105, 110, 100, 101, 110, 116, 44, 101, 111, 108, 44, 115, 116, 97, 114, 116, 10, 115, 101, 116, 32, 119, 105, 108, 100, 109, 111, 100, 101, 61, 108, 111, 110, 103, 101, 115, 116, 44, 108, 105, 115, 116, 44, 102, 117, 108, 108, 10, 115, 101, 116, 32, 109, 111, 117, 115, 101, 61, 10, 34, 115, 101, 116, 32, 115, 109, 97, 114, 116, 105, 110, 100, 101, 110, 116, 10, 34, 115, 101, 116, 32, 99, 105, 110, 100, 101, 110, 116, 32, 10, 115, 101, 116, 32, 115, 104, 105, 102, 116, 119, 105, 100, 116, 104, 61, 52, 10]);
        VimModule["FS_createDataFile"]("/usr/local/share/vim", "vimrc", fileData0, true, true);
        fileData1 = [];
        fileData1.push.apply(fileData1, [47, 42, 32, 32, 118, 105, 109, 58, 32, 115, 101, 116, 32, 115, 119, 61, 50, 32, 116, 115, 61, 50, 32, 101, 116, 32, 102, 116, 61, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 32, 32, 32, 58, 32, 42, 47, 10, 47, 42, 10, 32, 42, 32, 118, 105, 109, 95, 108, 105, 98, 46, 106, 115, 58, 32, 99, 111, 110, 110, 101, 99, 116, 32, 68, 79, 77, 32, 97, 110, 100, 32, 117, 115, 101, 114, 32, 105, 110, 112, 117, 116, 115, 32, 116, 111, 32, 86, 105, 109, 46, 106, 115, 10, 32, 42, 10, 32, 42, 32, 67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 99, 41, 32, 50, 48, 49, 51, 44, 50, 48, 49, 52, 32, 76, 117, 32, 87, 97, 110, 103, 32, 60, 99, 111, 111, 108, 119, 97, 110, 103, 108, 117, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 62, 10, 32, 42, 10, 32, 42, 32, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 105, 115, 32, 104, 101, 114, 101, 98, 121, 32, 103, 114, 97, 110, 116, 101, 100, 44, 32, 102, 114, 101, 101, 32, 111, 102, 32, 99, 104, 97, 114, 103, 101, 44, 32, 116, 111, 32, 97, 110, 121, 32, 112, 101, 114, 115, 111, 110, 32, 111, 98, 116, 97, 105, 110, 105, 110, 103, 32, 97, 32, 99, 111, 112, 121, 10, 32, 42, 32, 111, 102, 32, 116, 104, 105, 115, 32, 115, 111, 102, 116, 119, 97, 114, 101, 32, 97, 110, 100, 32, 97, 115, 115, 111, 99, 105, 97, 116, 101, 100, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 102, 105, 108, 101, 115, 32, 40, 116, 104, 101, 32, 34, 83, 111, 102, 116, 119, 97, 114, 101, 34, 41, 44, 32, 116, 111, 32, 100, 101, 97, 108, 10, 32, 42, 32, 105, 110, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 119, 105, 116, 104, 111, 117, 116, 32, 108, 105, 109, 105, 116, 97, 116, 105, 111, 110, 32, 116, 104, 101, 32, 114, 105, 103, 104, 116, 115, 10, 32, 42, 32, 116, 111, 32, 117, 115, 101, 44, 32, 99, 111, 112, 121, 44, 32, 109, 111, 100, 105, 102, 121, 44, 32, 109, 101, 114, 103, 101, 44, 32, 112, 117, 98, 108, 105, 115, 104, 44, 32, 100, 105, 115, 116, 114, 105, 98, 117, 116, 101, 44, 32, 115, 117, 98, 108, 105, 99, 101, 110, 115, 101, 44, 32, 97, 110, 100, 47, 111, 114, 32, 115, 101, 108, 108, 10, 32, 42, 32, 99, 111, 112, 105, 101, 115, 32, 111, 102, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 44, 32, 97, 110, 100, 32, 116, 111, 32, 112, 101, 114, 109, 105, 116, 32, 112, 101, 114, 115, 111, 110, 115, 32, 116, 111, 32, 119, 104, 111, 109, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 32, 105, 115, 10, 32, 42, 32, 102, 117, 114, 110, 105, 115, 104, 101, 100, 32, 116, 111, 32, 100, 111, 32, 115, 111, 44, 32, 115, 117, 98, 106, 101, 99, 116, 32, 116, 111, 32, 116, 104, 101, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 58, 10, 32, 42, 10, 32, 42, 32, 84, 104, 101, 32, 97, 98, 111, 118, 101, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 110, 111, 116, 105, 99, 101, 32, 97, 110, 100, 32, 116, 104, 105, 115, 32, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 110, 111, 116, 105, 99, 101, 32, 115, 104, 97, 108, 108, 32, 98, 101, 32, 105, 110, 99, 108, 117, 100, 101, 100, 32, 105, 110, 10, 32, 42, 32, 97, 108, 108, 32, 99, 111, 112, 105, 101, 115, 32, 111, 114, 32, 115, 117, 98, 115, 116, 97, 110, 116, 105, 97, 108, 32, 112, 111, 114, 116, 105, 111, 110, 115, 32, 111, 102, 32, 116, 104, 101, 32, 83, 111, 102, 116, 119, 97, 114, 101, 46, 10, 32, 42, 10, 32, 42, 32, 84, 72, 69, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 73, 83, 32, 80, 82, 79, 86, 73, 68, 69, 68, 32, 34, 65, 83, 32, 73, 83, 34, 44, 32, 87, 73, 84, 72, 79, 85, 84, 32, 87, 65, 82, 82, 65, 78, 84, 89, 32, 79, 70, 32, 65, 78, 89, 32, 75, 73, 78, 68, 44, 32, 69, 88, 80, 82, 69, 83, 83, 32, 79, 82, 10, 32, 42, 32, 73, 77, 80, 76, 73, 69, 68, 44, 32, 73, 78, 67, 76, 85, 68, 73, 78, 71, 32, 66, 85, 84, 32, 78, 79, 84, 32, 76, 73, 77, 73, 84, 69, 68, 32, 84, 79, 32, 84, 72, 69, 32, 87, 65, 82, 82, 65, 78, 84, 73, 69, 83, 32, 79, 70, 32, 77, 69, 82, 67, 72, 65, 78, 84, 65, 66, 73, 76, 73, 84, 89, 44, 10, 32, 42, 32, 70, 73, 84, 78, 69, 83, 83, 32, 70, 79, 82, 32, 65, 32, 80, 65, 82, 84, 73, 67, 85, 76, 65, 82, 32, 80, 85, 82, 80, 79, 83, 69, 32, 65, 78, 68, 32, 78, 79, 78, 73, 78, 70, 82, 73, 78, 71, 69, 77, 69, 78, 84, 46, 32, 73, 78, 32, 78, 79, 32, 69, 86, 69, 78, 84, 32, 83, 72, 65, 76, 76, 32, 84, 72, 69, 10, 32, 42, 32, 65, 85, 84, 72, 79, 82, 83, 32, 79, 82, 32, 67, 79, 80, 89, 82, 73, 71, 72, 84, 32, 72, 79, 76, 68, 69, 82, 83, 32, 66, 69, 32, 76, 73, 65, 66, 76, 69, 32, 70, 79, 82, 32, 65, 78, 89, 32, 67, 76, 65, 73, 77, 44, 32, 68, 65, 77, 65, 71, 69, 83, 32, 79, 82, 32, 79, 84, 72, 69, 82, 10, 32, 42, 32, 76, 73, 65, 66, 73, 76, 73, 84, 89, 44, 32, 87, 72, 69, 84, 72, 69, 82, 32, 73, 78, 32, 65, 78, 32, 65, 67, 84, 73, 79, 78, 32, 79, 70, 32, 67, 79, 78, 84, 82, 65, 67, 84, 44, 32, 84, 79, 82, 84, 32, 79, 82, 32, 79, 84, 72, 69, 82, 87, 73, 83, 69, 44, 32, 65, 82, 73, 83, 73, 78, 71, 32, 70, 82, 79, 77, 44, 10, 32, 42, 32, 79, 85, 84, 32, 79, 70, 32, 79, 82, 32, 73, 78, 32, 67, 79, 78, 78, 69, 67, 84, 73, 79, 78, 32, 87, 73, 84, 72, 32, 84, 72, 69, 32, 83, 79, 70, 84, 87, 65, 82, 69, 32, 79, 82, 32, 84, 72, 69, 32, 85, 83, 69, 32, 79, 82, 32, 79, 84, 72, 69, 82, 32, 68, 69, 65, 76, 73, 78, 71, 83, 32, 73, 78, 10, 32, 42, 32, 84, 72, 69, 32, 83, 79, 70, 84, 87, 65, 82, 69, 46, 10, 32, 42, 47, 10, 10, 47, 42, 10, 32, 42, 32, 36, 118, 105, 109, 106, 115, 32, 104, 111, 108, 100, 115, 32, 116, 104, 101, 32, 99, 111, 109, 109, 111, 110, 32, 115, 116, 97, 116, 101, 115, 32, 97, 110, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 10, 32, 42, 32, 118, 105, 109, 106, 115, 95, 42, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 97, 114, 101, 32, 101, 120, 112, 111, 115, 101, 100, 32, 116, 111, 32, 67, 10, 32, 42, 47, 10, 118, 97, 114, 32, 76, 105, 98, 114, 97, 114, 121, 86, 73, 77, 32, 61, 32, 123, 10, 32, 32, 36, 118, 105, 109, 106, 115, 95, 95, 100, 101, 112, 115, 58, 32, 91, 39, 109, 107, 116, 101, 109, 112, 39, 93, 44, 10, 32, 32, 36, 118, 105, 109, 106, 115, 58, 32, 123, 10, 32, 32, 32, 32, 105, 115, 95, 102, 105, 114, 101, 102, 111, 120, 58, 32, 102, 97, 108, 115, 101, 44, 10, 32, 32, 32, 32, 105, 115, 95, 99, 104, 114, 111, 109, 101, 58, 32, 102, 97, 108, 115, 101, 44, 10, 10, 32, 32, 32, 32, 47, 47, 32, 72, 84, 77, 76, 32, 101, 108, 101, 109, 101, 110, 116, 115, 10, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 58, 32, 110, 117, 108, 108, 44, 10, 32, 32, 32, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 58, 32, 110, 117, 108, 108, 44, 10, 32, 32, 32, 32, 98, 101, 101, 112, 95, 110, 111, 100, 101, 58, 32, 110, 117, 108, 108, 44, 32, 47, 47, 32, 102, 111, 114, 32, 98, 101, 101, 112, 105, 110, 103, 10, 32, 32, 32, 32, 102, 105, 108, 101, 95, 110, 111, 100, 101, 58, 32, 110, 117, 108, 108, 44, 32, 47, 47, 32, 102, 105, 108, 101, 32, 115, 101, 108, 101, 99, 116, 111, 114, 10, 32, 32, 32, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 58, 32, 110, 117, 108, 108, 44, 10, 32, 32, 32, 32, 116, 114, 105, 103, 103, 101, 114, 95, 100, 105, 97, 108, 111, 103, 95, 110, 111, 100, 101, 58, 32, 110, 117, 108, 108, 44, 32, 47, 47, 32, 116, 111, 32, 116, 114, 105, 103, 103, 101, 114, 32, 102, 105, 108, 101, 32, 115, 101, 108, 101, 99, 116, 111, 114, 10, 10, 32, 32, 32, 32, 99, 97, 110, 118, 97, 115, 95, 99, 116, 120, 58, 32, 110, 117, 108, 108, 44, 10, 10, 32, 32, 32, 32, 47, 47, 32, 100, 105, 109, 101, 110, 115, 105, 111, 110, 115, 10, 32, 32, 32, 32, 100, 101, 118, 105, 99, 101, 80, 105, 120, 101, 108, 82, 97, 116, 105, 111, 58, 32, 48, 44, 10, 32, 32, 32, 32, 99, 104, 97, 114, 95, 119, 105, 100, 116, 104, 58, 32, 49, 44, 10, 32, 32, 32, 32, 99, 104, 97, 114, 95, 104, 101, 105, 103, 104, 116, 58, 32, 49, 44, 10, 32, 32, 32, 32, 119, 105, 110, 100, 111, 119, 95, 119, 105, 100, 116, 104, 58, 32, 48, 44, 10, 32, 32, 32, 32, 119, 105, 110, 100, 111, 119, 95, 104, 101, 105, 103, 104, 116, 58, 32, 48, 44, 10, 10, 32, 32, 32, 32, 47, 47, 32, 115, 116, 121, 108, 101, 115, 10, 32, 32, 32, 32, 102, 111, 110, 116, 58, 32, 39, 49, 50, 112, 120, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 39, 44, 10, 32, 32, 32, 32, 102, 103, 95, 99, 111, 108, 111, 114, 58, 32, 39, 35, 102, 102, 102, 39, 44, 10, 32, 32, 32, 32, 98, 103, 95, 99, 111, 108, 111, 114, 58, 32, 39, 35, 48, 48, 48, 39, 44, 10, 32, 32, 32, 32, 115, 112, 95, 99, 111, 108, 111, 114, 58, 32, 39, 35, 102, 48, 48, 39, 44, 10, 10, 32, 32, 32, 32, 47, 47, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 10, 32, 32, 32, 32, 103, 117, 105, 95, 119, 101, 98, 95, 104, 97, 110, 100, 108, 101, 95, 107, 101, 121, 58, 32, 110, 117, 108, 108, 44, 10, 32, 32, 32, 32, 105, 110, 112, 117, 116, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101, 58, 32, 110, 117, 108, 108, 44, 10, 10, 32, 32, 32, 32, 115, 112, 101, 99, 105, 97, 108, 95, 107, 101, 121, 115, 58, 32, 91, 93, 44, 10, 32, 32, 32, 32, 115, 112, 101, 99, 105, 97, 108, 95, 107, 101, 121, 115, 95, 110, 97, 109, 101, 109, 97, 112, 58, 32, 123, 125, 44, 10, 32, 32, 32, 32, 99, 111, 108, 111, 114, 95, 109, 97, 112, 58, 32, 123, 125, 44, 10, 32, 32, 32, 32, 102, 105, 108, 101, 95, 99, 97, 108, 108, 98, 97, 99, 107, 58, 32, 110, 117, 108, 108, 44, 10, 32, 32, 32, 32, 100, 114, 111, 112, 98, 111, 120, 95, 99, 97, 108, 108, 98, 97, 99, 107, 58, 32, 110, 117, 108, 108, 44, 10, 32, 32, 32, 32, 116, 114, 105, 103, 103, 101, 114, 95, 99, 97, 108, 108, 98, 97, 99, 107, 58, 32, 110, 117, 108, 108, 44, 10, 10, 32, 32, 32, 32, 47, 47, 32, 119, 111, 114, 107, 97, 114, 111, 117, 110, 100, 32, 102, 111, 114, 32, 94, 87, 32, 111, 110, 32, 110, 111, 110, 45, 102, 105, 114, 101, 102, 111, 120, 10, 32, 32, 32, 32, 99, 116, 114, 108, 95, 112, 114, 101, 115, 115, 101, 100, 58, 32, 102, 97, 108, 115, 101, 44, 10, 10, 32, 32, 32, 32, 100, 114, 111, 112, 98, 111, 120, 58, 32, 110, 117, 108, 108, 44, 10, 10, 32, 32, 32, 32, 47, 47, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 116, 104, 97, 116, 32, 97, 114, 101, 32, 110, 111, 116, 32, 101, 120, 112, 111, 115, 101, 100, 32, 116, 111, 32, 67, 10, 32, 32, 32, 32, 104, 97, 110, 100, 108, 101, 95, 107, 101, 121, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 99, 104, 97, 114, 67, 111, 100, 101, 44, 32, 107, 101, 121, 67, 111, 100, 101, 44, 32, 101, 41, 32, 123, 47, 47, 86, 73, 77, 74, 83, 95, 70, 79, 76, 68, 95, 83, 84, 65, 82, 84, 10, 32, 32, 32, 32, 32, 32, 47, 47, 32, 109, 97, 99, 114, 111, 115, 32, 100, 101, 102, 105, 110, 101, 100, 32, 105, 110, 32, 107, 101, 121, 109, 97, 112, 46, 104, 10, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 109, 111, 100, 105, 102, 105, 101, 114, 115, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 32, 32, 47, 47, 32, 115, 104, 105, 102, 116, 32, 97, 108, 114, 101, 97, 100, 121, 32, 97, 102, 102, 101, 99, 116, 115, 32, 99, 104, 97, 114, 67, 111, 100, 101, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 99, 104, 97, 114, 67, 111, 100, 101, 32, 38, 38, 32, 101, 46, 115, 104, 105, 102, 116, 75, 101, 121, 41, 32, 109, 111, 100, 105, 102, 105, 101, 114, 115, 32, 124, 61, 32, 48, 120, 48, 50, 59, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 101, 46, 99, 116, 114, 108, 75, 101, 121, 41, 32, 109, 111, 100, 105, 102, 105, 101, 114, 115, 32, 124, 61, 32, 48, 120, 48, 52, 59, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 101, 46, 97, 108, 116, 75, 101, 121, 41, 32, 109, 111, 100, 105, 102, 105, 101, 114, 115, 32, 124, 61, 32, 48, 120, 48, 56, 59, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 101, 46, 109, 101, 116, 97, 75, 101, 121, 41, 32, 109, 111, 100, 105, 102, 105, 101, 114, 115, 32, 124, 61, 32, 48, 120, 49, 48, 59, 10, 10, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 104, 97, 110, 100, 108, 101, 100, 32, 61, 32, 102, 97, 108, 115, 101, 59, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 99, 104, 97, 114, 67, 111, 100, 101, 32, 61, 61, 32, 48, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 115, 112, 101, 99, 105, 97, 108, 32, 61, 32, 118, 105, 109, 106, 115, 46, 115, 112, 101, 99, 105, 97, 108, 95, 107, 101, 121, 115, 91, 107, 101, 121, 67, 111, 100, 101, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 40, 115, 112, 101, 99, 105, 97, 108, 32, 33, 61, 61, 32, 117, 110, 100, 101, 102, 105, 110, 101, 100, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 103, 117, 105, 95, 119, 101, 98, 95, 104, 97, 110, 100, 108, 101, 95, 107, 101, 121, 40, 99, 104, 97, 114, 67, 111, 100, 101, 32, 124, 124, 32, 107, 101, 121, 67, 111, 100, 101, 44, 32, 109, 111, 100, 105, 102, 105, 101, 114, 115, 44, 32, 115, 112, 101, 99, 105, 97, 108, 46, 99, 104, 97, 114, 67, 111, 100, 101, 65, 116, 40, 48, 41, 44, 32, 115, 112, 101, 99, 105, 97, 108, 46, 99, 104, 97, 114, 67, 111, 100, 101, 65, 116, 40, 49, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 97, 110, 100, 108, 101, 100, 32, 61, 32, 116, 114, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 10, 32, 32, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 33, 104, 97, 110, 100, 108, 101, 100, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 103, 117, 105, 95, 119, 101, 98, 95, 104, 97, 110, 100, 108, 101, 95, 107, 101, 121, 40, 99, 104, 97, 114, 67, 111, 100, 101, 32, 124, 124, 32, 107, 101, 121, 67, 111, 100, 101, 44, 32, 109, 111, 100, 105, 102, 105, 101, 114, 115, 44, 32, 48, 44, 32, 48, 41, 59, 10, 10, 32, 32, 32, 32, 125, 44, 47, 47, 86, 73, 77, 74, 83, 95, 70, 79, 76, 68, 95, 69, 78, 68, 10, 10, 32, 32, 32, 32, 103, 101, 116, 95, 99, 111, 108, 111, 114, 95, 115, 116, 114, 105, 110, 103, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 99, 111, 108, 111, 114, 41, 32, 123, 47, 47, 86, 73, 77, 74, 83, 95, 70, 79, 76, 68, 95, 83, 84, 65, 82, 84, 10, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 98, 103, 114, 32, 61, 32, 91, 93, 59, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 40, 118, 97, 114, 32, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 51, 59, 32, 43, 43, 105, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 103, 114, 46, 112, 117, 115, 104, 40, 99, 111, 108, 111, 114, 32, 38, 32, 48, 120, 102, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 108, 111, 114, 32, 62, 62, 61, 32, 56, 59, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 39, 114, 103, 98, 40, 39, 43, 98, 103, 114, 91, 50, 93, 43, 39, 44, 39, 43, 98, 103, 114, 91, 49, 93, 43, 39, 44, 39, 43, 98, 103, 114, 91, 48, 93, 43, 39, 41, 39, 59, 10, 32, 32, 32, 32, 125, 44, 47, 47, 86, 73, 77, 74, 83, 95, 70, 79, 76, 68, 95, 69, 78, 68, 10, 10, 32, 32, 32, 32, 47, 47, 32, 100, 105, 114, 116, 121, 32, 119, 111, 114, 107, 115, 44, 32, 99, 97, 108, 108, 101, 100, 32, 98, 101, 102, 111, 114, 101, 32, 116, 104, 101, 32, 112, 114, 111, 103, 114, 97, 109, 32, 115, 116, 97, 114, 116, 115, 10, 32, 32, 32, 32, 112, 114, 101, 95, 114, 117, 110, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 41, 32, 123, 47, 47, 86, 73, 77, 74, 83, 95, 70, 79, 76, 68, 95, 83, 84, 65, 82, 84, 10, 32, 32, 32, 32, 32, 32, 47, 47, 32, 115, 101, 116, 117, 112, 32, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 32, 38, 32, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 10, 32, 32, 32, 32, 32, 32, 69, 78, 86, 91, 39, 85, 83, 69, 82, 39, 93, 32, 61, 32, 39, 114, 111, 111, 116, 39, 59, 10, 32, 32, 32, 32, 32, 32, 69, 78, 86, 91, 39, 72, 79, 77, 69, 39, 93, 32, 61, 32, 39, 47, 114, 111, 111, 116, 39, 59, 32, 10, 32, 32, 32, 32, 32, 32, 69, 78, 86, 91, 39, 80, 87, 68, 39, 93, 32, 61, 32, 39, 47, 114, 111, 111, 116, 39, 59, 10, 32, 32, 32, 32, 32, 32, 69, 78, 86, 91, 39, 95, 39, 93, 32, 61, 32, 39, 47, 98, 105, 110, 47, 118, 105, 109, 39, 59, 10, 10, 32, 32, 32, 32, 32, 32, 77, 111, 100, 117, 108, 101, 91, 34, 70, 83, 95, 99, 114, 101, 97, 116, 101, 80, 97, 116, 104, 34, 93, 40, 34, 47, 34, 44, 32, 34, 114, 111, 111, 116, 34, 44, 32, 116, 114, 117, 101, 44, 32, 116, 114, 117, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 70, 83, 46, 99, 117, 114, 114, 101, 110, 116, 80, 97, 116, 104, 32, 61, 32, 39, 47, 114, 111, 111, 116, 39, 59, 10, 10, 32, 32, 32, 32, 32, 32, 47, 47, 32, 108, 111, 97, 100, 32, 46, 118, 105, 109, 114, 99, 44, 32, 117, 115, 101, 32, 108, 111, 99, 97, 108, 83, 116, 111, 114, 97, 103, 101, 32, 119, 104, 101, 110, 32, 112, 111, 115, 115, 105, 98, 108, 101, 10, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 118, 105, 109, 114, 99, 95, 115, 116, 111, 114, 97, 103, 101, 95, 105, 100, 32, 61, 32, 39, 118, 105, 109, 106, 115, 47, 114, 111, 111, 116, 47, 46, 118, 105, 109, 114, 99, 39, 59, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 116, 121, 112, 101, 111, 102, 32, 108, 111, 99, 97, 108, 83, 116, 111, 114, 97, 103, 101, 32, 33, 61, 61, 32, 39, 117, 110, 100, 101, 102, 105, 110, 101, 100, 39, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 115, 116, 111, 114, 101, 100, 95, 118, 105, 109, 114, 99, 32, 61, 32, 108, 111, 99, 97, 108, 83, 116, 111, 114, 97, 103, 101, 91, 118, 105, 109, 114, 99, 95, 115, 116, 111, 114, 97, 103, 101, 95, 105, 100, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 40, 115, 116, 111, 114, 101, 100, 95, 118, 105, 109, 114, 99, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 77, 111, 100, 117, 108, 101, 91, 39, 70, 83, 95, 99, 114, 101, 97, 116, 101, 68, 97, 116, 97, 70, 105, 108, 101, 39, 93, 40, 39, 47, 114, 111, 111, 116, 39, 44, 32, 39, 46, 118, 105, 109, 114, 99, 39, 44, 32, 115, 116, 111, 114, 101, 100, 95, 118, 105, 109, 114, 99, 44, 32, 116, 114, 117, 101, 44, 32, 116, 114, 117, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 110, 100, 111, 119, 46, 97, 100, 100, 69, 118, 101, 110, 116, 76, 105, 115, 116, 101, 110, 101, 114, 40, 39, 98, 101, 102, 111, 114, 101, 117, 110, 108, 111, 97, 100, 39, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 115, 97, 118, 101, 32, 126, 47, 46, 118, 105, 109, 114, 99, 32, 117, 112, 111, 110, 32, 101, 120, 105, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 114, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 111, 99, 97, 108, 83, 116, 111, 114, 97, 103, 101, 91, 118, 105, 109, 114, 99, 95, 115, 116, 111, 114, 97, 103, 101, 95, 105, 100, 93, 32, 61, 32, 70, 83, 46, 114, 101, 97, 100, 70, 105, 108, 101, 40, 39, 47, 114, 111, 111, 116, 47, 46, 118, 105, 109, 114, 99, 39, 44, 32, 123, 32, 101, 110, 99, 111, 100, 105, 110, 103, 58, 32, 39, 117, 116, 102, 56, 39, 32, 125, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 99, 97, 116, 99, 104, 40, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 115, 104, 111, 119, 32, 109, 101, 115, 115, 97, 103, 101, 32, 97, 98, 111, 117, 116, 32, 94, 87, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 40, 40, 33, 118, 105, 109, 106, 115, 46, 105, 115, 95, 102, 105, 114, 101, 102, 111, 120, 41, 32, 38, 38, 32, 40, 118, 105, 109, 106, 115, 46, 99, 116, 114, 108, 95, 112, 114, 101, 115, 115, 101, 100, 41, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 99, 116, 114, 108, 95, 112, 114, 101, 115, 115, 101, 100, 32, 61, 32, 102, 97, 108, 115, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 34, 94, 87, 32, 105, 115, 32, 110, 111, 116, 32, 119, 111, 114, 107, 105, 110, 103, 32, 111, 110, 32, 110, 111, 110, 45, 70, 105, 114, 101, 102, 111, 120, 32, 98, 114, 111, 119, 115, 101, 114, 115, 46, 34, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 32, 10, 32, 32, 32, 32, 125, 44, 47, 47, 86, 73, 77, 74, 83, 95, 70, 79, 76, 68, 95, 69, 78, 68, 10, 10, 32, 32, 32, 32, 47, 47, 32, 108, 111, 97, 100, 32, 101, 120, 116, 101, 114, 110, 97, 108, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 10, 10, 32, 32, 32, 32, 47, 47, 32, 79, 110, 32, 115, 111, 109, 101, 32, 98, 114, 111, 119, 115, 101, 114, 115, 32, 102, 105, 108, 101, 32, 115, 101, 108, 101, 99, 116, 111, 114, 32, 99, 97, 110, 110, 111, 116, 10, 32, 32, 32, 32, 47, 47, 32, 98, 101, 32, 116, 114, 105, 103, 103, 101, 114, 32, 117, 110, 108, 101, 115, 115, 32, 105, 110, 115, 105, 100, 101, 32, 97, 32, 117, 115, 101, 114, 32, 101, 118, 101, 110, 116, 10, 32, 32, 32, 32, 117, 115, 101, 114, 95, 116, 114, 105, 103, 103, 101, 114, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 99, 98, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 118, 105, 109, 106, 115, 46, 105, 115, 95, 99, 104, 114, 111, 109, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 116, 114, 105, 103, 103, 101, 114, 95, 99, 97, 108, 108, 98, 97, 99, 107, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 116, 114, 105, 103, 103, 101, 114, 95, 100, 105, 97, 108, 111, 103, 95, 110, 111, 100, 101, 46, 112, 97, 114, 101, 110, 116, 78, 111, 100, 101, 46, 114, 101, 109, 111, 118, 101, 67, 104, 105, 108, 100, 40, 118, 105, 109, 106, 115, 46, 116, 114, 105, 103, 103, 101, 114, 95, 100, 105, 97, 108, 111, 103, 95, 110, 111, 100, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 116, 84, 105, 109, 101, 111, 117, 116, 40, 99, 98, 44, 32, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 97, 112, 112, 101, 110, 100, 67, 104, 105, 108, 100, 40, 118, 105, 109, 106, 115, 46, 116, 114, 105, 103, 103, 101, 114, 95, 100, 105, 97, 108, 111, 103, 95, 110, 111, 100, 101, 41, 59, 10, 10, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 98, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 44, 10, 32, 32, 32, 32, 10, 32, 32, 32, 32, 47, 47, 32, 108, 111, 97, 100, 32, 102, 105, 108, 101, 32, 102, 114, 111, 109, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 108, 111, 99, 97, 116, 105, 111, 110, 115, 32, 86, 73, 77, 74, 83, 95, 70, 79, 76, 68, 95, 83, 84, 65, 82, 84, 10, 10, 32, 32, 32, 32, 108, 111, 97, 100, 95, 110, 111, 116, 104, 105, 110, 103, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 99, 98, 44, 32, 98, 117, 102, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 123, 123, 123, 32, 109, 97, 107, 101, 83, 101, 116, 86, 97, 108, 117, 101, 40, 39, 98, 117, 102, 39, 44, 32, 48, 44, 32, 48, 44, 32, 39, 105, 56, 39, 41, 32, 125, 125, 125, 59, 10, 32, 32, 32, 32, 32, 32, 115, 101, 116, 84, 105, 109, 101, 111, 117, 116, 40, 99, 98, 44, 32, 49, 41, 59, 10, 32, 32, 32, 32, 125, 44, 10, 10, 32, 32, 32, 32, 47, 47, 32, 115, 97, 118, 101, 32, 100, 97, 116, 97, 32, 116, 111, 32, 97, 32, 116, 101, 109, 112, 32, 102, 105, 108, 101, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 32, 105, 116, 32, 116, 111, 32, 86, 105, 109, 10, 32, 32, 32, 32, 108, 111, 97, 100, 95, 100, 97, 116, 97, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 99, 98, 44, 32, 98, 117, 102, 44, 32, 100, 97, 116, 97, 95, 97, 114, 114, 97, 121, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 119, 114, 105, 116, 101, 65, 114, 114, 97, 121, 84, 111, 77, 101, 109, 111, 114, 121, 40, 105, 110, 116, 65, 114, 114, 97, 121, 70, 114, 111, 109, 83, 116, 114, 105, 110, 103, 40, 39, 47, 116, 109, 112, 47, 118, 105, 109, 106, 115, 45, 88, 88, 88, 88, 88, 88, 39, 41, 44, 32, 98, 117, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 95, 109, 107, 116, 101, 109, 112, 40, 98, 117, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 70, 83, 46, 119, 114, 105, 116, 101, 70, 105, 108, 101, 40, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 98, 117, 102, 41, 44, 32, 100, 97, 116, 97, 95, 97, 114, 114, 97, 121, 44, 32, 123, 32, 101, 110, 99, 111, 100, 105, 110, 103, 58, 32, 39, 98, 105, 110, 97, 114, 121, 39, 32, 125, 41, 59, 10, 32, 32, 32, 32, 32, 32, 115, 101, 116, 84, 105, 109, 101, 111, 117, 116, 40, 99, 98, 44, 32, 49, 41, 59, 10, 32, 32, 32, 32, 125, 44, 10, 10, 32, 32, 32, 32, 47, 47, 32, 108, 111, 97, 100, 32, 108, 111, 99, 97, 108, 32, 102, 105, 108, 101, 10, 32, 32, 32, 32, 108, 111, 97, 100, 95, 108, 111, 99, 97, 108, 95, 102, 105, 108, 101, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 99, 98, 44, 32, 98, 117, 102, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 47, 47, 32, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 108, 111, 99, 97, 108, 10, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 102, 105, 108, 101, 95, 99, 97, 108, 108, 98, 97, 99, 107, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 102, 105, 108, 101, 115, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 102, 105, 108, 101, 95, 99, 97, 108, 108, 98, 97, 99, 107, 32, 61, 32, 110, 117, 108, 108, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 40, 102, 105, 108, 101, 115, 46, 108, 101, 110, 103, 116, 104, 32, 61, 61, 32, 48, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 108, 111, 97, 100, 95, 110, 111, 116, 104, 105, 110, 103, 40, 99, 98, 44, 32, 98, 117, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 114, 101, 97, 100, 101, 114, 32, 61, 32, 110, 101, 119, 32, 70, 105, 108, 101, 82, 101, 97, 100, 101, 114, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 97, 100, 101, 114, 46, 111, 110, 108, 111, 97, 100, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 108, 111, 97, 100, 95, 100, 97, 116, 97, 40, 99, 98, 44, 32, 98, 117, 102, 44, 32, 110, 101, 119, 32, 85, 105, 110, 116, 56, 65, 114, 114, 97, 121, 40, 101, 46, 116, 97, 114, 103, 101, 116, 46, 114, 101, 115, 117, 108, 116, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 97, 100, 101, 114, 46, 114, 101, 97, 100, 65, 115, 65, 114, 114, 97, 121, 66, 117, 102, 102, 101, 114, 40, 102, 105, 108, 101, 115, 91, 48, 93, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 59, 10, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 117, 115, 101, 114, 95, 116, 114, 105, 103, 103, 101, 114, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 102, 105, 108, 101, 95, 110, 111, 100, 101, 46, 99, 108, 105, 99, 107, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 41, 59, 10, 32, 32, 32, 32, 125, 44, 10, 10, 32, 32, 32, 32, 47, 47, 32, 108, 111, 97, 100, 32, 100, 114, 111, 112, 98, 111, 120, 45, 106, 115, 32, 105, 102, 32, 110, 101, 99, 101, 115, 115, 97, 114, 121, 10, 32, 32, 32, 32, 101, 110, 115, 117, 114, 101, 95, 100, 114, 111, 112, 98, 111, 120, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 99, 98, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 116, 121, 112, 101, 111, 102, 32, 68, 114, 111, 112, 98, 111, 120, 32, 61, 61, 61, 32, 39, 117, 110, 100, 101, 102, 105, 110, 101, 100, 39, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 108, 111, 97, 100, 32, 106, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 101, 108, 101, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 99, 114, 101, 97, 116, 101, 69, 108, 101, 109, 101, 110, 116, 40, 39, 115, 99, 114, 105, 112, 116, 39, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 101, 46, 105, 100, 32, 61, 32, 39, 100, 114, 111, 112, 98, 111, 120, 106, 115, 39, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 101, 46, 115, 101, 116, 65, 116, 116, 114, 105, 98, 117, 116, 101, 40, 39, 100, 97, 116, 97, 45, 97, 112, 112, 45, 107, 101, 121, 39, 44, 32, 39, 97, 121, 122, 97, 105, 53, 115, 113, 116, 121, 106, 121, 100, 109, 97, 39, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 101, 46, 111, 110, 108, 111, 97, 100, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 98, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 101, 46, 111, 110, 101, 114, 114, 111, 114, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 101, 46, 112, 97, 114, 101, 110, 116, 78, 111, 100, 101, 46, 114, 101, 109, 111, 118, 101, 67, 104, 105, 108, 100, 40, 101, 108, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 98, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 108, 101, 46, 115, 114, 99, 32, 61, 32, 39, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 100, 114, 111, 112, 98, 111, 120, 46, 99, 111, 109, 47, 115, 116, 97, 116, 105, 99, 47, 97, 112, 105, 47, 49, 47, 100, 114, 111, 112, 105, 110, 115, 46, 106, 115, 39, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 98, 111, 100, 121, 46, 97, 112, 112, 101, 110, 100, 67, 104, 105, 108, 100, 40, 101, 108, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 98, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 44, 10, 10, 32, 32, 32, 32, 108, 111, 97, 100, 95, 100, 114, 111, 112, 98, 111, 120, 95, 102, 105, 108, 101, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 99, 98, 44, 32, 98, 117, 102, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 116, 121, 112, 101, 111, 102, 32, 68, 114, 111, 112, 98, 111, 120, 32, 61, 61, 61, 32, 39, 117, 110, 100, 101, 102, 105, 110, 101, 100, 39, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 108, 111, 97, 100, 95, 110, 111, 116, 104, 105, 110, 103, 40, 99, 98, 44, 32, 98, 117, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 59, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 117, 115, 101, 114, 95, 116, 114, 105, 103, 103, 101, 114, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 68, 114, 111, 112, 98, 111, 120, 46, 99, 104, 111, 111, 115, 101, 40, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 99, 99, 101, 115, 115, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 102, 105, 108, 101, 115, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 117, 114, 108, 32, 61, 32, 102, 105, 108, 101, 115, 91, 48, 93, 46, 108, 105, 110, 107, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 120, 104, 114, 32, 61, 32, 110, 101, 119, 32, 88, 77, 76, 72, 116, 116, 112, 82, 101, 113, 117, 101, 115, 116, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 104, 114, 46, 111, 112, 101, 110, 40, 39, 71, 69, 84, 39, 44, 32, 117, 114, 108, 44, 32, 116, 114, 117, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 104, 114, 46, 114, 101, 115, 112, 111, 110, 115, 101, 84, 121, 112, 101, 32, 61, 32, 39, 97, 114, 114, 97, 121, 98, 117, 102, 102, 101, 114, 39, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 104, 114, 46, 111, 110, 108, 111, 97, 100, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 120, 104, 114, 46, 115, 116, 97, 116, 117, 115, 32, 61, 61, 32, 50, 48, 48, 32, 124, 124, 32, 40, 120, 104, 114, 46, 115, 116, 97, 116, 117, 115, 32, 61, 61, 32, 48, 32, 38, 38, 32, 120, 104, 114, 46, 114, 101, 115, 112, 111, 110, 115, 101, 41, 41, 32, 123, 32, 47, 47, 32, 102, 105, 108, 101, 32, 85, 82, 76, 115, 32, 99, 97, 110, 32, 114, 101, 116, 117, 114, 110, 32, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 108, 111, 97, 100, 95, 100, 97, 116, 97, 40, 99, 98, 44, 32, 98, 117, 102, 44, 32, 110, 101, 119, 32, 85, 105, 110, 116, 56, 65, 114, 114, 97, 121, 40, 120, 104, 114, 46, 114, 101, 115, 112, 111, 110, 115, 101, 41, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 104, 114, 46, 111, 110, 101, 114, 114, 111, 114, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 104, 114, 46, 111, 110, 101, 114, 114, 111, 114, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 108, 111, 97, 100, 95, 110, 111, 116, 104, 105, 110, 103, 40, 99, 98, 44, 32, 98, 117, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 104, 114, 46, 115, 101, 110, 100, 40, 110, 117, 108, 108, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 110, 99, 101, 108, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 108, 111, 97, 100, 95, 110, 111, 116, 104, 105, 110, 103, 40, 99, 98, 44, 32, 98, 117, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 105, 110, 107, 84, 121, 112, 101, 58, 32, 39, 100, 105, 114, 101, 99, 116, 39, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 109, 117, 108, 116, 105, 115, 101, 108, 101, 99, 116, 58, 32, 102, 97, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 41, 59, 10, 32, 32, 32, 32, 125, 44, 32, 47, 47, 32, 86, 73, 77, 74, 83, 95, 70, 79, 76, 68, 95, 69, 78, 68, 10, 10, 32, 32, 32, 32, 105, 110, 118, 101, 114, 116, 95, 99, 97, 110, 118, 97, 115, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 120, 44, 32, 121, 44, 32, 119, 44, 32, 104, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 99, 116, 120, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 99, 116, 120, 59, 10, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 105, 109, 103, 32, 61, 32, 99, 116, 120, 46, 103, 101, 116, 73, 109, 97, 103, 101, 68, 97, 116, 97, 40, 120, 44, 32, 121, 44, 32, 119, 44, 32, 104, 41, 59, 10, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 100, 97, 116, 97, 32, 61, 32, 105, 109, 103, 46, 100, 97, 116, 97, 59, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 40, 118, 97, 114, 32, 105, 32, 61, 32, 48, 44, 32, 108, 32, 61, 32, 100, 97, 116, 97, 46, 108, 101, 110, 103, 116, 104, 59, 32, 105, 32, 60, 32, 108, 59, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 97, 116, 97, 91, 105, 93, 32, 61, 32, 50, 53, 53, 32, 45, 32, 100, 97, 116, 97, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 43, 43, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 97, 116, 97, 91, 105, 93, 32, 61, 32, 50, 53, 53, 32, 45, 32, 100, 97, 116, 97, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 43, 43, 105, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 97, 116, 97, 91, 105, 93, 32, 61, 32, 50, 53, 53, 32, 45, 32, 100, 97, 116, 97, 91, 105, 93, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 32, 43, 61, 32, 50, 59, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 99, 116, 120, 46, 112, 117, 116, 73, 109, 97, 103, 101, 68, 97, 116, 97, 40, 105, 109, 103, 44, 32, 120, 44, 32, 121, 41, 59, 10, 32, 32, 32, 32, 125, 44, 10, 10, 32, 32, 32, 32, 95, 95, 100, 117, 109, 109, 121, 95, 95, 58, 32, 110, 117, 108, 108, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 105, 110, 105, 116, 95, 95, 100, 101, 112, 115, 58, 32, 91, 39, 118, 105, 109, 106, 115, 95, 105, 110, 105, 116, 95, 102, 111, 110, 116, 39, 93, 44, 10, 32, 32, 118, 105, 109, 106, 115, 95, 105, 110, 105, 116, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 41, 32, 123, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 105, 115, 95, 102, 105, 114, 101, 102, 111, 120, 32, 61, 32, 116, 121, 112, 101, 111, 102, 32, 73, 110, 115, 116, 97, 108, 108, 84, 114, 105, 103, 103, 101, 114, 32, 33, 61, 61, 32, 39, 117, 110, 100, 101, 102, 105, 110, 101, 100, 39, 59, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 105, 115, 95, 99, 104, 114, 111, 109, 101, 32, 61, 32, 33, 33, 119, 105, 110, 100, 111, 119, 46, 99, 104, 114, 111, 109, 101, 59, 10, 32, 32, 32, 32, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 103, 117, 105, 95, 119, 101, 98, 95, 104, 97, 110, 100, 108, 101, 95, 107, 101, 121, 32, 61, 32, 77, 111, 100, 117, 108, 101, 91, 39, 99, 119, 114, 97, 112, 39, 93, 40, 39, 103, 117, 105, 95, 119, 101, 98, 95, 104, 97, 110, 100, 108, 101, 95, 107, 101, 121, 39, 44, 32, 110, 117, 108, 108, 44, 32, 91, 39, 110, 117, 109, 98, 101, 114, 39, 44, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 32, 39, 110, 117, 109, 98, 101, 114, 39, 93, 41, 59, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 105, 110, 112, 117, 116, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 61, 32, 77, 111, 100, 117, 108, 101, 91, 39, 99, 119, 114, 97, 112, 39, 93, 40, 39, 105, 110, 112, 117, 116, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101, 39, 44, 32, 39, 110, 117, 109, 98, 101, 114, 39, 44, 32, 91, 93, 41, 59, 10, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 98, 101, 101, 112, 95, 110, 111, 100, 101, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 39, 118, 105, 109, 106, 115, 45, 98, 101, 101, 112, 39, 41, 59, 10, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 102, 105, 108, 101, 95, 110, 111, 100, 101, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 39, 118, 105, 109, 106, 115, 45, 102, 105, 108, 101, 39, 41, 59, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 102, 105, 108, 101, 95, 110, 111, 100, 101, 46, 97, 100, 100, 69, 118, 101, 110, 116, 76, 105, 115, 116, 101, 110, 101, 114, 40, 39, 99, 104, 97, 110, 103, 101, 39, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 118, 105, 109, 106, 115, 46, 102, 105, 108, 101, 95, 99, 97, 108, 108, 98, 97, 99, 107, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 102, 105, 108, 101, 95, 99, 97, 108, 108, 98, 97, 99, 107, 40, 101, 46, 116, 97, 114, 103, 101, 116, 46, 102, 105, 108, 101, 115, 41, 59, 10, 32, 32, 32, 32, 125, 41, 59, 10, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 39, 118, 105, 109, 106, 115, 45, 102, 111, 110, 116, 45, 116, 101, 115, 116, 39, 41, 59, 10, 10, 32, 32, 32, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 39, 118, 105, 109, 106, 115, 45, 116, 114, 105, 103, 103, 101, 114, 45, 98, 117, 116, 116, 111, 110, 39, 41, 46, 97, 100, 100, 69, 118, 101, 110, 116, 76, 105, 115, 116, 101, 110, 101, 114, 40, 39, 99, 108, 105, 99, 107, 39, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 118, 105, 109, 106, 115, 46, 116, 114, 105, 103, 103, 101, 114, 95, 99, 97, 108, 108, 98, 97, 99, 107, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 116, 114, 105, 103, 103, 101, 114, 95, 99, 97, 108, 108, 98, 97, 99, 107, 40, 41, 59, 10, 32, 32, 32, 32, 125, 41, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 116, 114, 105, 103, 103, 101, 114, 95, 100, 105, 97, 108, 111, 103, 95, 110, 111, 100, 101, 32, 61, 32, 32, 118, 105, 109, 106, 115, 46, 116, 114, 105, 103, 103, 101, 114, 95, 100, 105, 97, 108, 111, 103, 95, 110, 111, 100, 101, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 39, 118, 105, 109, 106, 115, 45, 116, 114, 105, 103, 103, 101, 114, 45, 100, 105, 97, 108, 111, 103, 39, 41, 59, 10, 32, 32, 32, 32, 116, 114, 105, 103, 103, 101, 114, 95, 100, 105, 97, 108, 111, 103, 95, 110, 111, 100, 101, 46, 112, 97, 114, 101, 110, 116, 78, 111, 100, 101, 46, 114, 101, 109, 111, 118, 101, 67, 104, 105, 108, 100, 40, 116, 114, 105, 103, 103, 101, 114, 95, 100, 105, 97, 108, 111, 103, 95, 110, 111, 100, 101, 41, 59, 10, 32, 32, 32, 32, 116, 114, 105, 103, 103, 101, 114, 95, 100, 105, 97, 108, 111, 103, 95, 110, 111, 100, 101, 46, 115, 116, 121, 108, 101, 46, 100, 105, 115, 112, 108, 97, 121, 32, 61, 32, 39, 98, 108, 111, 99, 107, 39, 59, 10, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 39, 118, 105, 109, 106, 115, 45, 99, 97, 110, 118, 97, 115, 39, 41, 59, 10, 32, 32, 32, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 46, 115, 116, 121, 108, 101, 46, 100, 105, 115, 112, 108, 97, 121, 32, 61, 32, 39, 98, 108, 111, 99, 107, 39, 59, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 99, 116, 120, 32, 61, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 46, 103, 101, 116, 67, 111, 110, 116, 101, 120, 116, 40, 39, 50, 100, 39, 41, 59, 10, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 32, 61, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 103, 101, 116, 69, 108, 101, 109, 101, 110, 116, 66, 121, 73, 100, 40, 39, 118, 105, 109, 106, 115, 45, 99, 111, 110, 116, 97, 105, 110, 101, 114, 39, 41, 59, 10, 32, 32, 32, 32, 47, 47, 32, 116, 104, 101, 114, 101, 32, 109, 105, 103, 104, 116, 32, 98, 101, 32, 116, 101, 120, 116, 32, 110, 111, 100, 101, 115, 32, 111, 102, 32, 111, 116, 104, 101, 114, 32, 115, 116, 117, 102, 102, 115, 32, 98, 101, 102, 111, 114, 101, 32, 108, 111, 97, 100, 105, 110, 103, 32, 118, 105, 109, 10, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 114, 101, 109, 111, 118, 101, 67, 104, 105, 108, 100, 40, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 41, 59, 10, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 105, 110, 110, 101, 114, 72, 84, 77, 76, 32, 61, 32, 39, 39, 59, 10, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 97, 112, 112, 101, 110, 100, 67, 104, 105, 108, 100, 40, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 41, 59, 10, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 115, 116, 121, 108, 101, 46, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 67, 111, 108, 111, 114, 32, 61, 32, 39, 98, 108, 97, 99, 107, 39, 59, 10, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 100, 101, 118, 105, 99, 101, 80, 105, 120, 101, 108, 82, 97, 116, 105, 111, 32, 61, 32, 119, 105, 110, 100, 111, 119, 46, 100, 101, 118, 105, 99, 101, 80, 105, 120, 101, 108, 82, 97, 116, 105, 111, 32, 124, 124, 32, 49, 59, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 119, 105, 110, 100, 111, 119, 95, 119, 105, 100, 116, 104, 32, 61, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 99, 108, 105, 101, 110, 116, 87, 105, 100, 116, 104, 32, 42, 32, 118, 105, 109, 106, 115, 46, 100, 101, 118, 105, 99, 101, 80, 105, 120, 101, 108, 82, 97, 116, 105, 111, 59, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 119, 105, 110, 100, 111, 119, 95, 104, 101, 105, 103, 104, 116, 32, 61, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 99, 108, 105, 101, 110, 116, 72, 101, 105, 103, 104, 116, 32, 42, 32, 118, 105, 109, 106, 115, 46, 100, 101, 118, 105, 99, 101, 80, 105, 120, 101, 108, 82, 97, 116, 105, 111, 59, 10, 10, 32, 32, 32, 32, 95, 118, 105, 109, 106, 115, 95, 105, 110, 105, 116, 95, 102, 111, 110, 116, 40, 39, 39, 41, 59, 10, 10, 32, 32, 32, 32, 47, 42, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 32, 115, 112, 101, 99, 105, 97, 108, 95, 107, 101, 121, 115, 32, 86, 73, 77, 74, 83, 95, 70, 79, 76, 68, 95, 83, 84, 65, 82, 84, 42, 47, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 115, 112, 101, 99, 105, 97, 108, 95, 107, 101, 121, 115, 32, 61, 32, 91, 93, 59, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 115, 112, 101, 99, 105, 97, 108, 95, 107, 101, 121, 115, 95, 110, 97, 109, 101, 109, 97, 112, 32, 61, 32, 123, 125, 59, 10, 32, 32, 32, 32, 47, 42, 32, 102, 111, 114, 32, 99, 108, 111, 115, 117, 114, 101, 32, 99, 111, 109, 112, 105, 108, 101, 114, 32, 42, 47, 10, 32, 32, 32, 32, 118, 97, 114, 32, 75, 101, 121, 69, 118, 101, 110, 116, 32, 61, 32, 119, 105, 110, 100, 111, 119, 46, 75, 101, 121, 69, 118, 101, 110, 116, 59, 10, 32, 32, 32, 32, 47, 42, 32, 102, 111, 114, 32, 67, 104, 114, 111, 109, 101, 32, 42, 47, 10, 32, 32, 32, 32, 47, 42, 32, 104, 116, 116, 112, 58, 47, 47, 115, 116, 97, 99, 107, 111, 118, 101, 114, 102, 108, 111, 119, 46, 99, 111, 109, 47, 113, 117, 101, 115, 116, 105, 111, 110, 115, 47, 49, 52, 54, 53, 51, 55, 52, 47, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 45, 101, 118, 101, 110, 116, 45, 107, 101, 121, 99, 111, 100, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 115, 47, 49, 52, 54, 53, 52, 48, 57, 35, 49, 52, 54, 53, 52, 48, 57, 32, 42, 47, 10, 32, 32, 32, 32, 105, 102, 32, 40, 116]);
        fileData1.push.apply(fileData1, [121, 112, 101, 111, 102, 32, 75, 101, 121, 69, 118, 101, 110, 116, 32, 61, 61, 32, 34, 117, 110, 100, 101, 102, 105, 110, 101, 100, 34, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 75, 101, 121, 69, 118, 101, 110, 116, 32, 61, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 67, 65, 78, 67, 69, 76, 58, 32, 51, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 72, 69, 76, 80, 58, 32, 54, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 66, 65, 67, 75, 95, 83, 80, 65, 67, 69, 58, 32, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 84, 65, 66, 58, 32, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 67, 76, 69, 65, 82, 58, 32, 49, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 82, 69, 84, 85, 82, 78, 58, 32, 49, 51, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 69, 78, 84, 69, 82, 58, 32, 49, 52, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 83, 72, 73, 70, 84, 58, 32, 49, 54, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 67, 79, 78, 84, 82, 79, 76, 58, 32, 49, 55, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 65, 76, 84, 58, 32, 49, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 80, 65, 85, 83, 69, 58, 32, 49, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 67, 65, 80, 83, 95, 76, 79, 67, 75, 58, 32, 50, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 69, 83, 67, 65, 80, 69, 58, 32, 50, 55, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 83, 80, 65, 67, 69, 58, 32, 51, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 80, 65, 71, 69, 95, 85, 80, 58, 32, 51, 51, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 80, 65, 71, 69, 95, 68, 79, 87, 78, 58, 32, 51, 52, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 69, 78, 68, 58, 32, 51, 53, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 72, 79, 77, 69, 58, 32, 51, 54, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 76, 69, 70, 84, 58, 32, 51, 55, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 85, 80, 58, 32, 51, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 82, 73, 71, 72, 84, 58, 32, 51, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 68, 79, 87, 78, 58, 32, 52, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 80, 82, 73, 78, 84, 83, 67, 82, 69, 69, 78, 58, 32, 52, 52, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 73, 78, 83, 69, 82, 84, 58, 32, 52, 53, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 68, 69, 76, 69, 84, 69, 58, 32, 52, 54, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 48, 58, 32, 52, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 49, 58, 32, 52, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 50, 58, 32, 53, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 51, 58, 32, 53, 49, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 52, 58, 32, 53, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 53, 58, 32, 53, 51, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 54, 58, 32, 53, 52, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 55, 58, 32, 53, 53, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 56, 58, 32, 53, 54, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 57, 58, 32, 53, 55, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 83, 69, 77, 73, 67, 79, 76, 79, 78, 58, 32, 53, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 69, 81, 85, 65, 76, 83, 58, 32, 54, 49, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 65, 58, 32, 54, 53, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 66, 58, 32, 54, 54, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 67, 58, 32, 54, 55, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 68, 58, 32, 54, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 69, 58, 32, 54, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 58, 32, 55, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 71, 58, 32, 55, 49, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 72, 58, 32, 55, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 73, 58, 32, 55, 51, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 74, 58, 32, 55, 52, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 75, 58, 32, 55, 53, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 76, 58, 32, 55, 54, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 77, 58, 32, 55, 55, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 78, 58, 32, 55, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 79, 58, 32, 55, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 80, 58, 32, 56, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 81, 58, 32, 56, 49, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 82, 58, 32, 56, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 83, 58, 32, 56, 51, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 84, 58, 32, 56, 52, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 85, 58, 32, 56, 53, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 86, 58, 32, 56, 54, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 87, 58, 32, 56, 55, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 88, 58, 32, 56, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 89, 58, 32, 56, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 90, 58, 32, 57, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 67, 79, 78, 84, 69, 88, 84, 95, 77, 69, 78, 85, 58, 32, 57, 51, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 78, 85, 77, 80, 65, 68, 48, 58, 32, 57, 54, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 78, 85, 77, 80, 65, 68, 49, 58, 32, 57, 55, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 78, 85, 77, 80, 65, 68, 50, 58, 32, 57, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 78, 85, 77, 80, 65, 68, 51, 58, 32, 57, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 78, 85, 77, 80, 65, 68, 52, 58, 32, 49, 48, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 78, 85, 77, 80, 65, 68, 53, 58, 32, 49, 48, 49, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 78, 85, 77, 80, 65, 68, 54, 58, 32, 49, 48, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 78, 85, 77, 80, 65, 68, 55, 58, 32, 49, 48, 51, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 78, 85, 77, 80, 65, 68, 56, 58, 32, 49, 48, 52, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 78, 85, 77, 80, 65, 68, 57, 58, 32, 49, 48, 53, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 77, 85, 76, 84, 73, 80, 76, 89, 58, 32, 49, 48, 54, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 65, 68, 68, 58, 32, 49, 48, 55, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 83, 69, 80, 65, 82, 65, 84, 79, 82, 58, 32, 49, 48, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 83, 85, 66, 84, 82, 65, 67, 84, 58, 32, 49, 48, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 68, 69, 67, 73, 77, 65, 76, 58, 32, 49, 49, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 68, 73, 86, 73, 68, 69, 58, 32, 49, 49, 49, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 49, 58, 32, 49, 49, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 50, 58, 32, 49, 49, 51, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 51, 58, 32, 49, 49, 52, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 52, 58, 32, 49, 49, 53, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 53, 58, 32, 49, 49, 54, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 54, 58, 32, 49, 49, 55, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 55, 58, 32, 49, 49, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 56, 58, 32, 49, 49, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 57, 58, 32, 49, 50, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 49, 48, 58, 32, 49, 50, 49, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 49, 49, 58, 32, 49, 50, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 49, 50, 58, 32, 49, 50, 51, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 49, 51, 58, 32, 49, 50, 52, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 49, 52, 58, 32, 49, 50, 53, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 49, 53, 58, 32, 49, 50, 54, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 49, 54, 58, 32, 49, 50, 55, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 49, 55, 58, 32, 49, 50, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 49, 56, 58, 32, 49, 50, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 49, 57, 58, 32, 49, 51, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 50, 48, 58, 32, 49, 51, 49, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 50, 49, 58, 32, 49, 51, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 50, 50, 58, 32, 49, 51, 51, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 50, 51, 58, 32, 49, 51, 52, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 70, 50, 52, 58, 32, 49, 51, 53, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 78, 85, 77, 95, 76, 79, 67, 75, 58, 32, 49, 52, 52, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 83, 67, 82, 79, 76, 76, 95, 76, 79, 67, 75, 58, 32, 49, 52, 53, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 67, 79, 77, 77, 65, 58, 32, 49, 56, 56, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 80, 69, 82, 73, 79, 68, 58, 32, 49, 57, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 83, 76, 65, 83, 72, 58, 32, 49, 57, 49, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 66, 65, 67, 75, 95, 81, 85, 79, 84, 69, 58, 32, 49, 57, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 79, 80, 69, 78, 95, 66, 82, 65, 67, 75, 69, 84, 58, 32, 50, 49, 57, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 66, 65, 67, 75, 95, 83, 76, 65, 83, 72, 58, 32, 50, 50, 48, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 67, 76, 79, 83, 69, 95, 66, 82, 65, 67, 75, 69, 84, 58, 32, 50, 50, 49, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 81, 85, 79, 84, 69, 58, 32, 50, 50, 50, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 68, 79, 77, 95, 86, 75, 95, 77, 69, 84, 65, 58, 32, 50, 50, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 91, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 85, 80, 44, 32, 32, 39, 107, 117, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 68, 79, 87, 78, 44, 32, 32, 39, 107, 100, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 76, 69, 70, 84, 44, 32, 32, 39, 107, 108, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 82, 73, 71, 72, 84, 44, 32, 39, 107, 114, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 49, 44, 32, 32, 39, 107, 49, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 50, 44, 32, 32, 39, 107, 50, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 51, 44, 32, 32, 39, 107, 51, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 52, 44, 32, 32, 39, 107, 52, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 53, 44, 32, 32, 39, 107, 53, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 54, 44, 32, 32, 39, 107, 54, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 55, 44, 32, 32, 39, 107, 55, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 56, 44, 32, 32, 39, 107, 56, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 57, 44, 32, 32, 39, 107, 57, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 49, 48, 44, 32, 32, 32, 39, 107, 59, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 49, 49, 44, 32, 32, 32, 39, 70, 49, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 49, 50, 44, 32, 32, 32, 39, 70, 50, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 49, 51, 44, 32, 32, 32, 39, 70, 51, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 49, 52, 44, 32, 32, 32, 39, 70, 52, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 49, 53, 44, 32, 32, 32, 39, 70, 53, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 49, 54, 44, 32, 32, 32, 39, 70, 54, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 49, 55, 44, 32, 32, 32, 39, 70, 55, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 49, 56, 44, 32, 32, 32, 39, 70, 56, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 49, 57, 44, 32, 32, 32, 39, 70, 57, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 50, 48, 44, 32, 32, 32, 39, 70, 65, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 50, 49, 44, 32, 32, 32, 39, 70, 66, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 50, 50, 44, 32, 32, 32, 39, 70, 67, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 50, 51, 44, 32, 32, 32, 39, 70, 68, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 70, 50, 52, 44, 32, 32, 32, 39, 70, 69, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 80, 65, 85, 83, 69, 44, 32, 32, 39, 70, 66, 39, 93, 44, 32, 47, 47, 32, 101, 113, 117, 97, 108, 32, 116, 111, 32, 70, 50, 49, 44, 32, 115, 101, 101, 32, 103, 117, 105, 95, 103, 116, 107, 95, 120, 49, 49, 46, 99, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 72, 69, 76, 80, 44, 32, 32, 32, 39, 37, 49, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 66, 65, 67, 75, 95, 83, 80, 65, 67, 69, 44, 32, 39, 107, 98, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 73, 78, 83, 69, 82, 84, 44, 32, 39, 107, 73, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 68, 69, 76, 69, 84, 69, 44, 32, 39, 107, 68, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 67, 76, 69, 65, 82, 44, 32, 32, 39, 107, 67, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 72, 79, 77, 69, 44, 32, 32, 32, 39, 107, 104, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 69, 78, 68, 44, 32, 32, 39, 64, 55, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 80, 65, 71, 69, 95, 85, 80, 44, 32, 32, 32, 39, 107, 80, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 80, 65, 71, 69, 95, 68, 79, 87, 78, 44, 32, 39, 107, 78, 39, 93, 44, 10, 32, 32, 32, 32, 32, 32, 91, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 80, 82, 73, 78, 84, 44, 32, 32, 39, 37, 57, 39, 93, 44, 10, 32, 32, 32, 32, 93, 46, 102, 111, 114, 69, 97, 99, 104, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 112, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 115, 112, 101, 99, 105, 97, 108, 95, 107, 101, 121, 115, 91, 112, 91, 48, 93, 93, 32, 61, 32, 112, 91, 49, 93, 59, 10, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 115, 112, 101, 99, 105, 97, 108, 95, 107, 101, 121, 115, 95, 110, 97, 109, 101, 109, 97, 112, 91, 112, 91, 49, 93, 93, 32, 61, 32, 112, 91, 48, 93, 59, 10, 32, 32, 32, 32, 125, 41, 59, 10, 32, 32, 32, 32, 47, 42, 32, 86, 73, 77, 74, 83, 95, 70, 79, 76, 68, 95, 69, 78, 68, 32, 42, 47, 10, 10, 32, 32, 32, 32, 47, 42, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 32, 99, 111, 108, 111, 114, 32, 110, 97, 109, 101, 115, 32, 86, 73, 77, 74, 83, 95, 70, 79, 76, 68, 95, 83, 84, 65, 82, 84, 10, 32, 32, 32, 32, 32, 42, 10, 32, 32, 32, 32, 32, 42, 32, 97, 32, 102, 101, 119, 32, 99, 111, 108, 111, 114, 115, 32, 97, 100, 100, 101, 100, 32, 98, 121, 32, 76, 117, 32, 87, 97, 110, 103, 10, 32, 32, 32, 32, 32, 42, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 118, 101, 114, 115, 105, 111, 110, 32, 102, 114, 111, 109, 32, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 104, 97, 114, 116, 104, 117, 114, 47, 99, 111, 108, 111, 114, 45, 99, 111, 110, 118, 101, 114, 116, 10, 32, 32, 32, 32, 32, 42, 32, 77, 73, 84, 32, 76, 105, 99, 101, 110, 115, 101, 10, 32, 32, 32, 32, 32, 42, 47, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 99, 111, 108, 111, 114, 95, 109, 97, 112, 32, 61, 32, 123, 10, 32, 32, 32, 32, 32, 32, 97, 108, 105, 99, 101, 98, 108, 117, 101, 58, 32, 91, 50, 52, 48, 44, 50, 52, 56, 44, 50, 53, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 97, 110, 116, 105, 113, 117, 101, 119, 104, 105, 116, 101, 58, 32, 91, 50, 53, 48, 44, 50, 51, 53, 44, 50, 49, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 97, 113, 117, 97, 58, 32, 91, 48, 44, 50, 53, 53, 44, 50, 53, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 97, 113, 117, 97, 109, 97, 114, 105, 110, 101, 58, 32, 91, 49, 50, 55, 44, 50, 53, 53, 44, 50, 49, 50, 93, 44, 10, 32, 32, 32, 32, 32, 32, 97, 122, 117, 114, 101, 58, 32, 91, 50, 52, 48, 44, 50, 53, 53, 44, 50, 53, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 98, 101, 105, 103, 101, 58, 32, 91, 50, 52, 53, 44, 50, 52, 53, 44, 50, 50, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 98, 105, 115, 113, 117, 101, 58, 32, 91, 50, 53, 53, 44, 50, 50, 56, 44, 49, 57, 54, 93, 44, 10, 32, 32, 32, 32, 32, 32, 98, 108, 97, 99, 107, 58, 32, 91, 48, 44, 48, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 98, 108, 97, 110, 99, 104, 101, 100, 97, 108, 109, 111, 110, 100, 58, 32, 91, 50, 53, 53, 44, 50, 51, 53, 44, 50, 48, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 98, 108, 117, 101, 58, 32, 91, 48, 44, 48, 44, 50, 53, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 98, 108, 117, 101, 118, 105, 111, 108, 101, 116, 58, 32, 91, 49, 51, 56, 44, 52, 51, 44, 50, 50, 54, 93, 44, 10, 32, 32, 32, 32, 32, 32, 98, 114, 111, 119, 110, 58, 32, 91, 49, 54, 53, 44, 52, 50, 44, 52, 50, 93, 44, 10, 32, 32, 32, 32, 32, 32, 98, 117, 114, 108, 121, 119, 111, 111, 100, 58, 32, 91, 50, 50, 50, 44, 49, 56, 52, 44, 49, 51, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 99, 97, 100, 101, 116, 98, 108, 117, 101, 58, 32, 91, 57, 53, 44, 49, 53, 56, 44, 49, 54, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 116, 114, 101, 117, 115, 101, 58, 32, 91, 49, 50, 55, 44, 50, 53, 53, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 99, 104, 111, 99, 111, 108, 97, 116, 101, 58, 32, 91, 50, 49, 48, 44, 49, 48, 53, 44, 51, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 99, 111, 114, 97, 108, 58, 32, 91, 50, 53, 53, 44, 49, 50, 55, 44, 56, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 99, 111, 114, 110, 102, 108, 111, 119, 101, 114, 98, 108, 117, 101, 58, 32, 91, 49, 48, 48, 44, 49, 52, 57, 44, 50, 51, 55, 93, 44, 10, 32, 32, 32, 32, 32, 32, 99, 111, 114, 110, 115, 105, 108, 107, 58, 32, 91, 50, 53, 53, 44, 50, 52, 56, 44, 50, 50, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 99, 114, 105, 109, 115, 111, 110, 58, 32, 91, 50, 50, 48, 44, 50, 48, 44, 54, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 99, 121, 97, 110, 58, 32, 91, 48, 44, 50, 53, 53, 44, 50, 53, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 98, 108, 117, 101, 58, 32, 91, 48, 44, 48, 44, 49, 51, 57, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 99, 121, 97, 110, 58, 32, 91, 48, 44, 49, 51, 57, 44, 49, 51, 57, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 103, 111, 108, 100, 101, 110, 114, 111, 100, 58, 32, 91, 49, 56, 52, 44, 49, 51, 52, 44, 49, 49, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 103, 114, 97, 121, 58, 32, 91, 49, 54, 57, 44, 49, 54, 57, 44, 49, 54, 57, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 103, 114, 101, 101, 110, 58, 32, 91, 48, 44, 49, 48, 48, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 103, 114, 101, 121, 58, 32, 91, 49, 54, 57, 44, 49, 54, 57, 44, 49, 54, 57, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 107, 104, 97, 107, 105, 58, 32, 91, 49, 56, 57, 44, 49, 56, 51, 44, 49, 48, 55, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 109, 97, 103, 101, 110, 116, 97, 58, 32, 91, 49, 51, 57, 44, 48, 44, 49, 51, 57, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 111, 108, 105, 118, 101, 103, 114, 101, 101, 110, 58, 32, 91, 56, 53, 44, 49, 48, 55, 44, 52, 55, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 111, 114, 97, 110, 103, 101, 58, 32, 91, 50, 53, 53, 44, 49, 52, 48, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 111, 114, 99, 104, 105, 100, 58, 32, 91, 49, 53, 51, 44, 53, 48, 44, 50, 48, 52, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 114, 101, 100, 58, 32, 91, 49, 51, 57, 44, 48, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 115, 97, 108, 109, 111, 110, 58, 32, 91, 50, 51, 51, 44, 49, 53, 48, 44, 49, 50, 50, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 115, 101, 97, 103, 114, 101, 101, 110, 58, 32, 91, 49, 52, 51, 44, 49, 56, 56, 44, 49, 52, 51, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 115, 108, 97, 116, 101, 98, 108, 117, 101, 58, 32, 91, 55, 50, 44, 54, 49, 44, 49, 51, 57, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 115, 108, 97, 116, 101, 103, 114, 97, 121, 58, 32, 91, 52, 55, 44, 55, 57, 44, 55, 57, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 115, 108, 97, 116, 101, 103, 114, 101, 121, 58, 32, 91, 52, 55, 44, 55, 57, 44, 55, 57, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 116, 117, 114, 113, 117, 111, 105, 115, 101, 58, 32, 91, 48, 44, 50, 48, 54, 44, 50, 48, 57, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 118, 105, 111, 108, 101, 116, 58, 32, 91, 49, 52, 56, 44, 48, 44, 50, 49, 49, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 97, 114, 107, 121, 101, 108, 108, 111, 119, 58, 32, 91, 48, 120, 98, 98, 44, 32, 48, 120, 98, 98, 44, 32, 48, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 100, 101, 101, 112, 112, 105, 110, 107, 58, 32, 91, 50, 53, 53, 44, 50, 48, 44, 49, 52, 55, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 101, 101, 112, 115, 107, 121, 98, 108, 117, 101, 58, 32, 91, 48, 44, 49, 57, 49, 44, 50, 53, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 105, 109, 103, 114, 97, 121, 58, 32, 91, 49, 48, 53, 44, 49, 48, 53, 44, 49, 48, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 105, 109, 103, 114, 101, 121, 58, 32, 91, 49, 48, 53, 44, 49, 48, 53, 44, 49, 48, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 100, 111, 100, 103, 101, 114, 98, 108, 117, 101, 58, 32, 91, 51, 48, 44, 49, 52, 52, 44, 50, 53, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 102, 105, 114, 101, 98, 114, 105, 99, 107, 58, 32, 91, 49, 55, 56, 44, 51, 52, 44, 51, 52, 93, 44, 10, 32, 32, 32, 32, 32, 32, 102, 108, 111, 114, 97, 108, 119, 104, 105, 116, 101, 58, 32, 91, 50, 53, 53, 44, 50, 53, 48, 44, 50, 52, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 101, 115, 116, 103, 114, 101, 101, 110, 58, 32, 91, 51, 52, 44, 49, 51, 57, 44, 51, 52, 93, 44, 10, 32, 32, 32, 32, 32, 32, 102, 117, 99, 104, 115, 105, 97, 58, 32, 91, 50, 53, 53, 44, 48, 44, 50, 53, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 103, 97, 105, 110, 115, 98, 111, 114, 111, 58, 32, 91, 50, 50, 48, 44, 50, 50, 48, 44, 50, 50, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 103, 104, 111, 115, 116, 119, 104, 105, 116, 101, 58, 32, 91, 50, 52, 56, 44, 50, 52, 56, 44, 50, 53, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 103, 111, 108, 100, 58, 32, 91, 50, 53, 53, 44, 50, 49, 53, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 103, 111, 108, 100, 101, 110, 114, 111, 100, 58, 32, 91, 50, 49, 56, 44, 49, 54, 53, 44, 51, 50, 93, 44, 10, 32, 32, 32, 32, 32, 32, 103, 114, 97, 121, 58, 32, 91, 49, 50, 56, 44, 49, 50, 56, 44, 49, 50, 56, 93, 44, 10, 32, 32, 32, 32, 32, 32, 103, 114, 101, 101, 110, 58, 32, 91, 48, 44, 49, 50, 56, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 103, 114, 101, 101, 110, 121, 101, 108, 108, 111, 119, 58, 32, 91, 49, 55, 51, 44, 50, 53, 53, 44, 52, 55, 93, 44, 10, 32, 32, 32, 32, 32, 32, 103, 114, 97, 121, 58, 32, 91, 49, 50, 56, 44, 49, 50, 56, 44, 49, 50, 56, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 97, 121, 49, 48, 58, 32, 91, 48, 120, 49, 97, 44, 32, 48, 120, 49, 97, 44, 32, 48, 120, 49, 97, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 97, 121, 50, 48, 58, 32, 91, 48, 120, 51, 51, 44, 32, 48, 120, 51, 51, 44, 32, 48, 120, 51, 51, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 97, 121, 51, 48, 58, 32, 91, 48, 120, 52, 100, 44, 32, 48, 120, 52, 100, 44, 32, 48, 120, 52, 100, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 97, 121, 52, 48, 58, 32, 91, 48, 120, 54, 54, 44, 32, 48, 120, 54, 54, 44, 32, 48, 120, 54, 54, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 97, 121, 53, 48, 58, 32, 91, 48, 120, 55, 102, 44, 32, 48, 120, 55, 102, 44, 32, 48, 120, 55, 102, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 97, 121, 54, 48, 58, 32, 91, 48, 120, 57, 57, 44, 32, 48, 120, 57, 57, 44, 32, 48, 120, 57, 57, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 97, 121, 55, 48, 58, 32, 91, 48, 120, 98, 51, 44, 32, 48, 120, 98, 51, 44, 32, 48, 120, 98, 51, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 97, 121, 56, 48, 58, 32, 91, 48, 120, 99, 99, 44, 32, 48, 120, 99, 99, 44, 32, 48, 120, 99, 99, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 97, 121, 57, 48, 58, 32, 91, 48, 120, 101, 53, 44, 32, 48, 120, 101, 53, 44, 32, 48, 120, 101, 53, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 101, 121, 58, 32, 91, 49, 50, 56, 44, 49, 50, 56, 44, 49, 50, 56, 93, 44, 10, 32, 32, 32, 32, 32, 32, 103, 114, 101, 121, 49, 48, 58, 32, 91, 48, 120, 49, 97, 44, 32, 48, 120, 49, 97, 44, 32, 48, 120, 49, 97, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 101, 121, 50, 48, 58, 32, 91, 48, 120, 51, 51, 44, 32, 48, 120, 51, 51, 44, 32, 48, 120, 51, 51, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 101, 121, 51, 48, 58, 32, 91, 48, 120, 52, 100, 44, 32, 48, 120, 52, 100, 44, 32, 48, 120, 52, 100, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 101, 121, 52, 48, 58, 32, 91, 48, 120, 54, 54, 44, 32, 48, 120, 54, 54, 44, 32, 48, 120, 54, 54, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 101, 121, 53, 48, 58, 32, 91, 48, 120, 55, 102, 44, 32, 48, 120, 55, 102, 44, 32, 48, 120, 55, 102, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 101, 121, 54, 48, 58, 32, 91, 48, 120, 57, 57, 44, 32, 48, 120, 57, 57, 44, 32, 48, 120, 57, 57, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 101, 121, 55, 48, 58, 32, 91, 48, 120, 98, 51, 44, 32, 48, 120, 98, 51, 44, 32, 48, 120, 98, 51, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 101, 121, 56, 48, 58, 32, 91, 48, 120, 99, 99, 44, 32, 48, 120, 99, 99, 44, 32, 48, 120, 99, 99, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 103, 114, 101, 121, 57, 48, 58, 32, 91, 48, 120, 101, 53, 44, 32, 48, 120, 101, 53, 44, 32, 48, 120, 101, 53, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 104, 111, 110, 101, 121, 100, 101, 119, 58, 32, 91, 50, 52, 48, 44, 50, 53, 53, 44, 50, 52, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 104, 111, 116, 112, 105, 110, 107, 58, 32, 91, 50, 53, 53, 44, 49, 48, 53, 44, 49, 56, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 105, 110, 100, 105, 97, 110, 114, 101, 100, 58, 32, 91, 50, 48, 53, 44, 57, 50, 44, 57, 50, 93, 44, 10, 32, 32, 32, 32, 32, 32, 105, 110, 100, 105, 103, 111, 58, 32, 91, 55, 53, 44, 48, 44, 49, 51, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 105, 118, 111, 114, 121, 58, 32, 91, 50, 53, 53, 44, 50, 53, 53, 44, 50, 52, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 107, 104, 97, 107, 105, 58, 32, 91, 50, 52, 48, 44, 50, 51, 48, 44, 49, 52, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 97, 118, 101, 110, 100, 101, 114, 58, 32, 91, 50, 51, 48, 44, 50, 51, 48, 44, 50, 53, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 97, 118, 101, 110, 100, 101, 114, 98, 108, 117, 115, 104, 58, 32, 91, 50, 53, 53, 44, 50, 52, 48, 44, 50, 52, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 97, 119, 110, 103, 114, 101, 101, 110, 58, 32, 91, 49, 50, 52, 44, 50, 53, 50, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 101, 109, 111, 110, 99, 104, 105, 102, 102, 111, 110, 58, 32, 91, 50, 53, 53, 44, 50, 53, 48, 44, 50, 48, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 114, 101, 100, 58, 32, 91, 48, 120, 102, 102, 44, 32, 48, 120, 98, 98, 44, 32, 48, 120, 98, 98, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 98, 108, 117, 101, 58, 32, 91, 49, 55, 51, 44, 50, 49, 54, 44, 50, 51, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 99, 111, 114, 97, 108, 58, 32, 91, 50, 52, 48, 44, 49, 50, 56, 44, 49, 50, 56, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 99, 121, 97, 110, 58, 32, 91, 50, 50, 52, 44, 50, 53, 53, 44, 50, 53, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 103, 111, 108, 100, 101, 110, 114, 111, 100, 121, 101, 108, 108, 111, 119, 58, 32, 91, 50, 53, 48, 44, 50, 53, 48, 44, 50, 49, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 103, 114, 97, 121, 58, 32, 91, 50, 49, 49, 44, 50, 49, 49, 44, 50, 49, 49, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 103, 114, 101, 101, 110, 58, 32, 91, 49, 52, 52, 44, 50, 51, 56, 44, 49, 52, 52, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 103, 114, 101, 121, 58, 32, 91, 50, 49, 49, 44, 50, 49, 49, 44, 50, 49, 49, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 109, 97, 103, 101, 110, 116, 97, 58, 32, 91, 48, 120, 102, 102, 44, 32, 48, 120, 98, 98, 44, 32, 48, 120, 102, 102, 93, 44, 32, 47, 47, 32, 87, 76, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 112, 105, 110, 107, 58, 32, 91, 50, 53, 53, 44, 49, 56, 50, 44, 49, 57, 51, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 115, 97, 108, 109, 111, 110, 58, 32, 91, 50, 53, 53, 44, 49, 54, 48, 44, 49, 50, 50, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 115, 101, 97, 103, 114, 101, 101, 110, 58, 32, 91, 51, 50, 44, 49, 55, 56, 44, 49, 55, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 115, 107, 121, 98, 108, 117, 101, 58, 32, 91, 49, 51, 53, 44, 50, 48, 54, 44, 50, 53, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 115, 108, 97, 116, 101, 103, 114, 97, 121, 58, 32, 91, 49, 49, 57, 44, 49, 51, 54, 44, 49, 53, 51, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 115, 108, 97, 116, 101, 103, 114, 101, 121, 58, 32, 91, 49, 49, 57, 44, 49, 51, 54, 44, 49, 53, 51, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 115, 116, 101, 101, 108, 98, 108, 117, 101, 58, 32, 91, 49, 55, 54, 44, 49, 57, 54, 44, 50, 50, 50, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 103, 104, 116, 121, 101, 108, 108, 111, 119, 58, 32, 91, 50, 53, 53, 44, 50, 53, 53, 44, 50, 50, 52, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 109, 101, 58, 32, 91, 48, 44, 50, 53, 53, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 109, 101, 103, 114, 101, 101, 110, 58, 32, 91, 53, 48, 44, 50, 48, 53, 44, 53, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 108, 105, 110, 101, 110, 58, 32, 91, 50, 53, 48, 44, 50, 52, 48, 44, 50, 51, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 97, 103, 101, 110, 116, 97, 58, 32, 91, 50, 53, 53, 44, 48, 44, 50, 53, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 97, 114, 111, 111, 110, 58, 32, 91, 49, 50, 56, 44, 48, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 101, 100, 105, 117, 109, 97, 113, 117, 97, 109, 97, 114, 105, 110, 101, 58, 32, 91, 49, 48, 50, 44, 50, 48, 53, 44, 49, 55, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 101, 100, 105, 117, 109, 98, 108, 117, 101, 58, 32, 91, 48, 44, 48, 44, 50, 48, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 101, 100, 105, 117, 109, 111, 114, 99, 104, 105, 100, 58, 32, 91, 49, 56, 54, 44, 56, 53, 44, 50, 49, 49, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 101, 100, 105, 117, 109, 112, 117, 114, 112, 108, 101, 58, 32, 91, 49, 52, 55, 44, 49, 49, 50, 44, 50, 49, 57, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 101, 100, 105, 117, 109, 115, 101, 97, 103, 114, 101, 101, 110, 58, 32, 91, 54, 48, 44, 49, 55, 57, 44, 49, 49, 51, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 101, 100, 105, 117, 109, 115, 108, 97, 116, 101, 98, 108, 117, 101, 58, 32, 91, 49, 50, 51, 44, 49, 48, 52, 44, 50, 51, 56, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 101, 100, 105, 117, 109, 115, 112, 114, 105, 110, 103, 103, 114, 101, 101, 110, 58, 32, 91, 48, 44, 50, 53, 48, 44, 49, 53, 52, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 101, 100, 105, 117, 109, 116, 117, 114, 113, 117, 111, 105, 115, 101, 58, 32, 91, 55, 50, 44, 50, 48, 57, 44, 50, 48, 52, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 101, 100, 105, 117, 109, 118, 105, 111, 108, 101, 116, 114, 101, 100, 58, 32, 91, 49, 57, 57, 44, 50, 49, 44, 49, 51, 51, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 105, 100, 110, 105, 103, 104, 116, 98, 108, 117, 101, 58, 32, 91, 50, 53, 44, 50, 53, 44, 49, 49, 50, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 105, 110, 116, 99, 114, 101, 97, 109, 58, 32, 91, 50, 52, 53, 44, 50, 53, 53, 44, 50, 53, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 105, 115, 116, 121, 114, 111, 115, 101, 58, 32, 91, 50, 53, 53, 44, 50, 50, 56, 44, 50, 50, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 109, 111, 99, 99, 97, 115, 105, 110, 58, 32, 91, 50, 53, 53, 44, 50, 50, 56, 44, 49, 56, 49, 93, 44, 10, 32, 32, 32, 32, 32, 32, 110, 97, 118, 97, 106, 111, 119, 104, 105, 116, 101, 58, 32, 91, 50, 53, 53, 44, 50, 50, 50, 44, 49, 55, 51, 93, 44, 10, 32, 32, 32, 32, 32, 32, 110, 97, 118, 121, 58, 32, 91, 48, 44, 48, 44, 49, 50, 56, 93, 44, 10, 32, 32, 32, 32, 32, 32, 111, 108, 100, 108, 97, 99, 101, 58, 32, 91, 50, 53, 51, 44, 50, 52, 53, 44, 50, 51, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 111, 108, 105, 118, 101, 58, 32, 91, 49, 50, 56, 44, 49, 50, 56, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 111, 108, 105, 118, 101, 100, 114, 97, 98, 58, 32, 91, 49, 48, 55, 44, 49, 52, 50, 44, 51, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 111, 114, 97, 110, 103, 101, 58, 32, 91, 50, 53, 53, 44, 49, 54, 53, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 111, 114, 97, 110, 103, 101, 114, 101, 100, 58, 32, 91, 50, 53, 53, 44, 54, 57, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 111, 114, 99, 104, 105, 100, 58, 32, 91, 50, 49, 56, 44, 49, 49, 50, 44, 50, 49, 52, 93, 44, 10, 32, 32, 32, 32, 32, 32, 112, 97, 108, 101, 103, 111, 108, 100, 101, 110, 114, 111, 100, 58, 32, 91, 50, 51, 56, 44, 50, 51, 50, 44, 49, 55, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 112, 97, 108, 101, 103, 114, 101, 101, 110, 58, 32, 91, 49, 53, 50, 44, 50, 53, 49, 44, 49, 53, 50, 93, 44, 10, 32, 32, 32, 32, 32, 32, 112, 97, 108, 101, 116, 117, 114, 113, 117, 111, 105, 115, 101, 58, 32, 91, 49, 55, 53, 44, 50, 51, 56, 44, 50, 51, 56, 93, 44, 10, 32, 32, 32, 32, 32, 32, 112, 97, 108, 101, 118, 105, 111, 108, 101, 116, 114, 101, 100, 58, 32, 91, 50, 49, 57, 44, 49, 49, 50, 44, 49, 52, 55, 93, 44, 10, 32, 32, 32, 32, 32, 32, 112, 97, 112, 97, 121, 97, 119, 104, 105, 112, 58, 32, 91, 50, 53, 53, 44, 50, 51, 57, 44, 50, 49, 51, 93, 44, 10, 32, 32, 32, 32, 32, 32, 112, 101, 97, 99, 104, 112, 117, 102, 102, 58, 32, 91, 50, 53, 53, 44, 50, 49, 56, 44, 49, 56, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 112, 101, 114, 117, 58, 32, 91, 50, 48, 53, 44, 49, 51, 51, 44, 54, 51, 93, 44, 10, 32, 32, 32, 32, 32, 32, 112, 105, 110, 107, 58, 32, 91, 50, 53, 53, 44, 49, 57, 50, 44, 50, 48, 51, 93, 44, 10, 32, 32, 32, 32, 32, 32, 112, 108, 117, 109, 58, 32, 91, 50, 50, 49, 44, 49, 54, 48, 44, 50, 50, 49, 93, 44, 10, 32, 32, 32, 32, 32, 32, 112, 111, 119, 100, 101, 114, 98, 108, 117, 101, 58, 32, 91, 49, 55, 54, 44, 50, 50, 52, 44, 50, 51, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 112, 117, 114, 112, 108, 101, 58, 32, 91, 49, 50, 56, 44, 48, 44, 49, 50, 56, 93, 44, 10, 32, 32, 32, 32, 32, 32, 114, 101, 100, 58, 32, 91, 50, 53, 53, 44, 48, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 114, 111, 115, 121, 98, 114, 111, 119, 110, 58, 32, 91, 49, 56, 56, 44, 49, 52, 51, 44, 49, 52, 51, 93, 44, 10, 32, 32, 32, 32, 32, 32, 114, 111, 121, 97, 108, 98, 108, 117, 101, 58, 32, 91, 54, 53, 44, 49, 48, 53, 44, 50, 50, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 97, 100, 100, 108, 101, 98, 114, 111, 119, 110, 58, 32, 91, 49, 51, 57, 44, 54, 57, 44, 49, 57, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 97, 108, 109, 111, 110, 58, 32, 91, 50, 53, 48, 44, 49, 50, 56, 44, 49, 49, 52, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 97, 110, 100, 121, 98, 114, 111, 119, 110, 58, 32, 91, 50, 52, 52, 44, 49, 54, 52, 44, 57, 54, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 101, 97, 103, 114, 101, 101, 110, 58, 32, 91, 52, 54, 44, 49, 51, 57, 44, 56, 55, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 101, 97, 115, 104, 101, 108, 108, 58, 32, 91, 50, 53, 53, 44, 50, 52, 53, 44, 50, 51, 56, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 105, 101, 110, 110, 97, 58, 32, 91, 49, 54, 48, 44, 56, 50, 44, 52, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 105, 108, 118, 101, 114, 58, 32, 91, 49, 57, 50, 44, 49, 57, 50, 44, 49, 57, 50, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 107, 121, 98, 108, 117, 101, 58, 32, 91, 49, 51, 53, 44, 50, 48, 54, 44, 50, 51, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 108, 97, 116, 101, 98, 108, 117, 101, 58]);
        fileData1.push.apply(fileData1, [32, 91, 49, 48, 54, 44, 57, 48, 44, 50, 48, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 108, 97, 116, 101, 103, 114, 97, 121, 58, 32, 91, 49, 49, 50, 44, 49, 50, 56, 44, 49, 52, 52, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 108, 97, 116, 101, 103, 114, 101, 121, 58, 32, 91, 49, 49, 50, 44, 49, 50, 56, 44, 49, 52, 52, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 110, 111, 119, 58, 32, 91, 50, 53, 53, 44, 50, 53, 48, 44, 50, 53, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 112, 114, 105, 110, 103, 103, 114, 101, 101, 110, 58, 32, 91, 48, 44, 50, 53, 53, 44, 49, 50, 55, 93, 44, 10, 32, 32, 32, 32, 32, 32, 115, 116, 101, 101, 108, 98, 108, 117, 101, 58, 32, 91, 55, 48, 44, 49, 51, 48, 44, 49, 56, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 116, 97, 110, 58, 32, 91, 50, 49, 48, 44, 49, 56, 48, 44, 49, 52, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 116, 101, 97, 108, 58, 32, 91, 48, 44, 49, 50, 56, 44, 49, 50, 56, 93, 44, 10, 32, 32, 32, 32, 32, 32, 116, 104, 105, 115, 116, 108, 101, 58, 32, 91, 50, 49, 54, 44, 49, 57, 49, 44, 50, 49, 54, 93, 44, 10, 32, 32, 32, 32, 32, 32, 116, 111, 109, 97, 116, 111, 58, 32, 91, 50, 53, 53, 44, 57, 57, 44, 55, 49, 93, 44, 10, 32, 32, 32, 32, 32, 32, 116, 117, 114, 113, 117, 111, 105, 115, 101, 58, 32, 91, 54, 52, 44, 50, 50, 52, 44, 50, 48, 56, 93, 44, 10, 32, 32, 32, 32, 32, 32, 118, 105, 111, 108, 101, 116, 58, 32, 91, 50, 51, 56, 44, 49, 51, 48, 44, 50, 51, 56, 93, 44, 10, 32, 32, 32, 32, 32, 32, 119, 104, 101, 97, 116, 58, 32, 91, 50, 52, 53, 44, 50, 50, 50, 44, 49, 55, 57, 93, 44, 10, 32, 32, 32, 32, 32, 32, 119, 104, 105, 116, 101, 58, 32, 91, 50, 53, 53, 44, 50, 53, 53, 44, 50, 53, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 119, 104, 105, 116, 101, 115, 109, 111, 107, 101, 58, 32, 91, 50, 52, 53, 44, 50, 52, 53, 44, 50, 52, 53, 93, 44, 10, 32, 32, 32, 32, 32, 32, 121, 101, 108, 108, 111, 119, 58, 32, 91, 50, 53, 53, 44, 50, 53, 53, 44, 48, 93, 44, 10, 32, 32, 32, 32, 32, 32, 121, 101, 108, 108, 111, 119, 103, 114, 101, 101, 110, 58, 32, 91, 49, 53, 52, 44, 50, 48, 53, 44, 53, 48, 93, 10, 32, 32, 32, 32, 125, 59, 10, 32, 32, 32, 32, 47, 42, 32, 86, 73, 77, 74, 83, 95, 70, 79, 76, 68, 95, 69, 78, 68, 32, 42, 47, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 108, 97, 115, 116, 77, 111, 117, 115, 101, 68, 111, 119, 110, 84, 97, 114, 103, 101, 116, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 59, 32, 47, 47, 32, 115, 101, 116, 32, 102, 111, 99, 117, 115, 32, 111, 110, 32, 115, 116, 97, 114, 116, 10, 32, 32, 32, 32, 118, 97, 114, 32, 105, 103, 110, 111, 114, 101, 75, 101, 121, 115, 32, 61, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 118, 105, 109, 106, 115, 46, 108, 97, 115, 116, 77, 111, 117, 115, 101, 68, 111, 119, 110, 84, 97, 114, 103, 101, 116, 32, 33, 61, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 41, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 97, 100, 100, 69, 118, 101, 110, 116, 76, 105, 115, 116, 101, 110, 101, 114, 40, 39, 109, 111, 117, 115, 101, 100, 111, 119, 110, 39, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 118, 101, 110, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 46, 99, 111, 110, 116, 97, 105, 110, 115, 40, 101, 118, 101, 110, 116, 46, 116, 97, 114, 103, 101, 116, 41, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 108, 97, 115, 116, 77, 111, 117, 115, 101, 68, 111, 119, 110, 84, 97, 114, 103, 101, 116, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 108, 97, 115, 116, 77, 111, 117, 115, 101, 68, 111, 119, 110, 84, 97, 114, 103, 101, 116, 32, 61, 32, 101, 118, 101, 110, 116, 46, 116, 97, 114, 103, 101, 116, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 99, 111, 110, 115, 111, 108, 101, 46, 108, 111, 103, 40, 34, 108, 97, 115, 116, 109, 111, 117, 115, 101, 100, 111, 119, 110, 34, 44, 32, 118, 105, 109, 106, 115, 46, 108, 97, 115, 116, 77, 111, 117, 115, 101, 68, 111, 119, 110, 84, 97, 114, 103, 101, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 44, 10, 32, 32, 32, 32, 32, 32, 102, 97, 108, 115, 101, 41, 59, 10, 10, 32, 32, 32, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 97, 100, 100, 69, 118, 101, 110, 116, 76, 105, 115, 116, 101, 110, 101, 114, 40, 39, 107, 101, 121, 112, 114, 101, 115, 115, 39, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 105, 103, 110, 111, 114, 101, 75, 101, 121, 115, 40, 41, 41, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 101, 46, 112, 114, 101, 118, 101, 110, 116, 68, 101, 102, 97, 117, 108, 116, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 104, 97, 110, 100, 108, 101, 95, 107, 101, 121, 40, 101, 46, 99, 104, 97, 114, 67, 111, 100, 101, 44, 32, 101, 46, 107, 101, 121, 67, 111, 100, 101, 44, 32, 101, 41, 59, 10, 32, 32, 32, 32, 125, 41, 59, 10, 10, 32, 32, 32, 32, 47, 42, 32, 10, 32, 32, 32, 32, 32, 42, 32, 77, 111, 115, 116, 32, 107, 101, 121, 115, 32, 99, 97, 110, 32, 98, 101, 32, 104, 97, 110, 100, 108, 101, 100, 32, 100, 117, 114, 105, 110, 103, 32, 116, 104, 101, 32, 107, 101, 121, 112, 114, 101, 115, 115, 32, 101, 118, 101, 110, 116, 10, 32, 32, 32, 32, 32, 42, 32, 66, 117, 116, 32, 115, 111, 109, 101, 32, 115, 112, 101, 99, 105, 97, 108, 32, 107, 101, 121, 115, 32, 109, 117, 115, 116, 32, 98, 101, 32, 104, 97, 110, 100, 108, 101, 100, 32, 100, 117, 114, 105, 110, 103, 32, 116, 104, 101, 32, 107, 101, 121, 100, 111, 119, 110, 32, 101, 118, 101, 110, 116, 32, 105, 110, 32, 111, 114, 100, 101, 114, 32, 116, 111, 32, 112, 114, 101, 118, 101, 110, 116, 32, 100, 101, 102, 97, 117, 108, 116, 32, 97, 99, 116, 105, 111, 110, 115, 10, 32, 32, 32, 32, 32, 42, 10, 32, 32, 32, 32, 32, 42, 32, 70, 32, 109, 101, 97, 110, 115, 32, 34, 110, 101, 101, 100, 101, 100, 32, 102, 111, 114, 32, 70, 105, 114, 101, 102, 111, 120, 34, 10, 32, 32, 32, 32, 32, 42, 32, 67, 32, 109, 101, 97, 110, 115, 32, 34, 110, 101, 101, 100, 101, 100, 32, 102, 111, 114, 32, 67, 104, 114, 111, 109, 101, 34, 10, 32, 32, 32, 32, 32, 42, 47, 10, 32, 32, 32, 32, 118, 97, 114, 32, 107, 101, 121, 115, 95, 116, 111, 95, 105, 110, 116, 101, 114, 99, 101, 112, 116, 95, 117, 112, 111, 110, 95, 107, 101, 121, 100, 111, 119, 110, 32, 61, 32, 123, 125, 59, 10, 32, 32, 32, 32, 91, 32, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 69, 83, 67, 65, 80, 69, 44, 32, 47, 47, 32, 67, 70, 10, 32, 32, 32, 32, 32, 32, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 84, 65, 66, 44, 32, 47, 47, 32, 67, 10, 32, 32, 32, 32, 32, 32, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 66, 65, 67, 75, 95, 83, 80, 65, 67, 69, 44, 32, 47, 47, 32, 67, 32, 10, 32, 32, 32, 32, 32, 32, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 85, 80, 44, 32, 47, 47, 32, 67, 10, 32, 32, 32, 32, 32, 32, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 68, 79, 87, 78, 44, 32, 47, 47, 32, 67, 10, 32, 32, 32, 32, 32, 32, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 76, 69, 70, 84, 44, 32, 47, 47, 32, 67, 10, 32, 32, 32, 32, 32, 32, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 82, 73, 71, 72, 84, 44, 32, 47, 47, 32, 67, 10, 32, 32, 32, 32, 32, 32, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 68, 69, 76, 69, 84, 69, 44, 32, 47, 47, 32, 67, 10, 32, 32, 32, 32, 32, 32, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 80, 65, 71, 69, 95, 85, 80, 44, 32, 47, 47, 32, 67, 10, 32, 32, 32, 32, 32, 32, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 80, 65, 71, 69, 95, 68, 79, 87, 78, 44, 32, 47, 47, 32, 67, 10, 32, 32, 32, 32, 93, 46, 102, 111, 114, 69, 97, 99, 104, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 107, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 107, 101, 121, 115, 95, 116, 111, 95, 105, 110, 116, 101, 114, 99, 101, 112, 116, 95, 117, 112, 111, 110, 95, 107, 101, 121, 100, 111, 119, 110, 91, 107, 93, 32, 61, 32, 49, 59, 10, 32, 32, 32, 32, 125, 41, 59, 10, 10, 32, 32, 32, 32, 47, 42, 32, 99, 97, 112, 116, 117, 114, 101, 32, 115, 111, 109, 101, 32, 115, 112, 101, 99, 105, 97, 108, 32, 107, 101, 121, 115, 32, 116, 104, 97, 116, 32, 119, 111, 110, 39, 116, 32, 116, 114, 105, 103, 103, 101, 114, 32, 39, 107, 101, 121, 112, 114, 101, 115, 115, 39, 32, 42, 47, 10, 32, 32, 32, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 97, 100, 100, 69, 118, 101, 110, 116, 76, 105, 115, 116, 101, 110, 101, 114, 40, 39, 107, 101, 121, 100, 111, 119, 110, 39, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 105, 103, 110, 111, 114, 101, 75, 101, 121, 115, 40, 41, 41, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 101, 46, 107, 101, 121, 67, 111, 100, 101, 32, 105, 110, 32, 107, 101, 121, 115, 95, 116, 111, 95, 105, 110, 116, 101, 114, 99, 101, 112, 116, 95, 117, 112, 111, 110, 95, 107, 101, 121, 100, 111, 119, 110, 41, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 46, 112, 114, 101, 118, 101, 110, 116, 68, 101, 102, 97, 117, 108, 116, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 104, 97, 110, 100, 108, 101, 95, 107, 101, 121, 40, 48, 44, 32, 101, 46, 107, 101, 121, 67, 111, 100, 101, 44, 32, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 41, 59, 10, 10, 32, 32, 32, 32, 105, 102, 40, 33, 118, 105, 109, 106, 115, 46, 105, 115, 95, 102, 105, 114, 101, 102, 111, 120, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 47, 47, 32, 109, 111, 110, 105, 116, 111, 114, 32, 99, 116, 114, 108, 32, 102, 111, 114, 32, 110, 111, 110, 45, 102, 105, 114, 101, 102, 111, 120, 10, 32, 32, 32, 32, 32, 32, 47, 47, 32, 100, 105, 115, 112, 108, 97, 121, 32, 100, 105, 97, 108, 111, 103, 32, 105, 102, 32, 94, 87, 32, 105, 115, 32, 112, 114, 101, 115, 115, 101, 100, 10, 32, 32, 32, 32, 32, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 97, 100, 100, 69, 118, 101, 110, 116, 76, 105, 115, 116, 101, 110, 101, 114, 40, 39, 107, 101, 121, 100, 111, 119, 110, 39, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 105, 103, 110, 111, 114, 101, 75, 101, 121, 115, 40, 41, 41, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 40, 101, 46, 107, 101, 121, 67, 111, 100, 101, 32, 61, 61, 61, 32, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 67, 79, 78, 84, 82, 79, 76, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 99, 116, 114, 108, 95, 112, 114, 101, 115, 115, 101, 100, 32, 61, 32, 116, 114, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 125, 41, 59, 10, 32, 32, 32, 32, 32, 32, 100, 111, 99, 117, 109, 101, 110, 116, 46, 97, 100, 100, 69, 118, 101, 110, 116, 76, 105, 115, 116, 101, 110, 101, 114, 40, 39, 107, 101, 121, 117, 112, 39, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 105, 103, 110, 111, 114, 101, 75, 101, 121, 115, 40, 41, 41, 32, 114, 101, 116, 117, 114, 110, 32, 116, 114, 117, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 40, 101, 46, 107, 101, 121, 67, 111, 100, 101, 32, 61, 61, 61, 32, 75, 101, 121, 69, 118, 101, 110, 116, 46, 68, 79, 77, 95, 86, 75, 95, 67, 79, 78, 84, 82, 79, 76, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 99, 116, 114, 108, 95, 112, 114, 101, 115, 115, 101, 100, 32, 61, 32, 102, 97, 108, 115, 101, 59, 10, 32, 32, 32, 32, 32, 32, 125, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 125, 44, 10, 32, 32, 10, 32, 32, 118, 105, 109, 106, 115, 95, 112, 114, 101, 112, 97, 114, 101, 95, 101, 120, 105, 116, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 105, 102, 40, 33, 33, 77, 111, 100, 117, 108, 101, 91, 39, 86, 73, 77, 74, 83, 95, 65, 76, 76, 79, 87, 95, 69, 88, 73, 84, 39, 93, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 47, 47, 32, 84, 104, 105, 115, 32, 105, 115, 32, 108, 105, 107, 101, 108, 121, 32, 116, 111, 32, 98, 101, 32, 115, 101, 116, 32, 98, 121, 32, 97, 115, 121, 110, 99, 32, 106, 111, 98, 115, 10, 32, 32, 32, 32, 32, 32, 47, 47, 32, 104, 97, 99, 107, 32, 105, 116, 32, 116, 111, 32, 101, 120, 105, 116, 32, 110, 111, 114, 109, 97, 108, 108, 121, 10, 32, 32, 32, 32, 32, 32, 77, 111, 100, 117, 108, 101, 91, 39, 110, 111, 69, 120, 105, 116, 82, 117, 110, 116, 105, 109, 101, 39, 93, 32, 61, 32, 102, 97, 108, 115, 101, 59, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 49, 59, 10, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 98, 101, 101, 112, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 118, 97, 114, 32, 98, 101, 101, 112, 95, 110, 111, 100, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 98, 101, 101, 112, 95, 110, 111, 100, 101, 59, 10, 32, 32, 32, 32, 47, 42, 32, 115, 111, 109, 101, 116, 105, 109, 101, 115, 32, 116, 104, 105, 115, 32, 105, 115, 32, 99, 97, 108, 108, 101, 100, 32, 98, 101, 102, 111, 114, 101, 32, 118, 105, 109, 106, 115, 46, 98, 101, 101, 112, 32, 105, 115, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 32, 42, 47, 10, 32, 32, 32, 32, 105, 102, 40, 98, 101, 101, 112, 95, 110, 111, 100, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 118, 105, 109, 106, 115, 46, 105, 115, 95, 99, 104, 114, 111, 109, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 119, 105, 116, 104, 111, 117, 116, 32, 116, 104, 105, 115, 32, 67, 104, 114, 111, 109, 101, 32, 119, 111, 117, 108, 100, 32, 111, 110, 108, 121, 32, 112, 108, 97, 121, 32, 105, 116, 32, 111, 110, 99, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 101, 101, 112, 95, 110, 111, 100, 101, 46, 108, 111, 97, 100, 40, 41, 59, 32, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 98, 101, 101, 112, 95, 110, 111, 100, 101, 46, 112, 108, 97, 121, 40, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 102, 108, 97, 115, 104, 95, 95, 100, 101, 112, 115, 58, 32, 91, 39, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 95, 97, 115, 121, 110, 99, 95, 114, 101, 115, 117, 109, 101, 39, 93, 44, 10, 32, 32, 118, 105, 109, 106, 115, 95, 102, 108, 97, 115, 104, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 109, 115, 101, 99, 41, 32, 123, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 119, 32, 61, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 46, 119, 105, 100, 116, 104, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 104, 32, 61, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 46, 104, 101, 105, 103, 104, 116, 59, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 105, 110, 118, 101, 114, 116, 95, 99, 97, 110, 118, 97, 115, 40, 48, 44, 32, 48, 44, 32, 119, 44, 32, 104, 41, 59, 10, 32, 32, 32, 32, 115, 101, 116, 84, 105, 109, 101, 111, 117, 116, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 105, 110, 118, 101, 114, 116, 95, 99, 97, 110, 118, 97, 115, 40, 48, 44, 32, 48, 44, 32, 119, 44, 32, 104, 41, 59, 10, 32, 32, 32, 32, 32, 32, 97, 115, 109, 91, 39, 115, 101, 116, 65, 115, 121, 110, 99, 39, 93, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 95, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 95, 97, 115, 121, 110, 99, 95, 114, 101, 115, 117, 109, 101, 40, 41, 59, 10, 32, 32, 32, 32, 125, 44, 32, 109, 115, 101, 99, 41, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 103, 101, 116, 95, 119, 105, 110, 100, 111, 119, 95, 119, 105, 100, 116, 104, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 105, 109, 106, 115, 46, 119, 105, 110, 100, 111, 119, 95, 119, 105, 100, 116, 104, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 103, 101, 116, 95, 119, 105, 110, 100, 111, 119, 95, 104, 101, 105, 103, 104, 116, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 105, 109, 106, 115, 46, 119, 105, 110, 100, 111, 119, 95, 104, 101, 105, 103, 104, 116, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 114, 101, 115, 105, 122, 101, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 119, 105, 100, 116, 104, 44, 32, 104, 101, 105, 103, 104, 116, 41, 32, 123, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 59, 10, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 115, 116, 121, 108, 101, 46, 119, 105, 100, 116, 104, 32, 61, 32, 119, 105, 100, 116, 104, 32, 47, 32, 118, 105, 109, 106, 115, 46, 100, 101, 118, 105, 99, 101, 80, 105, 120, 101, 108, 82, 97, 116, 105, 111, 32, 43, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 111, 102, 102, 115, 101, 116, 87, 105, 100, 116, 104, 32, 45, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 99, 108, 105, 101, 110, 116, 87, 105, 100, 116, 104, 32, 43, 32, 39, 112, 120, 39, 59, 10, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 115, 116, 121, 108, 101, 46, 104, 101, 105, 103, 104, 116, 32, 61, 32, 104, 101, 105, 103, 104, 116, 32, 47, 32, 118, 105, 109, 106, 115, 46, 100, 101, 118, 105, 99, 101, 80, 105, 120, 101, 108, 82, 97, 116, 105, 111, 32, 43, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 111, 102, 102, 115, 101, 116, 72, 101, 105, 103, 104, 116, 32, 45, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 95, 110, 111, 100, 101, 46, 99, 108, 105, 101, 110, 116, 72, 101, 105, 103, 104, 116, 32, 43, 32, 39, 112, 120, 39, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 59, 10, 32, 32, 32, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 46, 119, 105, 100, 116, 104, 32, 61, 32, 119, 105, 100, 116, 104, 59, 10, 32, 32, 32, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 46, 104, 101, 105, 103, 104, 116, 32, 61, 32, 104, 101, 105, 103, 104, 116, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 100, 114, 97, 119, 95, 115, 116, 114, 105, 110, 103, 95, 95, 100, 101, 112, 115, 58, 32, 91, 39, 118, 105, 109, 106, 115, 95, 99, 108, 101, 97, 114, 95, 98, 108, 111, 99, 107, 39, 93, 44, 10, 32, 32, 118, 105, 109, 106, 115, 95, 100, 114, 97, 119, 95, 115, 116, 114, 105, 110, 103, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 114, 111, 119, 44, 32, 99, 111, 108, 44, 32, 115, 44, 32, 108, 101, 110, 44, 32, 102, 108, 97, 103, 115, 41, 32, 123, 10, 10, 32, 32, 32, 32, 47, 47, 32, 84, 79, 68, 79, 58, 32, 117, 115, 101, 32, 109, 97, 99, 114, 111, 115, 32, 102, 111, 114, 32, 102, 108, 97, 103, 32, 99, 111, 110, 115, 116, 97, 110, 116, 115, 10, 32, 32, 32, 32, 105, 102, 40, 33, 40, 102, 108, 97, 103, 115, 32, 38, 32, 48, 120, 48, 49, 41, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 95, 118, 105, 109, 106, 115, 95, 99, 108, 101, 97, 114, 95, 98, 108, 111, 99, 107, 40, 114, 111, 119, 44, 32, 99, 111, 108, 44, 32, 114, 111, 119, 44, 32, 99, 111, 108, 32, 43, 32, 108, 101, 110, 32, 45, 32, 49, 41, 59, 10, 32, 32, 32, 32, 125, 10, 10, 32, 32, 32, 32, 118, 97, 114, 32, 102, 111, 110, 116, 32, 61, 32, 118, 105, 109, 106, 115, 46, 102, 111, 110, 116, 59, 10, 32, 32, 32, 32, 105, 102, 40, 102, 108, 97, 103, 115, 32, 38, 32, 48, 120, 48, 50, 41, 32, 102, 111, 110, 116, 32, 61, 32, 39, 98, 111, 108, 100, 32, 39, 32, 43, 32, 102, 111, 110, 116, 59, 10, 10, 32, 32, 32, 32, 115, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 115, 44, 32, 108, 101, 110, 41, 59, 10, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 116, 120, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 99, 116, 120, 59, 10, 10, 32, 32, 32, 32, 99, 116, 120, 46, 102, 111, 110, 116, 32, 61, 32, 102, 111, 110, 116, 59, 10, 32, 32, 32, 32, 99, 116, 120, 46, 116, 101, 120, 116, 66, 97, 115, 101, 108, 105, 110, 101, 32, 61, 32, 39, 98, 111, 116, 116, 111, 109, 39, 59, 10, 10, 32, 32, 32, 32, 99, 116, 120, 46, 102, 105, 108, 108, 83, 116, 121, 108, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 102, 103, 95, 99, 111, 108, 111, 114, 59, 10, 10, 32, 32, 32, 32, 118, 97, 114, 32, 120, 32, 61, 32, 99, 111, 108, 32, 42, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 119, 105, 100, 116, 104, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 121, 32, 61, 32, 40, 114, 111, 119, 32, 43, 32, 49, 41, 32, 42, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 104, 101, 105, 103, 104, 116, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 119, 32, 61, 32, 108, 101, 110, 32, 42, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 119, 105, 100, 116, 104, 59, 10, 32, 32, 32, 32, 99, 116, 120, 46, 102, 105, 108, 108, 84, 101, 120, 116, 40, 115, 44, 32, 120, 44, 32, 121, 44, 32, 119, 41, 59, 10, 10, 32, 32, 32, 32, 105, 102, 40, 102, 108, 97, 103, 115, 32, 38, 32, 48, 120, 48, 52, 41, 32, 123, 32, 47, 47, 32, 117, 110, 100, 101, 114, 108, 105, 110, 101, 10, 32, 32, 32, 32, 32, 32, 99, 116, 120, 46, 115, 116, 114, 111, 107, 101, 83, 116, 121, 108, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 102, 103, 95, 99, 111, 108, 111, 114, 59, 10, 32, 32, 32, 32, 32, 32, 99, 116, 120, 46, 98, 101, 103, 105, 110, 80, 97, 116, 104, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 99, 116, 120, 46, 109, 111, 118, 101, 84, 111, 40, 120, 44, 32, 121, 32, 45, 32, 48, 46, 53, 41, 59, 10, 32, 32, 32, 32, 32, 32, 99, 116, 120, 46, 108, 105, 110, 101, 84, 111, 40, 120, 32, 43, 32, 119, 44, 32, 121, 32, 45, 32, 48, 46, 53, 41, 59, 10, 32, 32, 32, 32, 32, 32, 99, 116, 120, 46, 115, 116, 114, 111, 107, 101, 40, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 105, 102, 40, 102, 108, 97, 103, 115, 32, 38, 32, 48, 120, 48, 56, 41, 32, 123, 32, 47, 47, 32, 117, 110, 100, 101, 114, 99, 117, 114, 108, 10, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 111, 102, 102, 115, 32, 61, 32, 91, 49, 46, 53, 44, 32, 48, 46, 53, 44, 32, 48, 46, 53, 44, 32, 48, 46, 53, 44, 32, 49, 46, 53, 44, 32, 50, 46, 53, 44, 32, 50, 46, 53, 44, 32, 50, 46, 53, 93, 59, 10, 32, 32, 32, 32, 32, 32, 99, 116, 120, 46, 115, 116, 114, 111, 107, 101, 83, 116, 121, 108, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 115, 112, 95, 99, 111, 108, 111, 114, 59, 10, 32, 32, 32, 32, 32, 32, 99, 116, 120, 46, 98, 101, 103, 105, 110, 80, 97, 116, 104, 40, 41, 59, 10, 32, 32, 32, 32, 32, 32, 99, 116, 120, 46, 109, 111, 118, 101, 84, 111, 40, 120, 44, 32, 121, 32, 45, 32, 111, 102, 102, 115, 91, 120, 37, 56, 93, 41, 59, 10, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 40, 118, 97, 114, 32, 120, 120, 32, 61, 32, 120, 32, 43, 32, 49, 44, 32, 120, 120, 50, 32, 61, 32, 120, 32, 43, 32, 119, 59, 32, 120, 120, 32, 60, 32, 120, 120, 50, 59, 32, 43, 43, 120, 120, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 116, 120, 46, 108, 105, 110, 101, 84, 111, 40, 120, 120, 44, 32, 121, 32, 45, 32, 111, 102, 102, 115, 91, 120, 120, 37, 56, 93, 41, 59, 10, 10, 32, 32, 32, 32, 32, 32, 99, 116, 120, 46, 115, 116, 114, 111, 107, 101, 40, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 99, 108, 101, 97, 114, 95, 98, 108, 111, 99, 107, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 114, 111, 119, 49, 44, 32, 99, 111, 108, 49, 44, 32, 114, 111, 119, 50, 44, 32, 99, 111, 108, 50, 41, 32, 123, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 116, 120, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 99, 116, 120, 59, 10, 32, 32, 32, 32, 99, 116, 120, 46, 102, 105, 108, 108, 83, 116, 121, 108, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 98, 103, 95, 99, 111, 108, 111, 114, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 119, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 119, 105, 100, 116, 104, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 104, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 104, 101, 105, 103, 104, 116, 59, 10, 32, 32, 32, 32, 99, 116, 120, 46, 102, 105, 108, 108, 82, 101, 99, 116, 40, 99, 111, 108, 49, 32, 42, 32, 99, 119, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 111, 119, 49, 32, 42, 32, 99, 104, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 99, 111, 108, 50, 45, 99, 111, 108, 49, 43, 49, 41, 32, 42, 32, 99, 119, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 114, 111, 119, 50, 45, 114, 111, 119, 49, 43, 49, 41, 32, 42, 32, 99, 104, 41, 59, 10, 32, 32, 125, 44, 32, 32, 32, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 99, 108, 101, 97, 114, 95, 97, 108, 108, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 116, 120, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 99, 116, 120, 59, 10, 32, 32, 32, 32, 99, 116, 120, 46, 102, 105, 108, 108, 83, 116, 121, 108, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 98, 103, 95, 99, 111, 108, 111, 114, 59, 10, 32, 32, 32, 32, 99, 116, 120, 46, 102, 105, 108, 108, 82, 101, 99, 116, 40, 48, 44, 32, 48, 44, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 46, 119, 105, 100, 116, 104, 44, 32, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 46, 104, 101, 105, 103, 104, 116, 41, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 100, 101, 108, 101, 116, 101, 95, 108, 105, 110, 101, 115, 95, 95, 100, 101, 112, 115, 58, 32, 91, 39, 118, 105, 109, 106, 115, 95, 99, 108, 101, 97, 114, 95, 98, 108, 111, 99, 107, 39, 93, 44, 10, 32, 32, 118, 105, 109, 106, 115, 95, 100, 101, 108, 101, 116, 101, 95, 108, 105, 110, 101, 115, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 110, 117, 109, 95, 108, 105, 110, 101, 115, 44, 32, 114, 111, 119, 49, 44, 32, 114, 111, 119, 50, 44, 32, 99, 111, 108, 49, 44, 32, 99, 111, 108, 50, 41, 32, 123, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 116, 120, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 99, 116, 120, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 119, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 119, 105, 100, 116, 104, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 104, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 104, 101, 105, 103, 104, 116, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 120, 32, 61, 32, 99, 111, 108, 49, 32, 42, 32, 99, 119, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 121, 32, 61, 32, 40, 114, 111, 119, 49, 32, 43, 32, 110, 117, 109, 95, 108, 105, 110, 101, 115, 41, 32, 42, 32, 99, 104, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 119, 32, 61, 32, 40, 99, 111, 108, 50, 32, 45, 32, 99, 111, 108, 49, 32, 43, 32, 49, 41, 32, 42, 32, 99, 119, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 104, 32, 61, 32, 40, 114, 111, 119, 50, 32, 43, 32, 49, 41, 32, 42, 32, 99, 104, 32, 45, 32, 121, 59, 10, 32, 32, 32, 32, 99, 116, 120, 46, 100, 114, 97, 119, 73, 109, 97, 103, 101, 40, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 44, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 44, 32, 121, 44, 32, 119, 44, 32, 104, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 44, 32, 114, 111, 119, 49, 32, 42, 32, 99, 104, 44, 32, 119, 44, 32, 104, 41, 59, 10, 10, 32, 32, 32, 32, 95, 118, 105, 109, 106, 115, 95, 99, 108, 101, 97, 114, 95, 98, 108, 111, 99, 107, 40, 114, 111, 119, 50, 32, 45, 32, 110, 117, 109, 95, 108, 105, 110, 101, 115, 32, 43, 32, 49, 44, 32, 99, 111, 108, 49, 44, 32, 114, 111, 119, 50, 44, 32, 99, 111, 108, 50, 41, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 105, 110, 115, 101, 114, 116, 95, 108, 105, 110, 101, 115, 95, 95, 100, 101, 112, 115, 58, 32, 91, 39, 118, 105, 109, 106, 115, 95, 99, 108, 101, 97, 114, 95, 98, 108, 111, 99, 107, 39, 93, 44, 10, 32, 32, 118, 105, 109, 106, 115, 95, 105, 110, 115, 101, 114, 116, 95, 108, 105, 110, 101, 115, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 110, 117, 109, 95, 108, 105, 110, 101, 115, 44, 32, 114, 111, 119, 49, 44, 32, 114, 111, 119, 50, 44, 32, 99, 111, 108, 49, 44, 32, 99, 111, 108, 50, 41, 32, 123, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 116, 120, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 99, 116, 120, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 119, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 119, 105, 100, 116, 104, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 104, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 104, 101, 105, 103, 104, 116, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 120, 32, 61, 32, 99, 111, 108, 49, 32, 42, 32, 99, 119, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 119, 32, 61, 32, 40, 99, 111, 108, 50, 32, 45, 32, 99, 111, 108, 49, 32, 43, 32, 49, 41, 32, 42, 32, 99, 119, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 104, 32, 61, 32, 40, 114, 111, 119, 50, 32, 45, 32, 114, 111, 119, 49, 32, 45, 32, 110, 117, 109, 95, 108, 105, 110, 101, 115, 32, 43, 32, 49, 41, 32, 42, 32, 99, 104, 59, 10, 32, 32, 32, 32, 99, 116, 120, 46, 100, 114, 97, 119, 73, 109, 97, 103, 101, 40, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 110, 111, 100, 101, 44, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 44, 32, 114, 111, 119, 49, 32, 42, 32, 99, 104, 44, 32, 119, 44, 32, 104, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 44, 32, 40, 114, 111, 119, 49, 32, 43, 32, 110, 117, 109, 95, 108, 105, 110, 101, 115, 41, 32, 42, 32, 99, 104, 44, 32, 119, 44, 32, 104, 41, 59, 10, 10, 32, 32, 32, 32, 95, 118, 105, 109, 106, 115, 95, 99, 108, 101, 97, 114, 95, 98, 108, 111, 99, 107, 40, 114, 111, 119, 49, 44, 32, 99, 111, 108, 49, 44, 32, 114, 111, 119, 49, 32, 43, 32, 110, 117, 109, 95, 108, 105, 110, 101, 115, 32, 45, 32, 49, 44, 32, 99, 111, 108, 50, 41, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 100, 114, 97, 119, 95, 104, 111, 108, 108, 111, 119, 95, 99, 117, 114, 115, 111, 114, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 114, 111, 119, 44, 32, 99, 111, 108, 41, 32, 123, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 116, 120, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 99, 116, 120, 59, 10, 32, 32, 32, 32, 99, 116, 120, 46, 115, 116, 114, 111, 107, 101, 83, 116, 121, 108, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 102, 103, 95, 99, 111, 108, 111, 114, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 119, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 119, 105, 100, 116, 104, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 104, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 104, 101, 105, 103, 104, 116, 59, 10, 32, 32, 32, 32, 99, 116, 120, 46, 115, 116, 114, 111, 107, 101, 82, 101, 99, 116, 40, 99, 111, 108, 32, 42, 32, 99, 119, 32, 43, 32, 48, 46, 53, 44, 32, 114, 111, 119, 32, 42, 32, 99, 104, 32, 43, 32, 48, 46, 53, 44, 32, 99, 119, 32, 45, 32, 49, 44, 32, 99, 104, 32, 45, 32, 49, 41, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 100, 114, 97, 119, 95, 112, 97, 114, 116, 95, 99, 117, 114, 115, 111, 114, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 114, 111, 119, 44, 32, 99, 111, 108, 44, 32, 119, 105, 100, 116, 104, 44, 32, 104, 101, 105, 103, 104, 116, 41, 32, 123, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 116, 120, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 97, 110, 118, 97, 115, 95, 99, 116, 120, 59, 10, 32, 32, 32, 32, 99, 116, 120, 46, 102, 105, 108, 108, 83, 116, 121, 108, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 102, 103, 95, 99, 111, 108, 111, 114, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 119, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 119, 105, 100, 116, 104, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 104, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 104, 101, 105, 103, 104, 116, 59, 10, 32, 32, 32, 32, 99, 116, 120, 46, 102, 105, 108, 108, 82, 101, 99, 116, 40, 99, 111, 108, 32, 42, 32, 99, 119, 44, 32, 40, 114, 111, 119, 32, 43, 32, 49, 41, 32, 42, 32, 99, 104, 32, 45, 32, 104, 101, 105, 103, 104, 116, 44, 32, 119, 105, 100, 116, 104, 44, 32, 104, 101, 105, 103, 104, 116, 41, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 105, 110, 118, 101, 114, 116, 95, 114, 101, 99, 116, 97, 110, 103, 108, 101, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 114, 111, 119, 44, 32, 99, 111, 108, 44, 32, 114, 111, 119, 95, 99, 111, 117, 110, 116, 44, 32, 99, 111, 108, 95, 99, 111, 117, 110, 116, 41, 32, 123, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 119, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 119, 105, 100, 116, 104, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 104, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 104, 101, 105, 103, 104, 116, 59, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 105, 110, 118, 101, 114, 116, 95, 99, 97, 110, 118, 97, 115, 40, 99, 111, 108, 32, 42, 32, 99, 119, 44, 32, 114, 111, 119, 32, 42, 32, 99, 104, 44, 32, 99, 111, 108, 95, 99, 111, 117, 110, 116, 32, 42, 99, 119, 44, 32, 114, 111, 119, 95, 99, 111, 117, 110, 116, 32, 42, 32, 99, 104, 41, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 105, 110, 105, 116, 95, 102, 111, 110, 116, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 102, 111, 110, 116, 41, 32, 123, 10, 32, 32, 32, 32, 105, 102, 40, 116, 121, 112, 101, 111, 102, 32, 102, 111, 110, 116, 32, 33, 61, 61, 32, 39, 115, 116, 114, 105, 110, 103, 39, 41, 10, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 102, 111, 110, 116, 41, 59, 10, 32, 32, 32, 32, 105, 102, 40, 33, 102, 111, 110, 116, 41, 10, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 32, 61, 32, 39, 49, 50, 112, 120, 32, 109, 111, 110, 111, 115, 112, 97, 99, 101, 39, 59, 10, 10, 32, 32, 32, 32, 118, 97, 114, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 59, 10, 32, 32, 32, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 46, 115, 116, 121, 108, 101, 46, 102, 111, 110, 116, 32, 61, 32, 102, 111, 110, 116, 59, 10, 32, 32, 32, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 46, 105, 110, 110, 101, 114, 72, 84, 77, 76, 32, 61, 32, 39, 109, 39, 59, 10, 10, 32, 32, 32, 32, 47, 42, 32, 99, 108, 105, 101, 110, 116, 87, 105, 100, 116, 104, 47, 72, 101, 105, 103, 104, 116, 32, 119, 111, 110, 39, 116, 32, 119, 111, 114, 107, 32, 42, 47, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 104, 101, 105, 103, 104, 116, 32, 61, 32, 77, 97, 116, 104, 46, 109, 97, 120, 40, 49, 44, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 46, 99, 108, 105, 101, 110, 116, 72, 101, 105, 103, 104, 116, 32, 42, 32, 118, 105, 109, 106, 115, 46, 100, 101, 118, 105, 99, 101, 80, 105, 120, 101, 108, 82, 97, 116, 105, 111, 41, 59, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 119, 105, 100, 116, 104, 32, 61, 32, 77, 97, 116, 104, 46, 109, 97, 120, 40, 49, 44, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 46, 99, 108, 105, 101, 110, 116, 87, 105, 100, 116, 104, 32, 42, 32, 118, 105, 109, 106, 115, 46, 100, 101, 118, 105, 99, 101, 80, 105, 120, 101, 108, 82, 97, 116, 105, 111, 41, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 115, 101, 116, 95, 102, 111, 110, 116, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 102, 111, 110, 116, 41, 32, 123, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 102, 111, 110, 116, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 102, 111, 110, 116, 41, 59, 10, 32, 32, 32, 32, 116, 114, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 108, 32, 61, 32, 118, 105, 109, 106, 115, 46, 102, 111, 110, 116, 46, 115, 112, 108, 105, 116, 40, 47, 40, 91, 92, 100, 93, 43, 41, 40, 63, 61, 105, 110, 124, 91, 99, 101, 109, 93, 109, 124, 101, 120, 124, 112, 91, 99, 116, 120, 93, 41, 47, 41, 59, 10, 32, 32, 32, 32, 32, 32, 108, 91, 49, 93, 32, 61, 32, 112, 97, 114, 115, 101, 70, 108, 111, 97, 116, 40, 108, 91, 49, 93, 41, 32, 42, 32, 118, 105, 109, 106, 115, 46, 100, 101, 118, 105, 99, 101, 80, 105, 120, 101, 108, 82, 97, 116, 105, 111, 59, 10, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 102, 111, 110, 116, 32, 61, 32, 108, 46, 106, 111, 105, 110, 40, 39, 39, 41, 59, 10, 32, 32, 32, 32, 125, 32, 99, 97, 116, 99, 104, 32, 40, 101, 41, 32, 123, 32, 125, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 99, 104, 101, 99, 107, 95, 102, 111, 110, 116, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 102, 111, 110, 116, 41, 32, 123, 10, 32, 32, 32, 32, 47, 47, 32, 99, 104, 101, 99, 107, 32, 105, 102, 32, 102, 111, 110, 116, 32, 101, 120, 105, 115, 116, 115, 10, 32, 32, 32, 32, 102, 111, 110, 116, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 102, 111, 110, 116, 41, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 32, 61, 32, 118, 105, 109, 106, 115, 46, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 59, 10, 32, 32, 32, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 46, 105, 110, 110, 101, 114, 72, 84, 77, 76, 32, 61, 32, 39, 116, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32, 106, 117, 109, 112, 115, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121, 32, 100, 111, 103, 39, 59, 10, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 91, 39, 115, 101, 114, 105, 102, 39, 44, 32, 39, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 39, 44, 32, 39, 109, 111, 110, 111, 115, 112, 97, 99, 101, 39, 93, 46, 115, 111, 109, 101, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 98, 97, 115, 101, 95, 102, 111, 110, 116, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 46, 115, 116, 121, 108, 101, 46, 102, 111, 110, 116, 32, 61, 32, 102, 111, 110, 116, 32, 43, 32, 39, 44, 39, 32, 43, 32, 98, 97, 115, 101, 95, 102, 111, 110, 116, 59, 10, 32, 32, 32, 32, 32, 32, 47, 47, 32, 111, 118, 101, 114, 114, 105, 100, 101, 32, 101, 120, 105, 115, 116, 105, 110, 103, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 111, 102, 32, 102, 111, 110, 116, 32, 115, 105, 122, 101, 10, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 46, 115, 116, 121, 108, 101, 46, 102, 111, 110, 116, 83, 105, 122, 101, 32, 61, 32, 39, 54, 52, 112, 120, 39, 59, 10, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 119, 32, 61, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 46, 99, 108, 105, 101, 110, 116, 87, 105, 100, 116, 104, 59, 10, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 104, 32, 61, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 46, 99, 108, 105, 101, 110, 116, 72, 101, 105, 103, 104, 116, 59, 10, 32, 32, 10, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 46, 115, 116, 121, 108, 101, 46, 102, 111, 110, 116, 32, 61, 32, 39, 54, 52, 112, 120, 32, 39, 32, 43, 32, 98, 97, 115, 101, 95, 102, 111, 110, 116, 59, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 46, 99, 108, 105, 101, 110, 116, 87, 105, 100, 116, 104, 32, 33, 61, 32, 119, 41, 32, 124, 124, 32, 40, 102, 111, 110, 116, 95, 116, 101, 115, 116, 95, 110, 111, 100, 101, 46, 99, 108, 105, 101, 110, 116, 72, 101, 105, 103, 104, 116, 32, 33, 61, 32, 104, 41, 59, 10, 32, 32, 32, 32, 125, 41, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 103, 101, 116, 95, 99, 104, 97, 114, 95, 119, 105, 100, 116, 104, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 119, 105, 100, 116, 104, 59, 10, 32, 32, 125, 44, 10, 32, 32, 118, 105, 109, 106, 115, 95, 103, 101, 116, 95, 99, 104, 97, 114, 95, 104, 101, 105, 103, 104, 116, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 105, 109, 106, 115, 46, 99, 104, 97, 114, 95, 104, 101, 105, 103, 104, 116, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 105, 115, 95, 118, 97, 108, 105, 100, 95, 99, 111, 108, 111, 114, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 99, 111, 108, 111, 114, 112, 41, 32, 123, 10, 32, 32, 32, 32, 118, 97, 114, 32, 99, 111, 108, 111, 114, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 99, 111, 108, 111, 114, 112, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 47, 40, 94, 35, 91, 48, 45, 57, 65, 45, 70, 93, 123, 54, 125, 36, 41, 124, 40, 94, 35, 91, 48, 45, 57, 65, 45, 70, 93, 123, 51, 125, 36, 41, 47, 105, 46, 116, 101, 115, 116, 40, 99, 111, 108, 111, 114, 41, 10, 32, 32, 32, 32, 32, 32, 124, 124, 32, 40, 99, 111, 108, 111, 114, 46, 116, 111, 76, 111, 119, 101, 114, 67, 97, 115, 101, 40, 41, 32, 105, 110, 32, 118, 105, 109, 106, 115, 46, 99, 111, 108, 111, 114, 95, 109, 97, 112, 41, 59, 10, 32, 32, 125, 44, 10, 32, 32, 118, 105, 109, 106, 115, 95, 103, 101, 116, 95, 114, 103, 98, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 115, 116, 114, 105, 110, 103, 41, 32, 123, 10, 32, 32, 32, 32, 115, 116, 114, 105, 110, 103, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 115, 116, 114, 105, 110, 103, 41, 59, 10, 32, 32, 32, 32, 115, 116, 114, 105, 110, 103, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 116, 111, 76, 111, 119, 101, 114, 67, 97, 115, 101, 40, 41, 59, 10, 32, 32, 32, 32, 47, 47, 32, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 104, 97, 114, 116, 104, 117, 114, 47, 99, 111, 108, 111, 114, 45, 115, 116, 114, 105, 110, 103, 10, 32, 32, 32, 32, 47, 47, 32, 77, 73, 84, 32, 76, 105, 99, 101, 110, 115, 101, 10, 32, 32, 32, 32, 118, 97, 114, 32, 97, 98, 98, 114, 32, 61, 32, 47, 94, 35, 40, 91, 97, 45, 102, 65, 45, 70, 48, 45, 57, 93, 123, 51, 125, 41, 36, 47, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 104, 101, 120, 32, 61, 32, 47, 94, 35, 40, 91, 97, 45, 102, 65, 45, 70, 48, 45, 57, 93, 123, 54, 125, 41, 36, 47, 59, 10, 10, 32, 32, 32, 32, 118, 97, 114, 32, 114, 103, 98, 32, 61, 32, 91, 48, 44, 32, 48, 44, 32, 48, 93, 59, 10, 32, 32, 32, 32, 118, 97, 114, 32, 109, 97, 116, 99, 104, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 109, 97, 116, 99, 104, 40, 97, 98, 98, 114, 41, 59, 10, 32, 32, 32, 32, 105, 102, 32, 40, 109, 97, 116, 99, 104, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 109, 97, 116, 99, 104, 32, 61, 32, 109, 97, 116, 99, 104, 91, 49, 93, 59, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 118, 97, 114, 32, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 114, 103, 98, 46, 108, 101, 110, 103, 116, 104, 59, 32, 105, 43, 43, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 103, 98, 91, 105, 93, 32, 61, 32, 112, 97, 114, 115, 101, 73, 110, 116, 40, 109, 97, 116, 99, 104, 91, 105, 93, 32, 43, 32, 109, 97, 116, 99, 104, 91, 105, 93, 44, 32, 49, 54, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 109, 97, 116, 99, 104, 32, 61, 32, 115, 116, 114, 105, 110, 103, 46, 109, 97, 116, 99, 104, 40, 104, 101, 120, 41, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 109, 97, 116, 99, 104, 32, 61, 32, 109, 97, 116, 99, 104, 91, 49, 93, 59, 10, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 40, 118, 97, 114, 32, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 114, 103, 98, 46, 108, 101, 110, 103, 116, 104, 59, 32, 105, 43, 43, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 103, 98, 91, 105, 93, 32, 61, 32, 112, 97, 114, 115, 101, 73, 110, 116, 40, 109, 97, 116, 99, 104, 46, 115, 108, 105, 99, 101, 40, 105, 32, 42, 32, 50, 44, 32, 105, 32, 42, 32, 50, 32, 43, 32, 50, 41, 44, 32, 49, 54, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 98, 117, 105, 108, 116, 105, 110, 95]);
        fileData1.push.apply(fileData1, [114, 103, 98, 32, 61, 32, 118, 105, 109, 106, 115, 46, 99, 111, 108, 111, 114, 95, 109, 97, 112, 91, 115, 116, 114, 105, 110, 103, 93, 59, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 98, 117, 105, 108, 116, 105, 110, 95, 114, 103, 98, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 103, 98, 32, 61, 32, 98, 117, 105, 108, 116, 105, 110, 95, 114, 103, 98, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 118, 97, 114, 32, 114, 101, 116, 32, 61, 32, 48, 59, 10, 32, 32, 32, 32, 102, 111, 114, 32, 40, 118, 97, 114, 32, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32, 114, 103, 98, 46, 108, 101, 110, 103, 116, 104, 59, 32, 105, 43, 43, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 61, 32, 40, 114, 101, 116, 32, 60, 60, 32, 56, 41, 32, 43, 32, 114, 103, 98, 91, 105, 93, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 116, 59, 10, 32, 32, 125, 44, 10, 32, 32, 118, 105, 109, 106, 115, 95, 115, 101, 116, 95, 102, 103, 95, 99, 111, 108, 111, 114, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 99, 111, 108, 111, 114, 41, 32, 123, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 102, 103, 95, 99, 111, 108, 111, 114, 32, 61, 32, 118, 105, 109, 106, 115, 46, 103, 101, 116, 95, 99, 111, 108, 111, 114, 95, 115, 116, 114, 105, 110, 103, 40, 99, 111, 108, 111, 114, 41, 59, 10, 32, 32, 125, 44, 10, 32, 32, 118, 105, 109, 106, 115, 95, 115, 101, 116, 95, 98, 103, 95, 99, 111, 108, 111, 114, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 99, 111, 108, 111, 114, 41, 32, 123, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 98, 103, 95, 99, 111, 108, 111, 114, 32, 61, 32, 118, 105, 109, 106, 115, 46, 103, 101, 116, 95, 99, 111, 108, 111, 114, 95, 115, 116, 114, 105, 110, 103, 40, 99, 111, 108, 111, 114, 41, 59, 10, 32, 32, 125, 44, 10, 32, 32, 118, 105, 109, 106, 115, 95, 115, 101, 116, 95, 115, 112, 95, 99, 111, 108, 111, 114, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 99, 111, 108, 111, 114, 41, 32, 123, 10, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 115, 112, 95, 99, 111, 108, 111, 114, 32, 61, 32, 118, 105, 109, 106, 115, 46, 103, 101, 116, 95, 99, 111, 108, 111, 114, 95, 115, 116, 114, 105, 110, 103, 40, 99, 111, 108, 111, 114, 41, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 112, 114, 105, 110, 116, 95, 115, 116, 97, 99, 107, 116, 114, 97, 99, 101, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 99, 111, 110, 115, 111, 108, 101, 46, 108, 111, 103, 40, 40, 110, 101, 119, 32, 69, 114, 114, 111, 114, 41, 46, 115, 116, 97, 99, 107, 41, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 99, 97, 108, 108, 95, 115, 104, 101, 108, 108, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 99, 109, 100, 44, 32, 111, 112, 116, 105, 111, 110, 115, 41, 32, 123, 10, 32, 32, 32, 32, 99, 109, 100, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 99, 109, 100, 41, 59, 10, 32, 32, 32, 32, 116, 114, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 116, 114, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 104, 101, 32, 99, 109, 100, 32, 109, 97, 121, 32, 98, 101, 32, 97, 32, 74, 97, 118, 97, 83, 99, 114, 105, 112, 116, 32, 115, 110, 105, 112, 112, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 118, 97, 108, 40, 99, 109, 100, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 32, 99, 97, 116, 99, 104, 32, 40, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 40, 101, 32, 105, 110, 115, 116, 97, 110, 99, 101, 111, 102, 32, 83, 121, 110, 116, 97, 120, 69, 114, 114, 111, 114, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 116, 114, 121, 32, 116, 111, 32, 101, 120, 101, 99, 117, 116, 101, 32, 97, 32, 102, 105, 108, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 114, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 99, 111, 110, 116, 101, 110, 116, 32, 61, 32, 70, 83, 46, 114, 101, 97, 100, 70, 105, 108, 101, 40, 99, 109, 100, 46, 114, 101, 112, 108, 97, 99, 101, 40, 47, 40, 94, 92, 115, 43, 124, 92, 115, 43, 36, 41, 47, 103, 44, 32, 39, 39, 41, 44, 32, 123, 32, 101, 110, 99, 111, 100, 105, 110, 103, 58, 32, 39, 117, 116, 102, 56, 39, 125, 32, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 99, 97, 116, 99, 104, 40, 101, 49, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 99, 97, 110, 110, 111, 116, 32, 102, 105, 110, 100, 32, 102, 105, 108, 101, 44, 32, 116, 104, 114, 111, 119, 32, 116, 104, 101, 32, 111, 108, 100, 32, 69, 114, 114, 111, 114, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 104, 114, 111, 119, 32, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 118, 97, 108, 40, 99, 111, 110, 116, 101, 110, 116, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 110, 111, 116, 32, 97, 32, 83, 121, 110, 116, 97, 120, 69, 114, 114, 111, 114, 44, 32, 112, 114, 111, 99, 101, 115, 115, 32, 105, 116, 32, 111, 117, 116, 115, 105, 100, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 104, 114, 111, 119, 32, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 32, 99, 97, 116, 99, 104, 32, 40, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 101, 32, 105, 110, 115, 116, 97, 110, 99, 101, 111, 102, 32, 69, 114, 114, 111, 114, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 115, 111, 108, 101, 46, 108, 111, 103, 40, 101, 46, 110, 97, 109, 101, 32, 43, 32, 39, 58, 32, 39, 32, 43, 32, 101, 46, 109, 101, 115, 115, 97, 103, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 115, 111, 108, 101, 46, 108, 111, 103, 40, 39, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 116, 104, 114, 111, 119, 110, 58, 32, 39, 44, 32, 101, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 32, 32, 125, 44, 32, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 98, 114, 111, 119, 115, 101, 95, 95, 100, 101, 112, 58, 32, 91, 39, 36, 118, 105, 109, 106, 115, 39, 44, 32, 39, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 95, 97, 115, 121, 110, 99, 95, 114, 101, 115, 117, 109, 101, 39, 93, 44, 10, 32, 32, 118, 105, 109, 106, 115, 95, 98, 114, 111, 119, 115, 101, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 98, 117, 102, 44, 32, 98, 117, 102, 95, 115, 105, 122, 101, 44, 32, 115, 97, 118, 105, 110, 103, 44, 32, 100, 101, 102, 97, 117, 108, 116, 95, 110, 97, 109, 101, 44, 32, 105, 110, 105, 116, 95, 100, 105, 114, 41, 32, 123, 10, 32, 32, 32, 32, 97, 115, 109, 91, 39, 115, 101, 116, 65, 115, 121, 110, 99, 39, 93, 40, 41, 59, 10, 32, 32, 32, 32, 100, 101, 102, 97, 117, 108, 116, 95, 110, 97, 109, 101, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 100, 101, 102, 97, 117, 108, 116, 95, 110, 97, 109, 101, 41, 59, 10, 32, 32, 32, 32, 105, 102, 40, 100, 101, 102, 97, 117, 108, 116, 95, 110, 97, 109, 101, 32, 61, 61, 61, 32, 39, 108, 111, 99, 97, 108, 39, 32, 38, 38, 32, 119, 105, 110, 100, 111, 119, 46, 70, 105, 108, 101, 82, 101, 97, 100, 101, 114, 41, 32, 123, 32, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 115, 97, 118, 105, 110, 103, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 84, 79, 68, 79, 58, 32, 115, 97, 118, 101, 32, 116, 111, 32, 108, 111, 99, 97, 108, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 116, 84, 105, 109, 101, 111, 117, 116, 40, 95, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 95, 97, 115, 121, 110, 99, 95, 114, 101, 115, 117, 109, 101, 44, 32, 49, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 108, 111, 97, 100, 95, 108, 111, 99, 97, 108, 95, 102, 105, 108, 101, 40, 95, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 95, 97, 115, 121, 110, 99, 95, 114, 101, 115, 117, 109, 101, 44, 32, 98, 117, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 105, 102, 32, 40, 100, 101, 102, 97, 117, 108, 116, 95, 110, 97, 109, 101, 32, 61, 61, 61, 32, 39, 100, 114, 111, 112, 98, 111, 120, 39, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 105, 102, 40, 115, 97, 118, 105, 110, 103, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 101, 110, 115, 117, 114, 101, 95, 100, 114, 111, 112, 98, 111, 120, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 115, 97, 118, 101, 95, 100, 114, 111, 112, 98, 111, 120, 95, 102, 105, 108, 101, 40, 95, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 95, 97, 115, 121, 110, 99, 95, 114, 101, 115, 117, 109, 101, 44, 32, 98, 117, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 101, 110, 115, 117, 114, 101, 95, 100, 114, 111, 112, 98, 111, 120, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 108, 111, 97, 100, 95, 100, 114, 111, 112, 98, 111, 120, 95, 102, 105, 108, 101, 40, 95, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 95, 97, 115, 121, 110, 99, 95, 114, 101, 115, 117, 109, 101, 44, 32, 98, 117, 102, 41, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 41, 59, 10, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 32, 101, 108, 115, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 118, 105, 109, 106, 115, 46, 108, 111, 97, 100, 95, 110, 111, 116, 104, 105, 110, 103, 40, 95, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 95, 97, 115, 121, 110, 99, 95, 114, 101, 115, 117, 109, 101, 44, 32, 98, 117, 102, 41, 59, 10, 32, 32, 32, 32, 125, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 104, 97, 115, 107, 101, 121, 58, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 110, 97, 109, 101, 41, 32, 123, 10, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 95, 115, 116, 114, 105, 110, 103, 105, 102, 121, 40, 110, 97, 109, 101, 44, 32, 50, 41, 59, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 40, 110, 97, 109, 101, 32, 105, 110, 32, 118, 105, 109, 106, 115, 46, 115, 112, 101, 99, 105, 97, 108, 95, 107, 101, 121, 115, 95, 110, 97, 109, 101, 109, 97, 112, 41, 59, 10, 32, 32, 125, 44, 10, 10, 32, 32, 118, 105, 109, 106, 115, 95, 100, 117, 109, 109, 121, 95, 95, 58, 32, 110, 117, 108, 108, 32, 10, 125, 59, 10, 97, 117, 116, 111, 65, 100, 100, 68, 101, 112, 115, 40, 76, 105, 98, 114, 97, 114, 121, 86, 73, 77, 44, 32, 39, 36, 118, 105, 109, 106, 115, 39, 41, 59, 10, 109, 101, 114, 103, 101, 73, 110, 116, 111, 40, 76, 105, 98, 114, 97, 114, 121, 77, 97, 110, 97, 103, 101, 114, 46, 108, 105, 98, 114, 97, 114, 121, 44, 32, 76, 105, 98, 114, 97, 114, 121, 86, 73, 77, 41, 59, 10]);
        VimModule["FS_createDataFile"]("/usr/local/share/vim", "example.js", fileData1, true, true);
        fileData2 = [];
        fileData2.push.apply(fileData2, [34, 32, 86, 105, 109, 32, 115, 121, 110, 116, 97, 120, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 105, 108, 101, 10, 34, 32, 77, 97, 105, 110, 116, 97, 105, 110, 101, 114, 58, 9, 66, 114, 97, 109, 32, 77, 111, 111, 108, 101, 110, 97, 97, 114, 32, 60, 66, 114, 97, 109, 64, 118, 105, 109, 46, 111, 114, 103, 62, 10, 34, 32, 76, 97, 115, 116, 32, 67, 104, 97, 110, 103, 101, 58, 9, 50, 48, 49, 50, 32, 83, 101, 112, 32, 50, 53, 10, 10, 34, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 115, 101, 116, 115, 32, 117, 112, 32, 102, 111, 114, 32, 115, 121, 110, 116, 97, 120, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 46, 10, 34, 32, 73, 116, 32, 105, 115, 32, 108, 111, 97, 100, 101, 100, 32, 102, 114, 111, 109, 32, 34, 115, 121, 110, 116, 97, 120, 46, 118, 105, 109, 34, 32, 97, 110, 100, 32, 34, 109, 97, 110, 117, 97, 108, 46, 118, 105, 109, 34, 46, 10, 34, 32, 49, 46, 32, 83, 101, 116, 32, 116, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 32, 103, 114, 111, 117, 112, 115, 46, 10, 34, 32, 50, 46, 32, 73, 110, 115, 116, 97, 108, 108, 32, 83, 121, 110, 116, 97, 120, 32, 97, 117, 116, 111, 99, 111, 109, 109, 97, 110, 100, 115, 32, 102, 111, 114, 32, 97, 108, 108, 32, 116, 104, 101, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 115, 121, 110, 116, 97, 120, 32, 102, 105, 108, 101, 115, 46, 10, 10, 105, 102, 32, 33, 104, 97, 115, 40, 34, 115, 121, 110, 116, 97, 120, 34, 41, 10, 32, 32, 102, 105, 110, 105, 115, 104, 10, 101, 110, 100, 105, 102, 10, 10, 34, 32, 108, 101, 116, 32, 111, 116, 104, 101, 114, 115, 32, 107, 110, 111, 119, 32, 116, 104, 97, 116, 32, 115, 121, 110, 116, 97, 120, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 115, 119, 105, 116, 99, 104, 101, 100, 32, 111, 110, 10, 108, 101, 116, 32, 115, 121, 110, 116, 97, 120, 95, 111, 110, 32, 61, 32, 49, 10, 10, 34, 32, 83, 101, 116, 32, 116, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 32, 99, 111, 108, 111, 114, 115, 46, 32, 32, 85, 115, 101, 32, 97, 32, 99, 111, 108, 111, 114, 32, 115, 99, 104, 101, 109, 101, 32, 105, 102, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 46, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 99, 111, 108, 111, 114, 115, 95, 110, 97, 109, 101, 34, 41, 10, 32, 32, 101, 120, 101, 32, 34, 99, 111, 108, 111, 114, 115, 32, 34, 32, 46, 32, 99, 111, 108, 111, 114, 115, 95, 110, 97, 109, 101, 10, 101, 108, 115, 101, 10, 32, 32, 114, 117, 110, 116, 105, 109, 101, 33, 32, 115, 121, 110, 116, 97, 120, 47, 115, 121, 110, 99, 111, 108, 111, 114, 46, 118, 105, 109, 10, 101, 110, 100, 105, 102, 10, 10, 34, 32, 76, 105, 110, 101, 32, 99, 111, 110, 116, 105, 110, 117, 97, 116, 105, 111, 110, 32, 105, 115, 32, 117, 115, 101, 100, 32, 104, 101, 114, 101, 44, 32, 114, 101, 109, 111, 118, 101, 32, 39, 67, 39, 32, 102, 114, 111, 109, 32, 39, 99, 112, 111, 112, 116, 105, 111, 110, 115, 39, 10, 108, 101, 116, 32, 115, 58, 99, 112, 111, 95, 115, 97, 118, 101, 32, 61, 32, 38, 99, 112, 111, 10, 115, 101, 116, 32, 99, 112, 111, 38, 118, 105, 109, 10, 10, 34, 32, 70, 105, 114, 115, 116, 32, 114, 101, 109, 111, 118, 101, 32, 97, 108, 108, 32, 111, 108, 100, 32, 115, 121, 110, 116, 97, 120, 32, 97, 117, 116, 111, 99, 111, 109, 109, 97, 110, 100, 115, 46, 10, 97, 117, 33, 32, 83, 121, 110, 116, 97, 120, 10, 10, 97, 117, 32, 83, 121, 110, 116, 97, 120, 32, 42, 9, 9, 99, 97, 108, 108, 32, 115, 58, 83, 121, 110, 83, 101, 116, 40, 41, 10, 10, 102, 117, 110, 33, 32, 115, 58, 83, 121, 110, 83, 101, 116, 40, 41, 10, 32, 32, 34, 32, 99, 108, 101, 97, 114, 32, 115, 121, 110, 116, 97, 120, 32, 102, 111, 114, 32, 58, 115, 101, 116, 32, 115, 121, 110, 116, 97, 120, 61, 79, 70, 70, 32, 32, 97, 110, 100, 32, 97, 110, 121, 32, 115, 121, 110, 116, 97, 120, 32, 110, 97, 109, 101, 32, 116, 104, 97, 116, 32, 100, 111, 101, 115, 110, 39, 116, 32, 101, 120, 105, 115, 116, 10, 32, 32, 115, 121, 110, 32, 99, 108, 101, 97, 114, 10, 32, 32, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 34, 41, 10, 32, 32, 32, 32, 117, 110, 108, 101, 116, 32, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 10, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 108, 101, 116, 32, 115, 32, 61, 32, 101, 120, 112, 97, 110, 100, 40, 34, 60, 97, 109, 97, 116, 99, 104, 62, 34, 41, 10, 32, 32, 105, 102, 32, 115, 32, 61, 61, 32, 34, 79, 78, 34, 10, 32, 32, 32, 32, 34, 32, 58, 115, 101, 116, 32, 115, 121, 110, 116, 97, 120, 61, 79, 78, 10, 32, 32, 32, 32, 105, 102, 32, 38, 102, 105, 108, 101, 116, 121, 112, 101, 32, 61, 61, 32, 34, 34, 10, 32, 32, 32, 32, 32, 32, 101, 99, 104, 111, 104, 108, 32, 69, 114, 114, 111, 114, 77, 115, 103, 10, 32, 32, 32, 32, 32, 32, 101, 99, 104, 111, 32, 34, 102, 105, 108, 101, 116, 121, 112, 101, 32, 117, 110, 107, 110, 111, 119, 110, 34, 10, 32, 32, 32, 32, 32, 32, 101, 99, 104, 111, 104, 108, 32, 78, 111, 110, 101, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 108, 101, 116, 32, 115, 32, 61, 32, 38, 102, 105, 108, 101, 116, 121, 112, 101, 10, 32, 32, 101, 108, 115, 101, 105, 102, 32, 115, 32, 61, 61, 32, 34, 79, 70, 70, 34, 10, 32, 32, 32, 32, 108, 101, 116, 32, 115, 32, 61, 32, 34, 34, 10, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 105, 102, 32, 115, 32, 33, 61, 32, 34, 34, 10, 32, 32, 32, 32, 34, 32, 76, 111, 97, 100, 32, 116, 104, 101, 32, 115, 121, 110, 116, 97, 120, 32, 102, 105, 108, 101, 40, 115, 41, 46, 32, 32, 87, 104, 101, 110, 32, 116, 104, 101, 114, 101, 32, 97, 114, 101, 32, 115, 101, 118, 101, 114, 97, 108, 44, 32, 115, 101, 112, 97, 114, 97, 116, 101, 100, 32, 98, 121, 32, 100, 111, 116, 115, 44, 10, 32, 32, 32, 32, 34, 32, 108, 111, 97, 100, 32, 101, 97, 99, 104, 32, 105, 110, 32, 115, 101, 113, 117, 101, 110, 99, 101, 46, 10, 32, 32, 32, 32, 102, 111, 114, 32, 110, 97, 109, 101, 32, 105, 110, 32, 115, 112, 108, 105, 116, 40, 115, 44, 32, 39, 92, 46, 39, 41, 10, 32, 32, 32, 32, 32, 32, 101, 120, 101, 32, 34, 114, 117, 110, 116, 105, 109, 101, 33, 32, 115, 121, 110, 116, 97, 120, 47, 34, 32, 46, 32, 110, 97, 109, 101, 32, 46, 32, 34, 46, 118, 105, 109, 32, 115, 121, 110, 116, 97, 120, 47, 34, 32, 46, 32, 110, 97, 109, 101, 32, 46, 32, 34, 47, 42, 46, 118, 105, 109, 34, 10, 32, 32, 32, 32, 101, 110, 100, 102, 111, 114, 10, 32, 32, 101, 110, 100, 105, 102, 10, 101, 110, 100, 102, 117, 110, 10, 10, 10, 34, 32, 72, 97, 110, 100, 108, 101, 32, 97, 100, 100, 105, 110, 103, 32, 100, 111, 120, 121, 103, 101, 110, 32, 116, 111, 32, 111, 116, 104, 101, 114, 32, 108, 97, 110, 103, 117, 97, 103, 101, 115, 32, 40, 67, 44, 32, 67, 43, 43, 44, 32, 67, 35, 44, 32, 73, 68, 76, 41, 10, 97, 117, 32, 83, 121, 110, 116, 97, 120, 32, 99, 44, 99, 112, 112, 44, 99, 115, 44, 105, 100, 108, 44, 112, 104, 112, 10, 9, 92, 32, 105, 102, 32, 40, 101, 120, 105, 115, 116, 115, 40, 39, 98, 58, 108, 111, 97, 100, 95, 100, 111, 120, 121, 103, 101, 110, 95, 115, 121, 110, 116, 97, 120, 39, 41, 32, 38, 38, 32, 98, 58, 108, 111, 97, 100, 95, 100, 111, 120, 121, 103, 101, 110, 95, 115, 121, 110, 116, 97, 120, 41, 10, 9, 92, 9, 124, 124, 32, 40, 101, 120, 105, 115, 116, 115, 40, 39, 103, 58, 108, 111, 97, 100, 95, 100, 111, 120, 121, 103, 101, 110, 95, 115, 121, 110, 116, 97, 120, 39, 41, 32, 38, 38, 32, 103, 58, 108, 111, 97, 100, 95, 100, 111, 120, 121, 103, 101, 110, 95, 115, 121, 110, 116, 97, 120, 41, 10, 9, 92, 32, 32, 32, 124, 32, 114, 117, 110, 116, 105, 109, 101, 33, 32, 115, 121, 110, 116, 97, 120, 47, 100, 111, 120, 121, 103, 101, 110, 46, 118, 105, 109, 10, 9, 92, 32, 124, 32, 101, 110, 100, 105, 102, 10, 10, 10, 34, 32, 83, 111, 117, 114, 99, 101, 32, 116, 104, 101, 32, 117, 115, 101, 114, 45, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 115, 121, 110, 116, 97, 120, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 32, 102, 105, 108, 101, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 109, 121, 115, 121, 110, 116, 97, 120, 102, 105, 108, 101, 34, 41, 32, 38, 38, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 101, 120, 112, 97, 110, 100, 40, 109, 121, 115, 121, 110, 116, 97, 120, 102, 105, 108, 101, 41, 41, 10, 32, 32, 101, 120, 101, 99, 117, 116, 101, 32, 34, 115, 111, 117, 114, 99, 101, 32, 34, 32, 46, 32, 109, 121, 115, 121, 110, 116, 97, 120, 102, 105, 108, 101, 10, 101, 110, 100, 105, 102, 10, 10, 34, 32, 82, 101, 115, 116, 111, 114, 101, 32, 39, 99, 112, 111, 112, 116, 105, 111, 110, 115, 39, 10, 108, 101, 116, 32, 38, 99, 112, 111, 32, 61, 32, 115, 58, 99, 112, 111, 95, 115, 97, 118, 101, 10, 117, 110, 108, 101, 116, 32, 115, 58, 99, 112, 111, 95, 115, 97, 118, 101, 10]);
        VimModule["FS_createDataFile"]("/usr/local/share/vim/syntax", "synload.vim", fileData2, true, true);
        fileData3 = [];
        fileData3.push.apply(fileData3, [34, 32, 86, 105, 109, 32, 115, 121, 110, 116, 97, 120, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 105, 108, 101, 10, 34, 32, 77, 97, 105, 110, 116, 97, 105, 110, 101, 114, 58, 9, 66, 114, 97, 109, 32, 77, 111, 111, 108, 101, 110, 97, 97, 114, 32, 60, 66, 114, 97, 109, 64, 118, 105, 109, 46, 111, 114, 103, 62, 10, 34, 32, 76, 97, 115, 116, 32, 67, 104, 97, 110, 103, 101, 58, 9, 50, 48, 48, 49, 32, 83, 101, 112, 32, 48, 52, 10, 10, 34, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 34, 58, 115, 121, 110, 116, 97, 120, 32, 111, 110, 34, 46, 10, 34, 32, 73, 116, 32, 105, 110, 115, 116, 97, 108, 108, 115, 32, 116, 104, 101, 32, 97, 117, 116, 111, 99, 111, 109, 109, 97, 110, 100, 115, 32, 97, 110, 100, 32, 115, 116, 97, 114, 116, 115, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 32, 102, 111, 114, 32, 97, 108, 108, 32, 98, 117, 102, 102, 101, 114, 115, 46, 10, 10, 105, 102, 32, 33, 104, 97, 115, 40, 34, 115, 121, 110, 116, 97, 120, 34, 41, 10, 32, 32, 102, 105, 110, 105, 115, 104, 10, 101, 110, 100, 105, 102, 10, 10, 34, 32, 73, 102, 32, 83, 121, 110, 116, 97, 120, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 32, 97, 112, 112, 101, 97, 114, 115, 32, 116, 111, 32, 98, 101, 32, 111, 110, 32, 97, 108, 114, 101, 97, 100, 121, 44, 32, 116, 117, 114, 110, 32, 105, 116, 32, 111, 102, 102, 32, 102, 105, 114, 115, 116, 44, 32, 115, 111, 32, 116, 104, 97, 116, 10, 34, 32, 97, 110, 121, 32, 108, 101, 102, 116, 111, 118, 101, 114, 115, 32, 97, 114, 101, 32, 99, 108, 101, 97, 114, 101, 100, 46, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 115, 121, 110, 116, 97, 120, 95, 111, 110, 34, 41, 32, 124, 124, 32, 101, 120, 105, 115, 116, 115, 40, 34, 115, 121, 110, 116, 97, 120, 95, 109, 97, 110, 117, 97, 108, 34, 41, 10, 32, 32, 115, 111, 32, 60, 115, 102, 105, 108, 101, 62, 58, 112, 58, 104, 47, 110, 111, 115, 121, 110, 116, 97, 120, 46, 118, 105, 109, 10, 101, 110, 100, 105, 102, 10, 10, 34, 32, 76, 111, 97, 100, 32, 116, 104, 101, 32, 83, 121, 110, 116, 97, 120, 32, 97, 117, 116, 111, 99, 111, 109, 109, 97, 110, 100, 115, 32, 97, 110, 100, 32, 115, 101, 116, 32, 116, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 109, 101, 116, 104, 111, 100, 115, 32, 102, 111, 114, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 46, 10, 114, 117, 110, 116, 105, 109, 101, 32, 115, 121, 110, 116, 97, 120, 47, 115, 121, 110, 108, 111, 97, 100, 46, 118, 105, 109, 10, 10, 34, 32, 76, 111, 97, 100, 32, 116, 104, 101, 32, 70, 105, 108, 101, 84, 121, 112, 101, 32, 97, 117, 116, 111, 99, 111, 109, 109, 97, 110, 100, 115, 32, 105, 102, 32, 110, 111, 116, 32, 100, 111, 110, 101, 32, 121, 101, 116, 46, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 100, 105, 100, 95, 108, 111, 97, 100, 95, 102, 105, 108, 101, 116, 121, 112, 101, 115, 34, 41, 10, 32, 32, 108, 101, 116, 32, 115, 58, 100, 105, 100, 95, 102, 116, 32, 61, 32, 49, 10, 101, 108, 115, 101, 10, 32, 32, 102, 105, 108, 101, 116, 121, 112, 101, 32, 111, 110, 10, 32, 32, 108, 101, 116, 32, 115, 58, 100, 105, 100, 95, 102, 116, 32, 61, 32, 48, 10, 101, 110, 100, 105, 102, 10, 10, 34, 32, 83, 101, 116, 32, 117, 112, 32, 116, 104, 101, 32, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 98, 101, 116, 119, 101, 101, 110, 32, 70, 105, 108, 101, 84, 121, 112, 101, 32, 97, 110, 100, 32, 83, 121, 110, 116, 97, 120, 32, 97, 117, 116, 111, 99, 111, 109, 109, 97, 110, 100, 115, 46, 10, 34, 32, 84, 104, 105, 115, 32, 109, 97, 107, 101, 115, 32, 116, 104, 101, 32, 115, 121, 110, 116, 97, 120, 32, 97, 117, 116, 111, 109, 97, 116, 105, 99, 97, 108, 108, 121, 32, 115, 101, 116, 32, 119, 104, 101, 110, 32, 116, 104, 101, 32, 102, 105, 108, 101, 32, 116, 121, 112, 101, 32, 105, 115, 32, 100, 101, 116, 101, 99, 116, 101, 100, 46, 10, 97, 117, 103, 114, 111, 117, 112, 32, 115, 121, 110, 116, 97, 120, 115, 101, 116, 10, 32, 32, 97, 117, 33, 32, 70, 105, 108, 101, 84, 121, 112, 101, 32, 42, 9, 101, 120, 101, 32, 34, 115, 101, 116, 32, 115, 121, 110, 116, 97, 120, 61, 34, 32, 46, 32, 101, 120, 112, 97, 110, 100, 40, 34, 60, 97, 109, 97, 116, 99, 104, 62, 34, 41, 10, 97, 117, 103, 114, 111, 117, 112, 32, 69, 78, 68, 10, 10, 10, 34, 32, 69, 120, 101, 99, 117, 116, 101, 32, 116, 104, 101, 32, 115, 121, 110, 116, 97, 120, 32, 97, 117, 116, 111, 99, 111, 109, 109, 97, 110, 100, 115, 32, 102, 111, 114, 32, 116, 104, 101, 32, 101, 97, 99, 104, 32, 98, 117, 102, 102, 101, 114, 46, 10, 34, 32, 73, 102, 32, 116, 104, 101, 32, 102, 105, 108, 101, 116, 121, 112, 101, 32, 119, 97, 115, 110, 39, 116, 32, 100, 101, 116, 101, 99, 116, 101, 100, 32, 121, 101, 116, 44, 32, 100, 111, 32, 116, 104, 97, 116, 32, 110, 111, 119, 46, 10, 34, 32, 65, 108, 119, 97, 121, 115, 32, 100, 111, 32, 116, 104, 101, 32, 115, 121, 110, 116, 97, 120, 115, 101, 116, 32, 97, 117, 116, 111, 99, 111, 109, 109, 97, 110, 100, 115, 44, 32, 102, 111, 114, 32, 98, 117, 102, 102, 101, 114, 115, 32, 119, 104, 101, 114, 101, 32, 116, 104, 101, 32, 39, 102, 105, 108, 101, 116, 121, 112, 101, 39, 10, 34, 32, 97, 108, 114, 101, 97, 100, 121, 32, 119, 97, 115, 32, 115, 101, 116, 32, 109, 97, 110, 117, 97, 108, 108, 121, 32, 40, 101, 46, 103, 46, 44, 32, 104, 101, 108, 112, 32, 98, 117, 102, 102, 101, 114, 115, 41, 46, 10, 100, 111, 97, 117, 116, 111, 97, 108, 108, 32, 115, 121, 110, 116, 97, 120, 115, 101, 116, 32, 70, 105, 108, 101, 84, 121, 112, 101, 10, 105, 102, 32, 33, 115, 58, 100, 105, 100, 95, 102, 116, 10, 32, 32, 100, 111, 97, 117, 116, 111, 97, 108, 108, 32, 102, 105, 108, 101, 116, 121, 112, 101, 100, 101, 116, 101, 99, 116, 32, 66, 117, 102, 82, 101, 97, 100, 10, 101, 110, 100, 105, 102, 10]);
        VimModule["FS_createDataFile"]("/usr/local/share/vim/syntax", "syntax.vim", fileData3, true, true);
        fileData4 = [];
        fileData4.push.apply(fileData4, [34, 32, 86, 105, 109, 32, 115, 121, 110, 116, 97, 120, 32, 102, 105, 108, 101, 10, 34, 32, 76, 97, 110, 103, 117, 97, 103, 101, 58, 9, 74, 97, 118, 97, 83, 99, 114, 105, 112, 116, 10, 34, 32, 77, 97, 105, 110, 116, 97, 105, 110, 101, 114, 58, 9, 67, 108, 97, 117, 100, 105, 111, 32, 70, 108, 101, 105, 110, 101, 114, 32, 60, 99, 108, 97, 117, 100, 105, 111, 64, 102, 108, 101, 105, 110, 101, 114, 46, 99, 111, 109, 62, 10, 34, 32, 85, 112, 100, 97, 116, 101, 114, 115, 58, 9, 83, 99, 111, 116, 116, 32, 83, 104, 97, 116, 116, 117, 99, 107, 32, 40, 115, 115, 41, 32, 60, 115, 115, 64, 116, 101, 99, 104, 110, 105, 99, 97, 108, 112, 117, 114, 115, 117, 105, 116, 46, 99, 111, 109, 62, 10, 34, 32, 85, 82, 76, 58, 9, 9, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 102, 108, 101, 105, 110, 101, 114, 46, 99, 111, 109, 47, 118, 105, 109, 47, 115, 121, 110, 116, 97, 120, 47, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 46, 118, 105, 109, 10, 34, 32, 67, 104, 97, 110, 103, 101, 115, 58, 9, 40, 115, 115, 41, 32, 97, 100, 100, 101, 100, 32, 107, 101, 121, 119, 111, 114, 100, 115, 44, 32, 114, 101, 115, 101, 114, 118, 101, 100, 32, 119, 111, 114, 100, 115, 44, 32, 97, 110, 100, 32, 111, 116, 104, 101, 114, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 115, 10, 34, 9, 9, 40, 115, 115, 41, 32, 114, 101, 112, 97, 105, 114, 101, 100, 32, 115, 101, 118, 101, 114, 97, 108, 32, 113, 117, 111, 116, 105, 110, 103, 32, 97, 110, 100, 32, 103, 114, 111, 117, 112, 105, 110, 103, 32, 103, 108, 105, 116, 99, 104, 101, 115, 10, 34, 9, 9, 40, 115, 115, 41, 32, 102, 105, 120, 101, 100, 32, 114, 101, 103, 101, 120, 32, 112, 97, 114, 115, 105, 110, 103, 32, 105, 115, 115, 117, 101, 32, 119, 105, 116, 104, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 113, 117, 97, 108, 105, 102, 105, 101, 114, 115, 32, 91, 103, 105, 93, 10, 34, 9, 9, 40, 115, 115, 41, 32, 97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 32, 102, 97, 99, 116, 111, 114, 105, 110, 103, 32, 111, 102, 32, 107, 101, 121, 119, 111, 114, 100, 115, 44, 32, 103, 108, 111, 98, 97, 108, 115, 44, 32, 97, 110, 100, 32, 109, 101, 109, 98, 101, 114, 115, 10, 34, 32, 76, 97, 115, 116, 32, 67, 104, 97, 110, 103, 101, 58, 9, 50, 48, 49, 50, 32, 79, 99, 116, 32, 48, 53, 10, 34, 32, 9, 9, 50, 48, 49, 51, 32, 74, 117, 110, 32, 49, 50, 58, 32, 97, 100, 106, 117, 115, 116, 101, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 82, 101, 103, 101, 120, 112, 83, 116, 114, 105, 110, 103, 32, 40, 75, 101, 118, 105, 110, 32, 76, 111, 99, 107, 101, 41, 10, 10, 34, 32, 70, 111, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 53, 46, 120, 58, 32, 67, 108, 101, 97, 114, 32, 97, 108, 108, 32, 115, 121, 110, 116, 97, 120, 32, 105, 116, 101, 109, 115, 10, 34, 32, 70, 111, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 54, 46, 120, 58, 32, 81, 117, 105, 116, 32, 119, 104, 101, 110, 32, 97, 32, 115, 121, 110, 116, 97, 120, 32, 102, 105, 108, 101, 32, 119, 97, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 108, 111, 97, 100, 101, 100, 10, 34, 32, 116, 117, 110, 105, 110, 103, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 58, 10, 34, 32, 117, 110, 108, 101, 116, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 95, 102, 111, 108, 100, 10, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 109, 97, 105, 110, 95, 115, 121, 110, 116, 97, 120, 34, 41, 10, 32, 32, 105, 102, 32, 118, 101, 114, 115, 105, 111, 110, 32, 60, 32, 54, 48, 48, 10, 32, 32, 32, 32, 115, 121, 110, 116, 97, 120, 32, 99, 108, 101, 97, 114, 10, 32, 32, 101, 108, 115, 101, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 34, 41, 10, 32, 32, 32, 32, 102, 105, 110, 105, 115, 104, 10, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 108, 101, 116, 32, 109, 97, 105, 110, 95, 115, 121, 110, 116, 97, 120, 32, 61, 32, 39, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 39, 10, 101, 108, 115, 101, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 34, 41, 32, 38, 38, 32, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 32, 61, 61, 32, 34, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 34, 10, 32, 32, 102, 105, 110, 105, 115, 104, 10, 101, 110, 100, 105, 102, 10, 10, 108, 101, 116, 32, 115, 58, 99, 112, 111, 95, 115, 97, 118, 101, 32, 61, 32, 38, 99, 112, 111, 10, 115, 101, 116, 32, 99, 112, 111, 38, 118, 105, 109, 10, 10, 34, 32, 68, 114, 111, 112, 32, 102, 111, 108, 100, 32, 105, 102, 32, 105, 116, 32, 115, 101, 116, 32, 98, 117, 116, 32, 118, 105, 109, 32, 100, 111, 101, 115, 110, 39, 116, 32, 115, 117, 112, 112, 111, 114, 116, 32, 105, 116, 46, 10, 105, 102, 32, 118, 101, 114, 115, 105, 111, 110, 32, 60, 32, 54, 48, 48, 32, 38, 38, 32, 101, 120, 105, 115, 116, 115, 40, 34, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 95, 102, 111, 108, 100, 34, 41, 10, 32, 32, 117, 110, 108, 101, 116, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 95, 102, 111, 108, 100, 10, 101, 110, 100, 105, 102, 10, 10, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 67, 111, 109, 109, 101, 110, 116, 84, 111, 100, 111, 32, 32, 32, 32, 32, 32, 84, 79, 68, 79, 32, 70, 73, 88, 77, 69, 32, 88, 88, 88, 32, 84, 66, 68, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 76, 105, 110, 101, 67, 111, 109, 109, 101, 110, 116, 32, 32, 32, 32, 32, 32, 34, 92, 47, 92, 47, 46, 42, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 83, 112, 101, 108, 108, 44, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 67, 111, 109, 109, 101, 110, 116, 84, 111, 100, 111, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 67, 111, 109, 109, 101, 110, 116, 83, 107, 105, 112, 32, 32, 32, 32, 32, 32, 34, 94, 91, 32, 92, 116, 93, 42, 92, 42, 92, 40, 36, 92, 124, 91, 32, 92, 116, 93, 92, 43, 92, 41, 34, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 67, 111, 109, 109, 101, 110, 116, 9, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 114, 116, 61, 34, 47, 92, 42, 34, 32, 32, 101, 110, 100, 61, 34, 92, 42, 47, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 83, 112, 101, 108, 108, 44, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 67, 111, 109, 109, 101, 110, 116, 84, 111, 100, 111, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 112, 101, 99, 105, 97, 108, 9, 32, 32, 32, 32, 32, 32, 32, 34, 92, 92, 92, 100, 92, 100, 92, 100, 92, 124, 92, 92, 46, 34, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 116, 114, 105, 110, 103, 68, 9, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 114, 116, 61, 43, 34, 43, 32, 32, 115, 107, 105, 112, 61, 43, 92, 92, 92, 92, 92, 124, 92, 92, 34, 43, 32, 32, 101, 110, 100, 61, 43, 34, 92, 124, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 112, 101, 99, 105, 97, 108, 44, 64, 104, 116, 109, 108, 80, 114, 101, 112, 114, 111, 99, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 116, 114, 105, 110, 103, 83, 9, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 114, 116, 61, 43, 39, 43, 32, 32, 115, 107, 105, 112, 61, 43, 92, 92, 92, 92, 92, 124, 92, 92, 39, 43, 32, 32, 101, 110, 100, 61, 43, 39, 92, 124, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 112, 101, 99, 105, 97, 108, 44, 64, 104, 116, 109, 108, 80, 114, 101, 112, 114, 111, 99, 10, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 112, 101, 99, 105, 97, 108, 67, 104, 97, 114, 97, 99, 116, 101, 114, 32, 34, 39, 92, 92, 46, 39, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 78, 117, 109, 98, 101, 114, 9, 32, 32, 32, 32, 32, 32, 32, 34, 45, 92, 61, 92, 60, 92, 100, 92, 43, 76, 92, 61, 92, 62, 92, 124, 48, 91, 120, 88, 93, 91, 48, 45, 57, 97, 45, 102, 65, 45, 70, 93, 92, 43, 92, 62, 34, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 82, 101, 103, 101, 120, 112, 83, 116, 114, 105, 110, 103, 32, 32, 32, 32, 32, 115, 116, 97, 114, 116, 61, 43, 47, 91, 94, 47, 42, 93, 43, 109, 101, 61, 101, 45, 49, 32, 115, 107, 105, 112, 61, 43, 92, 92, 92, 92, 92, 124, 92, 92, 47, 43, 32, 101, 110, 100, 61, 43, 47, 91, 103, 105, 109, 93, 92, 123, 48, 44, 50, 92, 125, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 47, 91, 103, 105, 109, 93, 92, 123, 48, 44, 50, 92, 125, 92, 115, 42, 91, 59, 46, 44, 41, 92, 93, 125, 93, 43, 109, 101, 61, 101, 45, 49, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 104, 116, 109, 108, 80, 114, 101, 112, 114, 111, 99, 32, 111, 110, 101, 108, 105, 110, 101, 10, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 67, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 9, 105, 102, 32, 101, 108, 115, 101, 32, 115, 119, 105, 116, 99, 104, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 82, 101, 112, 101, 97, 116, 9, 9, 119, 104, 105, 108, 101, 32, 102, 111, 114, 32, 100, 111, 32, 105, 110, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 66, 114, 97, 110, 99, 104, 9, 9, 98, 114, 101, 97, 107, 32, 99, 111, 110, 116, 105, 110, 117, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 79, 112, 101, 114, 97, 116, 111, 114, 9, 9, 110, 101, 119, 32, 100, 101, 108, 101, 116, 101, 32, 105, 110, 115, 116, 97, 110, 99, 101, 111, 102, 32, 116, 121, 112, 101, 111, 102, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 84, 121, 112, 101, 9, 9, 65, 114, 114, 97, 121, 32, 66, 111, 111, 108, 101, 97, 110, 32, 68, 97, 116, 101, 32, 70, 117, 110, 99, 116, 105, 111, 110, 32, 78, 117, 109, 98, 101, 114, 32, 79, 98, 106, 101, 99, 116, 32, 83, 116, 114, 105, 110, 103, 32, 82, 101, 103, 69, 120, 112, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 116, 97, 116, 101, 109, 101, 110, 116, 9, 9, 114, 101, 116, 117, 114, 110, 32, 119, 105, 116, 104, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 66, 111, 111, 108, 101, 97, 110, 9, 9, 116, 114, 117, 101, 32, 102, 97, 108, 115, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 78, 117, 108, 108, 9, 9, 110, 117, 108, 108, 32, 117, 110, 100, 101, 102, 105, 110, 101, 100, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 9, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32, 116, 104, 105, 115, 32, 118, 97, 114, 32, 108, 101, 116, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 76, 97, 98, 101, 108, 9, 9, 99, 97, 115, 101, 32, 100, 101, 102, 97, 117, 108, 116, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 9, 9, 116, 114, 121, 32, 99, 97, 116, 99, 104, 32, 102, 105, 110, 97, 108, 108, 121, 32, 116, 104, 114, 111, 119, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 77, 101, 115, 115, 97, 103, 101, 9, 9, 97, 108, 101, 114, 116, 32, 99, 111, 110, 102, 105, 114, 109, 32, 112, 114, 111, 109, 112, 116, 32, 115, 116, 97, 116, 117, 115, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 71, 108, 111, 98, 97, 108, 9, 9, 115, 101, 108, 102, 32, 119, 105, 110, 100, 111, 119, 32, 116, 111, 112, 32, 112, 97, 114, 101, 110, 116, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 77, 101, 109, 98, 101, 114, 9, 9, 100, 111, 99, 117, 109, 101, 110, 116, 32, 101, 118, 101, 110, 116, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 68, 101, 112, 114, 101, 99, 97, 116, 101, 100, 9, 101, 115, 99, 97, 112, 101, 32, 117, 110, 101, 115, 99, 97, 112, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 82, 101, 115, 101, 114, 118, 101, 100, 9, 9, 97, 98, 115, 116, 114, 97, 99, 116, 32, 98, 111, 111, 108, 101, 97, 110, 32, 98, 121, 116, 101, 32, 99, 104, 97, 114, 32, 99, 108, 97, 115, 115, 32, 99, 111, 110, 115, 116, 32, 100, 101, 98, 117, 103, 103, 101, 114, 32, 100, 111, 117, 98, 108, 101, 32, 101, 110, 117, 109, 32, 101, 120, 112, 111, 114, 116, 32, 101, 120, 116, 101, 110, 100, 115, 32, 102, 105, 110, 97, 108, 32, 102, 108, 111, 97, 116, 32, 103, 111, 116, 111, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 115, 32, 105, 109, 112, 111, 114, 116, 32, 105, 110, 116, 32, 105, 110, 116, 101, 114, 102, 97, 99, 101, 32, 108, 111, 110, 103, 32, 110, 97, 116, 105, 118, 101, 32, 112, 97, 99, 107, 97, 103, 101, 32, 112, 114, 105, 118, 97, 116, 101, 32, 112, 114, 111, 116, 101, 99, 116, 101, 100, 32, 112, 117, 98, 108, 105, 99, 32, 115, 104, 111, 114, 116, 32, 115, 116, 97, 116, 105, 99, 32, 115, 117, 112, 101, 114, 32, 115, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 100, 32, 116, 104, 114, 111, 119, 115, 32, 116, 114, 97, 110, 115, 105, 101, 110, 116, 32, 118, 111, 108, 97, 116, 105, 108, 101, 32, 10, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 95, 102, 111, 108, 100, 34, 41, 10, 32, 32, 32, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 70, 117, 110, 99, 116, 105, 111, 110, 9, 34, 92, 60, 102, 117, 110, 99, 116, 105, 111, 110, 92, 62, 34, 10, 32, 32, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 70, 117, 110, 99, 116, 105, 111, 110, 70, 111, 108, 100, 9, 115, 116, 97, 114, 116, 61, 34, 92, 60, 102, 117, 110, 99, 116, 105, 111, 110, 92, 62, 46, 42, 91, 94, 125, 59, 93, 36, 34, 32, 101, 110, 100, 61, 34, 94, 92, 122, 49, 125, 46, 42, 36, 34, 32, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 32, 102, 111, 108, 100, 32, 107, 101, 101, 112, 101, 110, 100, 10, 10, 32, 32, 32, 32, 115, 121, 110, 32, 115, 121, 110, 99, 32, 109, 97, 116, 99, 104, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 121, 110, 99, 9, 103, 114, 111, 117, 112, 104, 101, 114, 101, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 70, 117, 110, 99, 116, 105, 111, 110, 70, 111, 108, 100, 32, 34, 92, 60, 102, 117, 110, 99, 116, 105, 111, 110, 92, 62, 34, 10, 32, 32, 32, 32, 115, 121, 110, 32, 115, 121, 110, 99, 32, 109, 97, 116, 99, 104, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 121, 110, 99, 9, 103, 114, 111, 117, 112, 104, 101, 114, 101, 32, 78, 79, 78, 69, 32, 34, 94, 125, 34, 10, 10, 32, 32, 32, 32, 115, 101, 116, 108, 111, 99, 97, 108, 32, 102, 111, 108, 100, 109, 101, 116, 104, 111, 100, 61, 115, 121, 110, 116, 97, 120, 10, 32, 32, 32, 32, 115, 101, 116, 108, 111, 99, 97, 108, 32, 102, 111, 108, 100, 116, 101, 120, 116, 61, 103, 101, 116, 108, 105, 110, 101, 40, 118, 58, 102, 111, 108, 100, 115, 116, 97, 114, 116, 41, 10, 101, 108, 115, 101, 10, 32, 32, 32, 32, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 70, 117, 110, 99, 116, 105, 111, 110, 9, 102, 117, 110, 99, 116, 105, 111, 110, 10, 32, 32, 32, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 66, 114, 97, 99, 101, 115, 9, 32, 32, 32, 34, 91, 123, 125, 92, 91, 92, 93, 93, 34, 10, 32, 32, 32, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 80, 97, 114, 101, 110, 115, 9, 32, 32, 32, 34, 91, 40, 41, 93, 34, 10, 101, 110, 100, 105, 102, 10, 10, 115, 121, 110, 32, 115, 121, 110, 99, 32, 102, 114, 111, 109, 115, 116, 97, 114, 116, 10, 115, 121, 110, 32, 115, 121, 110, 99, 32, 109, 97, 120, 108, 105, 110, 101, 115, 61, 49, 48, 48, 10, 10, 105, 102, 32, 109, 97, 105, 110, 95, 115, 121, 110, 116, 97, 120, 32, 61, 61, 32, 34, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 34, 10, 32, 32, 115, 121, 110, 32, 115, 121, 110, 99, 32, 99, 99, 111, 109, 109, 101, 110, 116, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 67, 111, 109, 109, 101, 110, 116, 10, 101, 110, 100, 105, 102, 10, 10, 34, 32, 68, 101, 102, 105, 110, 101, 32, 116, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 46, 10, 34, 32, 70, 111, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 53, 46, 55, 32, 97, 110, 100, 32, 101, 97, 114, 108, 105, 101, 114, 58, 32, 111, 110, 108, 121, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 100, 111, 110, 101, 32, 97, 108, 114, 101, 97, 100, 121, 10, 34, 32, 70, 111, 114, 32, 118, 101, 114, 115, 105, 111, 110, 32, 53, 46, 56, 32, 97, 110, 100, 32, 108, 97, 116, 101, 114, 58, 32, 111, 110, 108, 121, 32, 119, 104, 101, 110, 32, 97, 110, 32, 105, 116, 101, 109, 32, 100, 111, 101, 115, 110, 39, 116, 32, 104, 97, 118, 101, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 32, 121, 101, 116, 10, 105, 102, 32, 118, 101, 114, 115, 105, 111, 110, 32, 62, 61, 32, 53, 48, 56, 32, 124, 124, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 100, 105, 100, 95, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 95, 115, 121, 110, 95, 105, 110, 105, 116, 115, 34, 41, 10, 32, 32, 105, 102, 32, 118, 101, 114, 115, 105, 111, 110, 32, 60, 32, 53, 48, 56, 10, 32, 32, 32, 32, 108, 101, 116, 32, 100, 105, 100, 95, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 95, 115, 121, 110, 95, 105, 110, 105, 116, 115, 32, 61, 32, 49, 10, 32, 32, 32, 32, 99, 111, 109, 109, 97, 110, 100, 32, 45, 110, 97, 114, 103, 115, 61, 43, 32, 72, 105, 76, 105, 110, 107, 32, 104, 105, 32, 108, 105, 110, 107, 32, 60, 97, 114, 103, 115, 62, 10, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 99, 111, 109, 109, 97, 110, 100, 32, 45, 110, 97, 114, 103, 115, 61, 43, 32, 72, 105, 76, 105, 110, 107, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 60, 97, 114, 103, 115, 62, 10, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 67, 111, 109, 109, 101, 110, 116, 9, 9, 67, 111, 109, 109, 101, 110, 116, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 76, 105, 110, 101, 67, 111, 109, 109, 101, 110, 116, 9, 9, 67, 111, 109, 109, 101, 110, 116, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 67, 111, 109, 109, 101, 110, 116, 84, 111, 100, 111, 9, 9, 84, 111, 100, 111, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 112, 101, 99, 105, 97, 108, 9, 9, 83, 112, 101, 99, 105, 97, 108, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 116, 114, 105, 110, 103, 83, 9, 9, 83, 116, 114, 105, 110, 103, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 116, 114, 105, 110, 103, 68, 9, 9, 83, 116, 114, 105, 110, 103, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 67, 104, 97, 114, 97, 99, 116, 101, 114, 9, 9, 67, 104, 97, 114, 97, 99, 116, 101, 114, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 112, 101, 99, 105, 97, 108, 67, 104, 97, 114, 97, 99, 116, 101, 114, 9, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 112, 101, 99, 105, 97, 108, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 78, 117, 109, 98, 101, 114, 9, 9, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 86, 97, 108, 117, 101, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 67, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 9, 9, 67, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 82, 101, 112, 101, 97, 116, 9, 9, 82, 101, 112, 101, 97, 116, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 66, 114, 97, 110, 99, 104, 9, 9, 67, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 79, 112, 101, 114, 97, 116, 111, 114, 9, 9, 79, 112, 101, 114, 97, 116, 111, 114, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 84, 121, 112, 101, 9, 9, 9, 84, 121, 112, 101, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 83, 116, 97, 116, 101, 109, 101, 110, 116, 9, 9, 83, 116, 97, 116, 101, 109, 101, 110, 116, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 70, 117, 110, 99, 116, 105, 111, 110, 9, 9, 70, 117, 110, 99, 116, 105, 111, 110, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 66, 114, 97, 99, 101, 115, 9, 9, 70, 117, 110, 99, 116, 105, 111, 110, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 69, 114, 114, 111, 114, 9, 9, 69, 114, 114, 111, 114, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 80, 97, 114, 101, 110, 69, 114, 114, 111, 114, 9, 9, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 69, 114, 114, 111, 114, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 78, 117, 108, 108, 9, 9, 9, 75, 101, 121, 119, 111, 114, 100, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 66, 111, 111, 108, 101, 97, 110, 9, 9, 66, 111, 111, 108, 101, 97, 110, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 82, 101, 103, 101, 120, 112, 83, 116, 114, 105, 110, 103, 9, 9, 83, 116, 114, 105, 110, 103, 10, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 9, 9, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 76, 97, 98, 101, 108, 9, 9, 76, 97, 98, 101, 108, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 9, 9, 69, 120, 99, 101, 112, 116, 105, 111, 110, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 77, 101, 115, 115, 97, 103, 101, 9, 9, 75, 101, 121, 119, 111, 114, 100, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 71, 108, 111, 98, 97, 108, 9, 9, 75, 101, 121, 119, 111, 114, 100, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 77, 101, 109, 98, 101, 114, 9, 9, 75, 101, 121, 119, 111, 114, 100, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 68, 101, 112, 114, 101, 99, 97, 116, 101, 100, 9, 9, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 82, 101, 115, 101, 114, 118, 101, 100, 9, 9, 75, 101, 121, 119, 111, 114, 100, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 68, 101, 98, 117, 103, 9, 9, 68, 101, 98, 117, 103, 10, 32, 32, 72, 105, 76, 105, 110, 107, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 67, 111, 110, 115, 116, 97, 110, 116, 9, 9, 76, 97, 98, 101, 108, 10, 10, 32, 32, 100, 101, 108, 99, 111, 109, 109, 97, 110, 100, 32, 72, 105, 76, 105, 110, 107, 10, 101, 110, 100, 105, 102, 10, 10, 108, 101, 116, 32, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 32, 61, 32, 34, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 34, 10, 105, 102, 32, 109, 97, 105, 110, 95, 115, 121, 110, 116, 97, 120, 32, 61, 61, 32, 39, 106, 97, 118, 97, 115, 99, 114, 105, 112, 116, 39, 10, 32, 32, 117, 110, 108, 101, 116, 32, 109, 97, 105, 110, 95, 115, 121, 110, 116, 97, 120, 10, 101, 110, 100, 105, 102, 10, 108, 101, 116, 32, 38, 99, 112, 111, 32, 61, 32, 115, 58, 99, 112, 111, 95, 115, 97, 118, 101, 10, 117, 110, 108, 101, 116, 32, 115, 58, 99, 112, 111, 95, 115, 97, 118, 101, 10, 10, 34, 32, 118, 105, 109, 58, 32, 116, 115, 61, 56, 10]);
        VimModule["FS_createDataFile"]("/usr/local/share/vim/syntax", "javascript.vim", fileData4, true, true);
        fileData5 = [];
        fileData5.push.apply(fileData5, [34, 32, 86, 105, 109, 32, 115, 121, 110, 116, 97, 120, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 105, 108, 101, 10, 34, 32, 77, 97, 105, 110, 116, 97, 105, 110, 101, 114, 58, 9, 66, 114, 97, 109, 32, 77, 111, 111, 108, 101, 110, 97, 97, 114, 32, 60, 66, 114, 97, 109, 64, 118, 105, 109, 46, 111, 114, 103, 62, 10, 34, 32, 76, 97, 115, 116, 32, 67, 104, 97, 110, 103, 101, 58, 9, 50, 48, 48, 54, 32, 65, 112, 114, 32, 49, 54, 10, 10, 34, 32, 84, 104, 105, 115, 32, 102, 105, 108, 101, 32, 105, 115, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 34, 58, 115, 121, 110, 116, 97, 120, 32, 111, 102, 102, 34, 46, 10, 34, 32, 73, 116, 32, 114, 101, 109, 111, 118, 101, 115, 32, 116, 104, 101, 32, 97, 117, 116, 111, 99, 111, 109, 109, 97, 110, 100, 115, 32, 97, 110, 100, 32, 115, 116, 111, 112, 115, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 32, 102, 111, 114, 32, 97, 108, 108, 32, 98, 117, 102, 102, 101, 114, 115, 46, 10, 10, 105, 102, 32, 33, 104, 97, 115, 40, 34, 115, 121, 110, 116, 97, 120, 34, 41, 10, 32, 32, 102, 105, 110, 105, 115, 104, 10, 101, 110, 100, 105, 102, 10, 10, 34, 32, 82, 101, 109, 111, 118, 101, 32, 97, 108, 108, 32, 97, 117, 116, 111, 99, 111, 109, 109, 97, 110, 100, 115, 32, 102, 111, 114, 32, 116, 104, 101, 32, 83, 121, 110, 116, 97, 120, 32, 101, 118, 101, 110, 116, 46, 32, 32, 84, 104, 105, 115, 32, 97, 108, 115, 111, 32, 97, 118, 111, 105, 100, 115, 32, 116, 104, 97, 116, 10, 34, 32, 34, 115, 121, 110, 116, 97, 120, 61, 102, 111, 111, 34, 32, 105, 110, 32, 97, 32, 109, 111, 100, 101, 108, 105, 110, 101, 32, 116, 114, 105, 103, 103, 101, 114, 115, 32, 116, 104, 101, 32, 83, 121, 110, 83, 101, 116, 40, 41, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 111, 102, 32, 115, 121, 110, 108, 111, 97, 100, 46, 118, 105, 109, 46, 10, 97, 117, 33, 32, 83, 121, 110, 116, 97, 120, 10, 10, 34, 32, 114, 101, 109, 111, 118, 101, 32, 97, 108, 108, 32, 115, 121, 110, 116, 97, 120, 32, 97, 117, 116, 111, 99, 111, 109, 109, 97, 110, 100, 115, 32, 97, 110, 100, 32, 114, 101, 109, 111, 118, 101, 32, 116, 104, 101, 32, 115, 121, 110, 116, 97, 120, 32, 102, 111, 114, 32, 101, 97, 99, 104, 32, 98, 117, 102, 102, 101, 114, 10, 97, 117, 103, 114, 111, 117, 112, 32, 115, 121, 110, 116, 97, 120, 115, 101, 116, 10, 32, 32, 97, 117, 33, 10, 32, 32, 97, 117, 32, 66, 117, 102, 69, 110, 116, 101, 114, 32, 42, 32, 115, 121, 110, 32, 99, 108, 101, 97, 114, 10, 32, 32, 97, 117, 32, 66, 117, 102, 69, 110, 116, 101, 114, 32, 42, 32, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 34, 41, 32, 124, 32, 117, 110, 108, 101, 116, 32, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 32, 124, 32, 101, 110, 100, 105, 102, 10, 32, 32, 100, 111, 97, 117, 116, 111, 97, 108, 108, 32, 115, 121, 110, 116, 97, 120, 115, 101, 116, 32, 66, 117, 102, 69, 110, 116, 101, 114, 32, 42, 10, 32, 32, 97, 117, 33, 10, 97, 117, 103, 114, 111, 117, 112, 32, 69, 78, 68, 10, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 115, 121, 110, 116, 97, 120, 95, 111, 110, 34, 41, 10, 32, 32, 117, 110, 108, 101, 116, 32, 115, 121, 110, 116, 97, 120, 95, 111, 110, 10, 101, 110, 100, 105, 102, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 115, 121, 110, 116, 97, 120, 95, 109, 97, 110, 117, 97, 108, 34, 41, 10, 32, 32, 117, 110, 108, 101, 116, 32, 115, 121, 110, 116, 97, 120, 95, 109, 97, 110, 117, 97, 108, 10, 101, 110, 100, 105, 102, 10]);
        VimModule["FS_createDataFile"]("/usr/local/share/vim/syntax", "nosyntax.vim", fileData5, true, true);
        fileData6 = [];
        fileData6.push.apply(fileData6, [34, 32, 86, 105, 109, 32, 115, 121, 110, 116, 97, 120, 32, 102, 105, 108, 101, 10, 34, 32, 76, 97, 110, 103, 117, 97, 103, 101, 58, 9, 86, 105, 109, 32, 55, 46, 52, 32, 115, 99, 114, 105, 112, 116, 10, 34, 32, 77, 97, 105, 110, 116, 97, 105, 110, 101, 114, 58, 9, 67, 104, 97, 114, 108, 101, 115, 32, 69, 46, 32, 67, 97, 109, 112, 98, 101, 108, 108, 32, 60, 78, 100, 114, 79, 99, 104, 105, 112, 83, 64, 80, 99, 97, 109, 112, 98, 101, 108, 108, 65, 102, 97, 109, 105, 108, 121, 46, 77, 98, 105, 122, 62, 10, 34, 32, 76, 97, 115, 116, 32, 67, 104, 97, 110, 103, 101, 58, 9, 65, 117, 103, 32, 49, 54, 44, 32, 50, 48, 49, 51, 10, 34, 32, 86, 101, 114, 115, 105, 111, 110, 58, 9, 55, 46, 52, 45, 49, 10, 34, 32, 65, 117, 116, 111, 109, 97, 116, 105, 99, 97, 108, 108, 121, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 107, 101, 121, 119, 111, 114, 100, 32, 108, 105, 115, 116, 115, 58, 32, 123, 123, 123, 49, 10, 10, 34, 32, 81, 117, 105, 116, 32, 119, 104, 101, 110, 32, 97, 32, 115, 121, 110, 116, 97, 120, 32, 102, 105, 108, 101, 32, 119, 97, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 108, 111, 97, 100, 101, 100, 32, 123, 123, 123, 50, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 34, 41, 10, 32, 32, 102, 105, 110, 105, 115, 104, 10, 101, 110, 100, 105, 102, 10, 108, 101, 116, 32, 115, 58, 107, 101, 101, 112, 99, 112, 111, 61, 32, 38, 99, 112, 111, 10, 115, 101, 116, 32, 99, 112, 111, 38, 118, 105, 109, 10, 10, 34, 32, 118, 105, 109, 84, 111, 100, 111, 58, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 99, 111, 109, 109, 111, 110, 32, 115, 112, 101, 99, 105, 97, 108, 45, 110, 111, 116, 105, 99, 101, 115, 32, 102, 111, 114, 32, 99, 111, 109, 109, 101, 110, 116, 115, 32, 123, 123, 123, 50, 10, 34, 32, 85, 115, 101, 32, 116, 104, 101, 32, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 71, 114, 111, 117, 112, 32, 99, 108, 117, 115, 116, 101, 114, 32, 116, 111, 32, 97, 100, 100, 32, 121, 111, 117, 114, 32, 111, 119, 110, 46, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 84, 111, 100, 111, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 67, 79, 77, 66, 65, 75, 9, 70, 73, 88, 77, 69, 9, 84, 79, 68, 79, 9, 88, 88, 88, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 71, 114, 111, 117, 112, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 84, 111, 100, 111, 44, 64, 83, 112, 101, 108, 108, 10, 10, 34, 32, 114, 101, 103, 117, 108, 97, 114, 32, 118, 105, 109, 32, 99, 111, 109, 109, 97, 110, 100, 115, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 32, 97, 114, 103, 97, 91, 100, 100, 93, 32, 97, 114, 91, 103, 115, 93, 32, 98, 97, 114, 32, 98, 110, 91, 101, 120, 116, 93, 32, 98, 114, 101, 97, 107, 97, 91, 100, 100, 93, 32, 98, 117, 32, 98, 119, 91, 105, 112, 101, 111, 117, 116, 93, 32, 99, 97, 100, 100, 102, 91, 105, 108, 101, 93, 32, 99, 100, 32, 99, 103, 101, 116, 101, 91, 120, 112, 114, 93, 32, 99, 104, 101, 99, 107, 116, 91, 105, 109, 101, 93, 32, 99, 109, 100, 110, 97, 109, 101, 32, 99, 110, 102, 32, 99, 111, 109, 32, 99, 111, 110, 91, 116, 105, 110, 117, 101, 93, 32, 99, 113, 91, 117, 105, 116, 93, 32, 99, 119, 91, 105, 110, 100, 111, 119, 93, 32, 100, 101, 108, 99, 91, 111, 109, 109, 97, 110, 100, 93, 32, 100, 105, 102, 102, 103, 91, 101, 116, 93, 32, 100, 105, 102, 102, 112, 117, 91, 116, 93, 32, 100, 105, 103, 91, 114, 97, 112, 104, 115, 93, 32, 100, 114, 91, 111, 112, 93, 32, 101, 97, 114, 108, 105, 101, 114, 32, 101, 108, 91, 115, 101, 93, 32, 101, 110, 100, 102, 111, 91, 114, 93, 32, 101, 110, 101, 91, 119, 93, 32, 102, 105, 108, 101, 110, 97, 109, 101, 32, 102, 105, 110, 91, 100, 93, 32, 102, 111, 108, 100, 100, 111, 99, 91, 108, 111, 115, 101, 100, 93, 32, 102, 117, 91, 110, 99, 116, 105, 111, 110, 93, 32, 103, 117, 105, 32, 104, 101, 108, 112, 103, 91, 114, 101, 112, 93, 32, 105, 97, 32, 105, 110, 32, 106, 91, 111, 105, 110, 93, 32, 107, 101, 101, 91, 112, 109, 97, 114, 107, 115, 93, 32, 108, 97, 100, 100, 102, 91, 105, 108, 101, 93, 32, 108, 98, 91, 117, 102, 102, 101, 114, 93, 32, 108, 101, 91, 102, 116, 93, 32, 108, 103, 101, 116, 98, 91, 117, 102, 102, 101, 114, 93, 32, 108, 91, 105, 115, 116, 93, 32, 108, 78, 32, 108, 78, 102, 32, 108, 111, 91, 97, 100, 118, 105, 101, 119, 93, 32, 108, 112, 102, 91, 105, 108, 101, 93, 32, 108, 117, 97, 100, 111, 32, 109, 97, 107, 91, 101, 93, 32, 109, 101, 110, 117, 116, 91, 114, 97, 110, 115, 108, 97, 116, 101, 93, 32, 109, 107, 115, 91, 101, 115, 115, 105, 111, 110, 93, 32, 109, 111, 100, 91, 101, 93, 32, 110, 32, 110, 101, 119, 32, 110, 111, 97, 117, 116, 111, 99, 109, 100, 32, 111, 110, 91, 108, 121, 93, 32, 112, 99, 91, 108, 111, 115, 101, 93, 32, 112, 111, 112, 117, 32, 112, 91, 114, 105, 110, 116, 93, 32, 112, 114, 111, 109, 112, 116, 114, 91, 101, 112, 108, 93, 32, 112, 116, 110, 32, 112, 116, 115, 91, 101, 108, 101, 99, 116, 93, 32, 112, 121, 91, 116, 104, 111, 110, 93, 32, 113, 117, 111, 116, 101, 32, 114, 101, 100, 105, 91, 114, 93, 32, 114, 101, 115, 91, 105, 122, 101, 93, 32, 114, 117, 32, 114, 118, 91, 105, 109, 105, 110, 102, 111, 93, 32, 115, 98, 102, 91, 105, 114, 115, 116, 93, 32, 115, 98, 114, 91, 101, 119, 105, 110, 100, 93, 32, 115, 99, 115, 99, 111, 112, 101, 32, 115, 102, 105, 114, 91, 115, 116, 93, 32, 115, 105, 109, 91, 97, 108, 116, 93, 32, 115, 109, 101, 32, 115, 110, 111, 114, 101, 109, 101, 32, 115, 112, 101, 32, 115, 112, 101, 108, 108, 119, 91, 114, 111, 110, 103, 93, 32, 115, 116, 97, 114, 32, 115, 116, 91, 111, 112, 93, 32, 115, 117, 110, 109, 101, 110, 117, 32, 115, 121, 110, 32, 116, 97, 32, 116, 97, 98, 102, 91, 105, 110, 100, 93, 32, 116, 97, 98, 110, 101, 119, 32, 116, 97, 98, 114, 91, 101, 119, 105, 110, 100, 93, 32, 116, 99, 108, 100, 91, 111, 93, 32, 116, 106, 91, 117, 109, 112, 93, 32, 116, 78, 32, 116, 112, 91, 114, 101, 118, 105, 111, 117, 115, 93, 32, 116, 117, 32, 117, 91, 110, 100, 111, 93, 32, 117, 110, 108, 111, 91, 99, 107, 118, 97, 114, 93, 32, 118, 101, 114, 98, 91, 111, 115, 101, 93, 32, 118, 105, 109, 91, 103, 114, 101, 112, 93, 32, 118, 110, 101, 91, 119, 93, 32, 119, 105, 110, 32, 119, 110, 91, 101, 120, 116, 93, 32, 119, 91, 114, 105, 116, 101, 93, 32, 120, 97, 91, 108, 108, 93, 32, 88, 77, 76, 101, 110, 116, 32, 120, 117, 110, 109, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 98, 32, 97, 114, 103, 100, 91, 101, 108, 101, 116, 101, 93, 32, 97, 114, 103, 117, 91, 109, 101, 110, 116, 93, 32, 98, 100, 91, 101, 108, 101, 116, 101, 93, 32, 98, 78, 91, 101, 120, 116, 93, 32, 98, 114, 101, 97, 107, 100, 91, 101, 108, 93, 32, 98, 117, 102, 32, 99, 32, 99, 97, 108, 91, 108, 93, 32, 99, 101, 91, 110, 116, 101, 114, 93, 32, 99, 103, 91, 101, 116, 102, 105, 108, 101, 93, 32, 99, 108, 32, 99, 110, 32, 99, 78, 102, 32, 99, 111, 109, 99, 91, 108, 101, 97, 114, 93, 32, 99, 111, 112, 101, 91, 110, 93, 32, 99, 114, 91, 101, 119, 105, 110, 100, 93, 32, 100, 32, 100, 91, 101, 108, 101, 116, 101, 93, 32, 100, 105, 102, 102, 111, 32, 100, 105, 102, 102, 115, 112, 108, 105, 116, 32, 100, 105, 91, 115, 112, 108, 97, 121, 93, 32, 100, 115, 91, 101, 97, 114, 99, 104, 93, 32, 101, 99, 32, 101, 108, 115, 101, 105, 91, 102, 93, 32, 101, 110, 100, 102, 117, 110, 32, 101, 120, 32, 102, 105, 108, 101, 115, 32, 102, 105, 110, 105, 91, 115, 104, 93, 32, 102, 111, 108, 100, 100, 91, 111, 111, 112, 101, 110, 93, 32, 103, 32, 103, 118, 105, 109, 32, 104, 101, 108, 112, 116, 91, 97, 103, 115, 93, 32, 105, 97, 98, 99, 91, 108, 101, 97, 114, 93, 32, 105, 110, 100, 101, 120, 32, 106, 117, 91, 109, 112, 115, 93, 32, 108, 32, 108, 97, 110, 32, 108, 99, 91, 100, 93, 32, 108, 101, 102, 116, 97, 91, 98, 111, 118, 101, 93, 32, 108, 103, 101, 116, 101, 91, 120, 112, 114, 93, 32, 108, 108, 32, 108, 110, 101, 32, 108, 110, 102, 91, 105, 108, 101, 93, 32, 108, 111, 99, 97, 108, 101, 32, 108, 112, 91, 114, 101, 118, 105, 111, 117, 115, 93, 32, 108, 117, 97, 102, 105, 108, 101, 32, 77, 97, 110, 32, 109, 101, 115, 32, 109, 107, 115, 112, 91, 101, 108, 108, 93, 32, 109, 91, 111, 118, 101, 93, 32, 78, 32, 110, 91, 101, 120, 116, 93, 32, 110, 111, 104, 91, 108, 115, 101, 97, 114, 99, 104, 93, 32, 111, 91, 112, 101, 110, 93, 32, 112, 101, 32, 112, 111, 112, 117, 91, 112, 93, 32, 80, 91, 114, 105, 110, 116, 93, 32, 112, 115, 91, 101, 97, 114, 99, 104, 93, 32, 112, 116, 78, 32, 112, 117, 91, 116, 93, 32, 112, 121, 116, 104, 111, 110, 51, 32, 114, 32, 114, 101, 100, 91, 111, 93, 32, 114, 101, 116, 91, 97, 98, 93, 32, 114, 117, 98, 91, 121, 93, 32, 115, 97, 108, 91, 108, 93, 32, 115, 98, 108, 91, 97, 115, 116, 93, 32, 115, 98, 91, 117, 102, 102, 101, 114, 93, 32, 115, 101, 91, 116, 93, 32, 115, 104, 91, 101, 108, 108, 93, 32, 115, 108, 32, 115, 109, 101, 110, 117, 32, 115, 110, 111, 114, 101, 109, 101, 110, 117, 32, 115, 112, 101, 108, 108, 100, 91, 117, 109, 112, 93, 32, 115, 112, 91, 108, 105, 116, 93, 32, 115, 116, 97, 114, 116, 32, 115, 116, 111, 112, 105, 91, 110, 115, 101, 114, 116, 93, 32, 115, 117, 115, 91, 112, 101, 110, 100, 93, 32, 115, 121, 110, 99, 32, 116, 97, 98, 32, 116, 97, 98, 102, 105, 114, 91, 115, 116, 93, 32, 116, 97, 98, 110, 91, 101, 120, 116, 93, 32, 116, 97, 98, 115, 32, 116, 99, 108, 102, 91, 105, 108, 101, 93, 32, 116, 108, 91, 97, 115, 116, 93, 32, 116, 110, 91, 101, 120, 116, 93, 32, 116, 114, 32, 116, 117, 91, 110, 109, 101, 110, 117, 93, 32, 117, 110, 100, 111, 106, 91, 111, 105, 110, 93, 32, 117, 110, 115, 91, 105, 108, 101, 110, 116, 93, 32, 118, 101, 91, 114, 115, 105, 111, 110, 93, 32, 118, 105, 109, 103, 114, 101, 112, 97, 91, 100, 100, 93, 32, 118, 115, 91, 112, 108, 105, 116, 93, 32, 119, 105, 110, 99, 91, 109, 100, 93, 32, 119, 78, 91, 101, 120, 116, 93, 32, 119, 115, 91, 118, 101, 114, 98, 93, 32, 120, 91, 105, 116, 93, 32, 88, 77, 76, 110, 115, 32, 120, 117, 110, 109, 101, 110, 117, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 98, 99, 91, 108, 101, 97, 114, 93, 32, 97, 114, 103, 100, 111, 32, 97, 115, 91, 99, 105, 105, 93, 32, 98, 101, 108, 91, 111, 119, 114, 105, 103, 104, 116, 93, 32, 98, 111, 91, 116, 114, 105, 103, 104, 116, 93, 32, 98, 114, 101, 97, 107, 108, 91, 105, 115, 116, 93, 32, 98, 117, 102, 100, 111, 32, 99, 97, 98, 99, 91, 108, 101, 97, 114, 93, 32, 99, 97, 116, 91, 99, 104, 93, 32, 99, 101, 120, 91, 112, 114, 93, 32, 99, 91, 104, 97, 110, 103, 101, 93, 32, 99, 108, 97, 91, 115, 116, 93, 32, 99, 78, 32, 99, 110, 102, 91, 105, 108, 101, 93, 32, 99, 111, 109, 109, 101, 110, 116, 32, 99, 111, 91, 112, 121, 93, 32, 99, 115, 32, 100, 101, 32, 100, 101, 108, 102, 32, 100, 105, 102, 102, 111, 102, 102, 32, 100, 105, 102, 102, 116, 32, 100, 106, 91, 117, 109, 112, 93, 32, 100, 115, 112, 91, 108, 105, 116, 93, 32, 101, 99, 104, 111, 101, 91, 114, 114, 93, 32, 101, 109, 91, 101, 110, 117, 93, 32, 101, 110, 100, 102, 91, 117, 110, 99, 116, 105, 111, 110, 93, 32, 101, 120, 105, 91, 116, 93, 32, 102, 105, 108, 101, 116, 32, 102, 105, 114, 91, 115, 116, 93, 32, 102, 111, 108, 100, 111, 91, 112, 101, 110, 93, 32, 103, 101, 116, 32, 104, 32, 104, 105, 32, 105, 102, 32, 105, 110, 116, 114, 111, 32, 107, 32, 108, 97, 32, 108, 97, 110, 91, 103, 117, 97, 103, 101, 93, 32, 108, 99, 104, 91, 100, 105, 114, 93, 32, 108, 101, 116, 64, 32, 108, 103, 91, 101, 116, 102, 105, 108, 101, 93, 32, 108, 108, 97, 91, 115, 116, 93, 32, 108, 110, 101, 119, 91, 101, 114, 93, 32, 108, 78, 102, 91, 105, 108, 101, 93, 32, 108, 111, 99, 91, 107, 109, 97, 114, 107, 115, 93, 32, 108, 114, 91, 101, 119, 105, 110, 100, 93, 32, 108, 118, 91, 105, 109, 103, 114, 101, 112, 93, 32, 109, 97, 91, 114, 107, 93, 32, 109, 101, 115, 115, 97, 103, 101, 115, 32, 109, 107, 118, 32, 109, 118, 32, 110, 98, 99, 91, 108, 111, 115, 101, 93, 32, 78, 91, 101, 120, 116, 93, 32, 110, 117, 91, 109, 98, 101, 114, 93, 32, 111, 112, 116, 91, 105, 111, 110, 115, 93, 32, 112, 101, 100, 91, 105, 116, 93, 32, 112, 112, 91, 111, 112, 93, 32, 112, 114, 111, 32, 112, 116, 97, 91, 103, 93, 32, 112, 116, 110, 91, 101, 120, 116, 93, 32, 112, 119, 91, 100, 93, 32, 113, 32, 114, 101, 32, 114, 101, 100, 114, 91, 97, 119, 93, 32, 114, 101, 116, 117, 91, 114, 110, 93, 32, 114, 117, 98, 121, 100, 91, 111, 93, 32, 115, 97, 110, 91, 100, 98, 111, 120, 93, 32, 115, 98, 109, 91, 111, 100, 105, 102, 105, 101, 100, 93, 32, 115, 99, 114, 105, 112, 32, 115, 101, 116, 102, 91, 105, 108, 101, 116, 121, 112, 101, 93, 32, 115, 105, 32, 115, 108, 97, 91, 115, 116, 93, 32, 115, 110, 91, 101, 120, 116, 93, 32, 115, 64, 92, 110, 64, 92, 61, 92, 114, 34, 32, 115, 112, 101, 91, 108, 108, 103, 111, 111, 100, 93, 32, 115, 112, 114, 91, 101, 118, 105, 111, 117, 115, 93, 32, 115, 116, 97, 114, 116, 103, 91, 114, 101, 112, 108, 97, 99, 101, 93, 32, 115, 116, 115, 91, 101, 108, 101, 99, 116, 93, 32, 115, 118, 91, 105, 101, 119, 93, 32, 115, 121, 110, 99, 98, 105, 110, 100, 32, 116, 97, 98, 99, 91, 108, 111, 115, 101, 93, 32, 116, 97, 98, 108, 91, 97, 115, 116, 93, 32, 116, 97, 98, 78, 91, 101, 120, 116, 93, 32, 116, 97, 91, 103, 93, 32, 116, 101, 91, 97, 114, 111, 102, 102, 93, 32, 116, 109, 32, 116, 78, 91, 101, 120, 116, 93, 32, 116, 114, 91, 101, 119, 105, 110, 100, 93, 32, 117, 32, 117, 110, 100, 111, 108, 91, 105, 115, 116, 93, 32, 117, 112, 91, 100, 97, 116, 101, 93, 32, 118, 101, 114, 116, 91, 105, 99, 97, 108, 93, 32, 118, 105, 91, 115, 117, 97, 108, 93, 32, 119, 32, 119, 105, 110, 100, 111, 32, 119, 112, 91, 114, 101, 118, 105, 111, 117, 115, 93, 32, 119, 117, 110, 100, 111, 32, 120, 109, 97, 112, 99, 91, 108, 101, 97, 114, 93, 32, 120, 110, 111, 114, 101, 109, 101, 32, 120, 119, 105, 110, 105, 110, 102, 111, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 98, 111, 91, 118, 101, 108, 101, 102, 116, 93, 32, 97, 114, 103, 101, 91, 100, 105, 116, 93, 32, 97, 117, 32, 98, 102, 91, 105, 114, 115, 116, 93, 32, 98, 112, 91, 114, 101, 118, 105, 111, 117, 115, 93, 32, 98, 114, 91, 101, 119, 105, 110, 100, 93, 32, 98, 91, 117, 102, 102, 101, 114, 93, 32, 99, 97, 100, 32, 99, 98, 91, 117, 102, 102, 101, 114, 93, 32, 99, 102, 91, 105, 108, 101, 93, 32, 99, 104, 97, 110, 103, 101, 115, 32, 99, 108, 91, 105, 115, 116, 93, 32, 99, 110, 101, 119, 91, 101, 114, 93, 32, 99, 78, 102, 91, 105, 108, 101, 93, 32, 99, 111, 109, 112, 91, 105, 108, 101, 114, 93, 32, 99, 111, 117, 110, 116, 32, 99, 115, 99, 111, 112, 101, 32, 100, 101, 98, 117, 103, 32, 100, 101, 108, 102, 91, 117, 110, 99, 116, 105, 111, 110, 93, 32, 68, 105, 102, 102, 79, 114, 105, 103, 32, 100, 105, 102, 102, 116, 104, 105, 115, 32, 100, 108, 91, 105, 115, 116, 93, 32, 100, 119, 105, 109, 32, 101, 99, 104, 111, 109, 91, 115, 103, 93, 32, 101, 109, 101, 110, 117, 42, 32, 101, 110, 91, 100, 105, 102, 93, 32, 101, 120, 117, 91, 115, 97, 103, 101, 93, 32, 102, 105, 108, 101, 116, 121, 112, 101, 32, 102, 105, 120, 91, 100, 101, 108, 93, 32, 102, 111, 114, 32, 103, 111, 91, 116, 111, 93, 32, 104, 97, 91, 114, 100, 99, 111, 112, 121, 93, 32, 104, 105, 100, 91, 101, 93, 32, 105, 106, 91, 117, 109, 112, 93, 32, 105, 115, 91, 101, 97, 114, 99, 104, 93, 32, 107, 101, 101, 112, 97, 32, 108, 97, 100, 32, 108, 97, 91, 115, 116, 93, 32, 108, 99, 108, 91, 111, 115, 101, 93, 32, 108, 101, 120, 91, 112, 114, 93, 32, 108, 103, 114, 91, 101, 112, 93, 32, 108, 108, 105, 91, 115, 116, 93, 32, 108, 110, 101, 91, 120, 116, 93, 32, 108, 111, 32, 108, 111, 99, 107, 118, 91, 97, 114, 93, 32, 108, 115, 32, 108, 118, 105, 109, 103, 114, 101, 112, 97, 91, 100, 100, 93, 32, 109, 97, 114, 107, 115, 32, 109, 107, 32, 109, 107, 118, 105, 101, 91, 119, 93, 32, 109, 122, 32, 110, 98, 91, 107, 101, 121, 93, 32, 110, 107, 102, 32, 111, 32, 111, 119, 110, 115, 121, 110, 116, 97, 120, 32, 112, 101, 91, 114, 108, 93, 32, 112, 114, 32, 112, 114, 111, 102, 100, 91, 101, 108, 93, 32, 112, 116, 102, 91, 105, 114, 115, 116, 93, 32, 112, 116, 78, 91, 101, 120, 116, 93, 32, 112, 121, 32, 113, 97, 91, 108, 108, 93, 32, 114, 91, 101, 97, 100, 93, 32, 114, 101, 100, 114, 97, 119, 115, 91, 116, 97, 116, 117, 115, 93, 32, 114, 101, 119, 91, 105, 110, 100, 93, 32, 114, 117, 98, 121, 102, 91, 105, 108, 101, 93, 32, 115, 97, 91, 114, 103, 117, 109, 101, 110, 116, 93, 32, 115, 98, 110, 91, 101, 120, 116, 93, 32, 115, 99, 114, 105, 112, 116, 101, 91, 110, 99, 111, 100, 105, 110, 103, 93, 32, 115, 101, 116, 103, 91, 108, 111, 98, 97, 108, 93, 32, 115, 105, 103, 32, 115, 108, 91, 101, 101, 112, 93, 32, 115, 78, 91, 101, 120, 116, 93, 32, 115, 111, 32, 115, 112, 101, 108, 108, 105, 91, 110, 102, 111, 93, 32, 115, 114, 101, 91, 119, 105, 110, 100, 93, 32, 115, 116, 97, 114, 91, 116, 105, 110, 115, 101, 114, 116, 93, 32, 115, 117, 110, 91, 104, 105, 100, 101, 93, 32, 115, 119, 91, 97, 112, 110, 97, 109, 101, 93, 32, 115, 121, 110, 108, 105, 115, 116, 32, 116, 97, 98, 100, 91, 111, 93, 32, 116, 97, 98, 109, 91, 111, 118, 101, 93, 32, 116, 97, 98, 111, 91, 110, 108, 121, 93, 32, 116, 97, 103, 115, 32, 116, 102, 91, 105, 114, 115, 116, 93, 32, 116, 109, 91, 101, 110, 117, 93, 32, 84, 79, 104, 116, 109, 108, 32, 116, 114, 121, 32, 117, 110, 32, 117, 110, 104, 91, 105, 100, 101, 93, 32, 118, 32, 118, 105, 32, 118, 105, 117, 91, 115, 97, 103, 101, 93, 32, 119, 97, 91, 108, 108, 93, 32, 119, 105, 110, 112, 91, 111, 115, 93, 32, 119, 113, 32, 119, 118, 91, 105, 109, 105, 110, 102, 111, 93, 32, 120, 109, 101, 32, 120, 110, 111, 114, 101, 109, 101, 110, 117, 32, 121, 91, 97, 110, 107, 93, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 108, 91, 108, 93, 32, 97, 114, 103, 103, 91, 108, 111, 98, 97, 108, 93, 32, 98, 97, 100, 91, 100, 93, 32, 98, 108, 91, 97, 115, 116, 93, 32, 98, 114, 32, 98, 114, 111, 91, 119, 115, 101, 93, 32, 98, 117, 102, 102, 101, 114, 115, 32, 99, 97, 100, 100, 98, 91, 117, 102, 102, 101, 114, 93, 32, 99, 99, 32, 99, 102, 105, 114, 91, 115, 116, 93, 32, 99, 104, 100, 91, 105, 114, 93, 32, 99, 108, 111, 91, 115, 101, 93, 32, 99, 110, 91, 101, 120, 116, 93, 32, 99, 111, 108, 91, 100, 101, 114, 93, 32, 99, 111, 110, 32, 99, 112, 102, 91, 105, 108, 101, 93, 32, 99, 115, 116, 97, 103, 32, 100, 101, 98, 117, 103, 103, 91, 114, 101, 101, 100, 121, 93, 32, 100, 101, 108, 109, 91, 97, 114, 107, 115, 93, 32, 100, 105, 102, 102, 112, 32, 100, 105, 102, 102, 117, 91, 112, 100, 97, 116, 101, 93, 32, 100, 111, 32, 101, 32, 101, 99, 104, 111, 110, 32, 101, 110, 32, 101, 110, 100, 116, 91, 114, 121, 93, 32, 102, 32, 102, 105, 110, 32, 102, 111, 91, 108, 100, 93, 32, 102, 117, 32, 103, 114, 91, 101, 112, 93, 32, 104, 91, 101, 108, 112, 93, 32, 104, 105, 115, 91, 116, 111, 114, 121, 93, 32, 105, 108, 91, 105, 115, 116, 93, 32, 105, 115, 112, 91, 108, 105, 116, 93, 32, 107, 101, 101, 112, 97, 108, 116, 32, 108, 97, 100, 100, 98, 91, 117, 102, 102, 101, 114, 93, 32, 108, 97, 116, 32, 108, 99, 115, 32, 108, 102, 91, 105, 108, 101, 93, 32, 108, 103, 114, 101, 112, 97, 91, 100, 100, 93, 32, 108, 109, 97, 107, 91, 101, 93, 32, 108, 78, 91, 101, 120, 116, 93, 32, 108, 111, 97, 100, 107, 32, 108, 111, 108, 91, 100, 101, 114, 93, 32, 108, 116, 91, 97, 103, 93, 32, 108, 119, 91, 105, 110, 100, 111, 119, 93, 32, 109, 97, 116, 91, 99, 104, 93, 32, 109, 107, 100, 105, 114, 32, 109, 107, 118, 91, 105, 109, 114, 99, 93, 32, 109, 122, 102, 91, 105, 108, 101, 93, 32, 110, 98, 115, 91, 116, 97, 114, 116, 93, 32, 110, 109, 97, 112, 99, 91, 108, 101, 97, 114, 93, 32, 111, 108, 91, 100, 102, 105, 108, 101, 115, 93, 32, 112, 32, 112, 101, 114, 108, 100, 91, 111, 93, 32, 112, 114, 101, 91, 115, 101, 114, 118, 101, 93, 32, 112, 114, 111, 102, 91, 105, 108, 101, 93, 32, 112, 116, 106, 91, 117, 109, 112, 93, 32, 112, 116, 112, 91, 114, 101, 118, 105, 111, 117, 115, 93, 32, 112, 121, 51, 32, 113, 91, 117, 105, 116, 93, 32, 114, 101, 99, 91, 111, 118, 101, 114, 93, 32, 114, 101, 103, 91, 105, 115, 116, 101, 114, 115, 93, 32, 114, 105, 91, 103, 104, 116, 93, 32, 114, 117, 110, 100, 111, 32, 115, 97, 118, 91, 101, 97, 115, 93, 32, 115, 98, 78, 91, 101, 120, 116, 93, 32, 115, 99, 114, 105, 112, 91, 116, 110, 97, 109, 101, 115, 93, 32, 115, 101, 116, 108, 91, 111, 99, 97, 108, 93, 32, 115, 105, 103, 110, 32, 115, 109, 91, 97, 103, 105, 99, 93, 32, 115, 110, 105, 91, 102, 102, 93, 32, 115, 111, 114, 91, 116, 93, 32, 115, 112, 101, 108, 108, 114, 91, 101, 112, 97, 108, 108, 93, 32, 115, 116, 32, 115, 116, 97, 114, 116, 114, 91, 101, 112, 108, 97, 99, 101, 93, 32, 115, 117, 110, 109, 101, 32, 115, 121, 32, 116, 32, 116, 97, 98, 101, 91, 100, 105, 116, 93, 32, 116, 97, 98, 78, 32, 116, 97, 98, 112, 91, 114, 101, 118, 105, 111, 117, 115, 93, 32, 116, 99, 91, 108, 93, 32, 116, 104, 91, 114, 111, 119, 93, 32, 116, 110, 32, 116, 111, 91, 112, 108, 101, 102, 116, 93, 32, 116, 115, 91, 101, 108, 101, 99, 116, 93, 32, 117, 110, 97, 91, 98, 98, 114, 101, 118, 105, 97, 116, 101, 93, 32, 117, 110, 108, 32, 118, 101, 32, 118, 105, 101, 91, 119, 93, 32, 118, 109, 97, 112, 99, 91, 108, 101, 97, 114, 93, 32, 119, 104, 91, 105, 108, 101, 93, 32, 119, 105, 110, 91, 115, 105, 122, 101, 93, 32, 119, 113, 97, 91, 108, 108, 93, 32, 120, 32, 120, 109, 101, 110, 117, 32, 120, 116, 101, 114, 109, 32, 101, 114, 114, 111, 114, 109, 115, 103, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 114, 32, 97, 114, 103, 108, 91, 111, 99, 97, 108, 93, 32, 98, 97, 91, 108, 108, 93, 32, 98, 109, 91, 111, 100, 105, 102, 105, 101, 100, 93, 32, 98, 114, 101, 97, 91, 107, 93, 32, 98, 114, 111, 119, 115, 101, 115, 101, 116, 32, 98, 117, 110, 91, 108, 111, 97, 100, 93, 32, 99, 97, 100, 91, 100, 101, 120, 112, 114, 93, 32, 99, 99, 108, 91, 111, 115, 101, 93, 32, 99, 103, 101, 116, 98, 91, 117, 102, 102, 101, 114, 93, 32, 99, 104, 101, 91, 99, 107, 112, 97, 116, 104, 93, 32, 99, 109, 97, 112, 99, 91, 108, 101, 97, 114, 93, 32, 99, 78, 91, 101, 120, 116, 93, 32, 99, 111, 108, 111, 91, 114, 115, 99, 104, 101, 109, 101, 93, 32, 99, 111, 110, 102, 91, 105, 114, 109, 93, 32, 99, 112, 91, 114, 101, 118, 105, 111, 117, 115, 93, 32, 99, 117, 110, 97, 91, 98, 98, 114, 101, 118, 93, 32, 100, 101, 108, 32, 100, 105, 32, 100, 105, 102, 102, 112, 97, 116, 99, 104, 32, 100, 105, 103, 32, 100, 111, 97, 117, 32, 101, 97, 32, 101, 91, 100, 105, 116, 93, 32, 101, 110, 100, 102, 32, 101, 110, 100, 119, 91, 104, 105, 108, 101, 93, 32, 102, 91, 105, 108, 101, 93, 32, 102, 105, 110, 97, 91, 108, 108, 121, 93, 32, 102, 111, 108, 100, 99, 91, 108, 111, 115, 101, 93, 32, 102, 117, 110, 32, 103, 114, 101, 112, 97, 91, 100, 100, 93, 32, 104, 101, 108, 112, 102, 91, 105, 110, 100, 93, 32, 105, 32, 105, 109, 97, 112, 99, 91, 108, 101, 97, 114, 93, 32, 105, 117, 110, 97, 91, 98, 98, 114, 101, 118, 93, 32, 107, 101, 101, 112, 106, 91, 117, 109, 112, 115, 93, 32, 108, 97, 100, 91, 100, 101, 120, 112, 114, 93, 32, 108, 97, 116, 101, 114, 32, 108, 99, 115, 99, 111, 112, 101, 32, 108, 102, 105, 114, 91, 115, 116, 93, 32, 108, 104, 91, 101, 108, 112, 103, 114, 101, 112, 93, 32, 108, 109, 97, 112, 99, 91, 108, 101, 97, 114, 93, 32, 108, 110, 102, 32, 108, 111, 97, 100, 107, 101, 121, 109, 97, 112, 32, 108, 111, 112, 91, 101, 110, 93, 32, 108, 117, 97, 32, 109, 97, 32, 109, 101, 110, 117, 116, 32, 109, 107, 91, 101, 120, 114, 99, 93, 32, 109, 111, 32, 109, 122, 91, 115, 99, 104, 101, 109, 101, 93, 32, 110, 101, 32, 110, 111, 97, 32, 111, 109, 97, 112, 99, 91, 108, 101, 97, 114, 93, 32, 80, 32, 112, 111, 91, 112, 93, 32, 112, 114, 101, 118, 91, 105, 111, 117, 115, 93, 32, 112, 114, 111, 109, 112, 116, 102, 91, 105, 110, 100, 93, 32, 112, 116, 108, 91, 97, 115, 116, 93, 32, 112, 116, 114, 91, 101, 119, 105, 110, 100, 93, 32, 112, 121, 102, 91, 105, 108, 101, 93, 32, 113, 117, 105, 116, 97, 91, 108, 108, 93, 32, 114, 101, 100, 32, 82, 101, 110, 32, 114, 105, 103, 104, 116, 98, 91, 101, 108, 111, 119, 93, 32, 114, 117, 91, 110, 116, 105, 109, 101, 93, 32, 115, 98, 97, 91, 108, 108, 93, 32, 115, 98, 112, 91, 114, 101, 118, 105, 111, 117, 115, 93, 32, 115, 99, 115, 32, 115, 102, 91, 105, 110, 100, 93, 32, 115, 105, 108, 91, 101, 110, 116, 93, 32, 115, 109, 91, 97, 112, 93, 32, 115, 110, 111, 91, 109, 97, 103, 105, 99, 93, 32, 115, 111, 91, 117, 114, 99, 101, 93, 32, 115, 112, 101, 108, 108, 117, 91, 110, 100, 111, 93, 32, 115, 116, 97, 91, 103, 93, 32, 115, 116, 106, 91, 117, 109, 112, 93, 32, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 60, 122, 91, 45, 43, 94, 46, 61, 93, 92, 61, 34, 10, 10, 34, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 115, 32, 97, 114, 101, 32, 99, 97, 117, 103, 104, 116, 32, 111, 110, 108, 121, 32, 119, 104, 101, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 105, 110, 32, 97, 32, 118, 105, 109, 83, 101, 116, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 99, 100, 32, 97, 109, 98, 105, 119, 105, 100, 116, 104, 32, 97, 114, 97, 98, 105, 99, 115, 104, 97, 112, 101, 32, 97, 117, 116, 111, 119, 114, 105, 116, 101, 97, 108, 108, 32, 98, 97, 99, 107, 117, 112, 100, 105, 114, 32, 98, 100, 108, 97, 121, 32, 98, 105, 110, 97, 114, 121, 32, 98, 114, 101, 97, 107, 97, 116, 32, 98, 117, 102, 104, 105, 100, 100, 101, 110, 32, 99, 100, 32, 99, 105, 32, 99, 105, 110, 119, 32, 99, 111, 32, 99, 111, 109, 109, 101, 110, 116, 115, 116, 114, 105, 110, 103, 32, 99, 111, 110, 102, 105, 114, 109, 32, 99, 112, 111, 112, 116, 105, 111, 110, 115, 32, 99, 115, 99, 111, 112, 101, 114, 101, 108, 97, 116, 105, 118, 101, 32, 99, 115, 114, 101, 32, 99, 117, 114, 115, 111, 114, 99, 111, 108, 117, 109, 110, 32, 100, 101, 108, 99, 111, 109, 98, 105, 110, 101, 32, 100, 105, 102, 102, 111, 112, 116, 32, 101, 97, 32, 101, 102, 109, 32, 101, 112, 32, 101, 116, 32, 102, 100, 99, 32, 102, 100, 111, 32, 102, 102, 115, 32, 102, 107, 32, 102, 111, 108, 100, 99, 111, 108, 117, 109, 110, 32, 102, 111, 108, 100, 109, 101, 116, 104, 111, 100, 32, 102, 111, 114, 109, 97, 116, 111, 112, 116, 105, 111, 110, 115, 32, 103, 100, 32, 103, 111, 32, 103, 117, 105, 102, 111, 110, 116, 32, 103, 117, 105, 116, 97, 98, 116, 111, 111, 108, 116, 105, 112, 32, 104, 105, 100, 32, 104, 107, 112, 32, 105, 99, 111, 110, 115, 116, 114, 105, 110, 103, 32, 105, 109, 100, 32, 105, 110, 99, 108, 117, 100, 101, 32, 105, 110, 101, 120, 32, 105, 115, 105, 32, 106, 115, 32, 107, 112, 32, 108, 105, 110, 101, 98, 114, 101, 97, 107, 32, 108, 109, 32, 108, 122, 32, 109, 97, 116, 99, 104, 112, 97, 105, 114, 115, 32, 109, 97, 120, 109, 101, 109, 116, 111, 116, 32, 109, 107, 115, 112, 101, 108, 108, 109, 101, 109, 32, 109, 111, 100, 32, 109, 111, 117, 115, 101, 102, 32, 109, 111, 117, 115, 101, 116, 32, 110, 102, 32, 111, 102, 116, 32, 112, 97, 32, 112, 97, 116, 104, 32, 112, 104, 101, 97, 100, 101, 114, 32, 112, 114, 101, 118, 105, 101, 119, 104, 101, 105, 103, 104, 116, 32, 112, 114, 105, 110, 116, 109, 98, 99, 104, 97, 114, 115, 101, 116, 32, 112, 118, 119, 32, 114, 101, 109, 97, 112, 32, 114, 108, 32, 114, 117, 102, 32, 115, 99, 32, 115, 99, 114, 111, 108, 108, 111, 112, 116, 32, 115, 101, 108, 101, 99, 116, 109, 111, 100, 101, 32, 115, 104, 101, 108, 108, 112, 105, 112, 101, 32, 115, 104, 101, 108, 108, 120, 113, 117, 111, 116, 101, 32, 115, 104, 111, 119, 99, 109, 100, 32, 115, 105, 100, 101, 115, 99, 114, 111, 108, 108, 32, 115, 109, 97, 114, 116, 105, 110, 100, 101, 110, 116, 32, 115, 111, 108, 32, 115, 112, 101, 108, 108, 115, 117, 103, 103, 101, 115, 116, 32, 115, 114, 32, 115, 116, 97, 108, 32, 115, 117, 97, 32, 115, 119, 102, 32, 115, 121, 110, 116, 97, 120, 32, 116, 97, 103, 108, 101, 110, 103, 116, 104, 32, 116, 98, 105, 100, 105, 32, 116, 101, 114, 115, 101, 32, 116, 105, 108, 100, 101, 111, 112, 32, 116, 108, 32, 116, 112, 109, 32, 116, 116, 105, 109, 101, 111, 117, 116, 108, 101, 110, 32, 116, 116, 121, 109, 111, 117, 115, 101, 32, 117, 100, 102, 32, 117, 110, 100, 111, 114, 101, 108, 111, 97, 100, 32, 118, 98, 115, 32, 118, 105, 32, 118, 111, 112, 32, 119, 99, 109, 32, 119, 104, 105, 99, 104, 119, 114, 97, 112, 32, 119, 105, 108, 100, 105, 103, 110, 111, 114, 101, 32, 119, 105, 110, 97, 108, 116, 107, 101, 121, 115, 32, 119, 105, 110, 109, 105, 110, 119, 105, 100, 116, 104, 32, 119, 109, 110, 117, 32, 119, 114, 105, 116, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 105, 32, 97, 109, 98, 119, 32, 97, 114, 105, 32, 97, 119, 32, 98, 97, 99, 107, 117, 112, 101, 120, 116, 32, 98, 101, 118, 97, 108, 32, 98, 105, 111, 115, 107, 32, 98, 114, 107, 32, 98, 117, 102, 108, 105, 115, 116, 101, 100, 32, 99, 100, 112, 97, 116, 104, 32, 99, 105, 110, 32, 99, 105, 110, 119, 111, 114, 100, 115, 32, 99, 111, 99, 117, 32, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 99, 111, 110, 115, 107, 32, 99, 112, 116, 32, 99, 115, 99, 111, 112, 101, 116, 97, 103, 32, 99, 115, 116, 32, 99, 117, 114, 115, 111, 114, 108, 105, 110, 101, 32, 100, 101, 120, 32, 100, 105, 103, 114, 97, 112, 104, 32, 101, 97, 100, 32, 101, 105, 32, 101, 113, 117, 97, 108, 97, 108, 119, 97, 121, 115, 32, 101, 118, 101, 110, 116, 105, 103, 110, 111, 114, 101, 32, 102, 100, 101, 32, 102, 100, 116, 32, 102, 105, 108, 101, 101, 110, 99, 111, 100, 105, 110, 103, 32, 102, 107, 109, 97, 112, 32, 102, 111, 108, 100, 101, 110, 97, 98, 108, 101, 32, 102, 111, 108, 100, 109, 105, 110, 108, 105, 110, 101, 115, 32, 102, 111, 114, 109, 97, 116, 112, 114, 103, 32, 103, 100, 101, 102, 97, 117, 108, 116, 32, 103, 112, 32, 103, 117, 105, 102, 111, 110, 116, 115, 101, 116, 32, 104, 101, 108, 112, 102, 105, 108, 101, 32, 104, 105, 100, 100, 101, 110, 32, 104, 108, 32, 105, 103, 110, 111, 114, 101, 99, 97, 115, 101, 32, 105, 109, 100, 105, 115, 97, 98, 108, 101, 32, 105, 110, 99, 108, 117, 100, 101, 101, 120, 112, 114, 32, 105, 110, 102, 32, 105, 115, 105, 100, 101, 110, 116, 32, 107, 101, 121, 32, 108, 97, 110, 103, 109, 97, 112, 32, 108, 105, 110, 101, 115, 32, 108, 109, 97, 112, 32, 109, 97, 32, 109, 97, 116, 99, 104, 116, 105, 109, 101, 32, 109, 99, 111, 32, 109, 108, 32, 109, 111, 100, 101, 108, 105, 110, 101, 32, 109, 111, 117, 115, 101, 102, 111, 99, 117, 115, 32, 109, 111, 117, 115, 101, 116, 105, 109, 101, 32, 110, 114, 102, 111, 114, 109, 97, 116, 115, 32, 111, 102, 117, 32, 112, 97, 114, 97, 32, 112, 100, 101, 118, 32, 112, 105, 32, 112, 114, 101, 118, 105, 101, 119, 119, 105, 110, 100, 111, 119, 32, 112, 114, 105, 110, 116, 109, 98, 102, 111, 110, 116, 32, 113, 101, 32, 114, 101, 112, 111, 114, 116, 32, 114, 108, 99, 32, 114, 117, 108, 101, 114, 32, 115, 99, 98, 32, 115, 99, 115, 32, 115, 101, 115, 115, 105, 111, 110, 111, 112, 116, 105, 111, 110, 115, 32, 115, 104, 101, 108, 108, 113, 117, 111, 116, 101, 32, 115, 104, 105, 102, 116, 114, 111, 117, 110, 100, 32, 115, 104, 111, 119, 102, 117, 108, 108, 116, 97, 103, 32, 115, 105, 100, 101, 115, 99, 114, 111, 108, 108, 111, 102, 102, 32, 115, 109, 97, 114, 116, 116, 97, 98, 32, 115, 112, 32, 115, 112, 102, 32, 115, 114, 114, 32, 115, 116, 97, 114, 116, 111, 102, 108, 105, 110, 101, 32, 115, 117, 102, 102, 105, 120, 101, 115, 32, 115, 119, 105, 116, 99, 104, 98, 117, 102, 32, 116, 97, 32, 116, 97, 103, 114, 101, 108, 97, 116, 105, 118, 101, 32, 116, 98, 105, 115, 32, 116, 101, 120, 116, 97, 117, 116, 111, 32, 116, 105, 109, 101, 111, 117, 116, 32, 116, 109, 32, 116, 114, 32, 116, 116, 109, 32, 116, 116, 121, 115, 99, 114, 111, 108, 108, 32, 117, 100, 105, 114, 32, 117, 112, 100, 97, 116, 101, 99, 111, 117, 110, 116, 32, 118, 100, 105, 114, 32, 118, 105, 101, 119, 100, 105, 114, 32, 119, 97, 32, 119, 100, 32, 119, 105, 32, 119, 105, 108, 100, 105, 103, 110, 111, 114, 101, 99, 97, 115, 101, 32, 119, 105, 110, 100, 111, 119, 32, 119, 105, 110, 119, 105, 100, 116, 104, 32, 119, 109, 119, 32, 119, 114, 105, 116, 101, 97, 110, 121, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 107, 109, 32, 97, 110, 116, 105, 32, 97, 114, 115, 104, 97, 112, 101, 32, 97, 119, 97, 32, 98, 97, 99, 107, 117, 112, 115, 107, 105, 112, 32, 98, 101, 120, 32, 98, 105, 111, 115, 107, 101, 121, 32, 98, 114, 111, 119, 115, 101, 100, 105, 114, 32, 98, 117, 102, 116, 121, 112, 101, 32, 99, 101, 100, 105, 116, 32, 99, 105, 110, 100, 101, 110, 116, 32, 99, 108, 105, 112, 98, 111, 97, 114, 100, 32, 99, 111, 108, 101, 32, 99, 111, 109, 112, 108, 101, 116, 101, 32, 99, 111, 110, 115, 107, 101, 121, 32, 99, 114, 98, 32, 99, 115, 99, 111, 112, 101, 116, 97, 103, 111, 114, 100, 101, 114, 32, 99, 115, 116, 111, 32, 99, 119, 104, 32, 100, 103, 32, 100, 105, 112, 32, 101, 97, 100, 105, 114, 101, 99, 116, 105, 111, 110, 32, 101, 107, 32, 101, 113, 117, 97, 108, 112, 114, 103, 32, 101, 120, 32, 102, 100, 105, 32, 102, 101, 110, 32, 102, 105, 108, 101, 101, 110, 99, 111, 100, 105, 110, 103, 115, 32, 102, 108, 112, 32, 102, 111, 108, 100, 101, 120, 112, 114, 32, 102, 111, 108, 100, 110, 101, 115, 116, 109, 97, 120, 32, 102, 112, 32, 103, 102, 109, 32, 103, 114, 101, 112, 102, 111, 114, 109, 97, 116, 32, 103, 117, 105, 102, 111, 110, 116, 119, 105, 100, 101, 32, 104, 101, 108, 112, 104, 101, 105, 103, 104, 116, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 32, 104, 108, 103, 32, 105, 109, 32, 105, 109, 105, 32, 105, 110, 99, 115, 101, 97, 114, 99, 104, 32, 105, 110, 102, 101, 114, 99, 97, 115, 101, 32, 105, 115, 107, 32, 107, 101, 121, 109, 97, 112, 32, 108, 97, 110, 103, 109, 101, 110, 117, 32, 108, 105, 110, 101, 115, 112, 97, 99, 101, 32, 108, 111, 97, 100, 112, 108, 117, 103, 105, 110, 115, 32, 109, 97, 99, 97, 116, 115, 117, 105, 32, 109, 97, 120, 99, 111, 109, 98, 105, 110, 101, 32, 109, 101, 102, 32, 109, 108, 115, 32, 109, 111, 100, 101, 108, 105, 110, 101, 115, 32, 109, 111, 117, 115, 101, 104, 105, 100, 101, 32, 109, 112, 32, 110, 117, 32, 111, 109, 110, 105, 102, 117, 110, 99, 32, 112, 97, 114, 97, 103, 114, 97, 112, 104, 115, 32, 112, 101, 110, 99, 32, 112, 109, 32, 112, 114, 105, 110, 116, 100, 101, 118, 105, 99, 101, 32, 112, 114, 105, 110, 116, 111, 112, 116, 105, 111, 110, 115, 32, 113, 117, 111, 116, 101, 101, 115, 99, 97, 112, 101, 32, 114, 101, 115, 116, 111, 114, 101, 115, 99, 114, 101, 101, 110, 32, 114, 110, 117, 32, 114, 117, 108, 101, 114, 102, 111, 114, 109, 97, 116, 32, 115, 99, 114, 32, 115, 101, 99, 116, 32, 115, 102, 116, 32, 115, 104, 101, 108, 108, 114, 101, 100, 105, 114, 32, 115, 104, 105, 102, 116, 119, 105, 100, 116, 104, 32, 115, 104, 111, 119, 109, 97, 116, 99, 104, 32, 115, 105, 115, 111, 32, 115, 109, 99, 32, 115, 112, 99, 32, 115, 112, 108, 32, 115, 115, 32, 115, 116, 97, 116, 117, 115, 108, 105, 110, 101, 32, 115, 117, 102, 102, 105, 120, 101, 115, 97, 100, 100, 32, 115, 119, 115, 32, 116, 97, 98, 108, 105, 110, 101, 32, 116, 97, 103, 115, 32, 116, 98, 115, 32, 116, 101, 120, 116, 109, 111, 100, 101, 32, 116, 105, 109, 101, 111, 117, 116, 108, 101, 110, 32, 116, 111, 32, 116, 115, 32, 116, 116, 121, 32, 116, 116, 121, 116, 121, 112, 101, 32, 117, 108, 32, 117, 112, 100, 97, 116, 101, 116, 105, 109, 101, 32, 118, 101, 32, 118, 105, 101, 119, 111, 112, 116, 105, 111, 110, 115, 32, 119, 97, 107, 32, 119, 101, 105, 114, 100, 105, 110, 118, 101, 114, 116, 32, 119, 105, 99, 32, 119, 105, 108, 100, 109, 101, 110, 117, 32, 119, 105, 110, 102, 105, 120, 104, 101, 105, 103, 104, 116, 32, 119, 105, 118, 32, 119, 111, 112, 32, 119, 114, 105, 116, 101, 98, 97, 99, 107, 117, 112, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 108, 32, 97, 110, 116, 105, 97, 108, 105, 97, 115, 32, 97, 117, 116, 111, 99, 104, 100, 105, 114, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 98, 97, 108, 108, 111, 111, 110, 100, 101, 108, 97, 121, 32, 98, 101, 120, 112, 114, 32, 98, 107, 32, 98, 115, 32, 99, 97, 115, 101, 109, 97, 112, 32, 99, 102, 32, 99, 105, 110, 107, 32, 99, 109, 100, 104, 101, 105, 103, 104, 116, 32, 99, 111, 108, 111, 114, 99, 111, 108, 117, 109, 110, 32, 99, 111, 109, 112, 108, 101, 116, 101, 102, 117, 110, 99, 32, 99, 111, 112, 121, 105, 110, 100, 101, 110, 116, 32, 99, 114, 121, 112, 116, 109, 101, 116, 104, 111, 100, 32, 99, 115, 99, 111, 112, 101, 118, 101, 114, 98, 111, 115, 101, 32, 99, 115, 118, 101, 114, 98, 32, 100, 101, 98, 117, 103, 32, 100, 105, 99, 116, 32, 100, 105, 114, 32, 101, 98, 32, 101, 110, 99, 32, 101, 114, 114, 111, 114, 98, 101, 108, 108, 115, 32, 101, 120, 112, 97, 110, 100, 116, 97, 98, 32, 102, 100, 108, 32, 102, 101, 110, 99, 32, 102, 105, 108, 101, 102, 111, 114, 109, 97, 116, 32, 102, 109, 108, 32, 102, 111, 108, 100, 105, 103, 110, 111, 114, 101, 32, 102, 111, 108, 100, 111, 112, 101, 110, 32, 102, 115, 32, 103, 102, 110, 32, 103, 114, 101, 112, 112, 114, 103, 32, 103, 117, 105, 104, 101, 97, 100, 114, 111, 111, 109, 32, 104, 101, 108, 112, 108, 97, 110, 103, 32, 104, 105, 115, 116, 111, 114, 121, 32, 104, 108, 115, 32, 105, 109, 97, 99, 116, 105, 118, 97, 116, 101, 107, 101, 121, 32, 105, 109, 105, 110, 115, 101, 114, 116, 32, 105, 110, 100, 101, 32, 105, 110, 115, 101, 114, 116, 109, 111, 100, 101, 32, 105, 115, 107, 101, 121, 119, 111, 114, 100, 32, 107, 101, 121, 109, 111, 100, 101, 108, 32, 108, 97, 115, 116, 115, 116, 97, 116, 117, 115, 32, 108, 105, 115, 112, 32, 108, 112, 108, 32, 109, 97, 103, 105, 99, 32, 109, 97, 120, 102, 117, 110, 99, 100, 101, 112, 116, 104, 32, 109, 101, 110, 117, 105, 116, 101, 109, 115, 32, 109, 109, 32, 109, 111, 100, 105, 102, 105, 97, 98, 108, 101, 32, 109, 111, 117, 115, 101, 109, 32, 109, 112, 115, 32, 110, 117, 109, 98, 101, 114, 32, 111, 112, 101, 110, 100, 101, 118, 105, 99, 101, 32, 112, 97, 115, 116, 101, 32, 112, 101, 120, 32, 112, 109, 98, 99, 115, 32, 112, 114, 105, 110, 116, 101, 110, 99, 111, 100, 105, 110, 103, 32, 112, 114, 111, 109, 112, 116, 32, 114, 100, 116, 32, 114, 101, 118, 105, 110, 115, 32, 114, 111, 32, 114, 117, 110, 116, 105, 109, 101, 112, 97, 116, 104, 32, 115, 99, 114, 111, 108, 108, 32, 115, 101, 99, 116, 105, 111, 110, 115, 32, 115, 104, 32, 115, 104, 101, 108, 108, 115, 108, 97, 115, 104, 32, 115, 104, 109, 32, 115, 104, 111, 119, 109, 111, 100, 101, 32, 115, 106, 32, 115, 109, 100, 32, 115, 112, 101, 108, 108, 32, 115, 112, 108, 105, 116, 98, 101, 108, 111, 119, 32, 115, 115, 108, 32, 115, 116, 108, 32, 115, 119, 32, 115, 120, 101, 32, 116, 97, 98, 112, 97, 103, 101, 109, 97, 120, 32, 116, 97, 103, 115, 116, 97, 99, 107, 32, 116, 101, 110, 99, 32, 116, 101, 120, 116, 119, 105, 100, 116, 104, 32, 116, 105, 116, 108, 101, 32, 116, 111, 111, 108, 98, 97, 114, 32, 116, 115, 108, 32, 116, 116, 121, 98, 117, 105, 108, 116, 105, 110, 32, 116, 119, 32, 117, 110, 100, 111, 100, 105, 114, 32, 117, 114, 32, 118, 101, 114, 98, 111, 115, 101, 32, 118, 105, 109, 105, 110, 102, 111, 32, 119, 97, 114, 110, 32, 119, 102, 104, 32, 119, 105, 103, 32, 119, 105, 108, 100, 109, 111, 100, 101, 32, 119, 105, 110, 102, 105, 120, 119, 105, 100, 116, 104, 32, 119, 105, 119, 32, 119, 114, 97, 112, 32, 119, 114, 105, 116, 101, 100, 101, 108, 97, 121, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 108, 101, 112, 104, 32, 97, 114, 32, 97, 117, 116, 111, 105, 110, 100, 101, 110, 116, 32, 98, 97, 99, 107, 115, 112, 97, 99, 101, 32, 98, 97, 108, 108, 111, 111, 110, 101, 118, 97, 108, 32, 98, 103, 32, 98, 107, 99, 32, 98, 115, 100, 105, 114, 32, 99, 98, 32, 99, 102, 117, 32, 99, 105, 110, 107, 101, 121, 115, 32, 99, 109, 100, 119, 105, 110, 104, 101, 105, 103, 104, 116, 32, 99, 111, 108, 117, 109, 110, 115, 32, 99, 111, 109, 112, 108, 101, 116, 101, 111, 112, 116, 32, 99, 111, 116, 32, 99, 115, 99, 111, 112, 101, 112, 97, 116, 104, 99, 111, 109, 112, 32, 99, 115, 112, 99, 32, 99, 117, 99, 32, 100, 101, 99, 111, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 101, 100, 32, 101, 110, 99, 111, 100, 105, 110, 103, 32, 101, 114, 114, 111, 114, 102, 105, 108, 101, 32, 101, 120, 114, 99, 32, 102, 100, 108, 115, 32, 102, 101, 110, 99, 115, 32, 102, 105, 108, 101, 102, 111, 114, 109, 97, 116, 115, 32, 102, 109, 114, 32, 102, 111, 108, 100, 108, 101, 118, 101, 108, 32, 102, 111, 108, 100, 116, 101, 120, 116, 32, 102, 115, 121, 110, 99, 32, 103, 102, 115, 32, 103, 116, 108, 32, 103, 117, 105, 111, 112, 116, 105, 111, 110, 115, 32, 104, 102, 32, 104, 107, 32, 104, 108, 115, 101, 97, 114, 99, 104, 32, 105, 109, 97, 107, 32, 105, 109, 115, 32, 105, 110, 100, 101, 110, 116, 101, 120, 112, 114, 32, 105, 115, 32, 105, 115, 112, 32, 107, 101, 121, 119, 111, 114, 100, 112, 114, 103, 32, 108, 97, 122, 121, 114, 101, 100, 114, 97, 119, 32, 108, 105, 115, 112, 119, 111, 114, 100, 115, 32, 108, 115, 32, 109, 97, 107, 101, 101, 102, 32, 109, 97, 120, 109, 97, 112, 100, 101, 112, 116, 104, 32, 109, 102, 100, 32, 109, 109, 100, 32, 109, 111, 100, 105, 102, 105, 101, 100, 32, 109, 111, 117, 115, 101, 109, 111, 100, 101, 108, 32, 109, 115, 109, 32, 110, 117, 109, 98, 101, 114, 119, 105, 100, 116, 104, 32, 111, 112, 101, 114, 97, 116, 111, 114, 102, 117, 110, 99, 32, 112, 97, 115, 116, 101, 116, 111, 103, 103, 108, 101, 32, 112, 101, 120, 112, 114, 32, 112, 109, 98, 102, 110, 32, 112, 114, 105, 110, 116, 101, 120, 112, 114, 32, 112, 116, 32, 114, 101, 97, 100, 111, 110, 108, 121, 32, 114, 105, 32, 114, 115, 32, 115, 98, 32, 115, 99, 114, 111, 108, 108, 98, 105, 110, 100, 32, 115, 101, 99, 117, 114, 101, 32, 115, 104, 99, 102, 32, 115, 104, 101, 108, 108, 116, 101, 109, 112, 32, 115, 104, 111, 114, 116, 109, 101, 115, 115, 32, 115, 104, 111, 119, 116, 97, 98, 108, 105, 110, 101, 32, 115, 108, 109, 32, 115, 110, 32, 115, 112, 101, 108, 108, 99, 97, 112, 99, 104, 101, 99, 107, 32, 115, 112, 108, 105, 116, 114, 105, 103, 104, 116, 32, 115, 115, 111, 112, 32, 115, 116, 109, 112, 32, 115, 119, 97, 112, 102, 105, 108, 101, 32, 115, 120, 113, 32, 116, 97, 98, 115, 116, 111, 112, 32, 116, 97, 108, 32, 116, 101, 114, 109, 32, 116, 102, 32, 116, 105, 116, 108, 101, 108, 101, 110, 32, 116, 111, 111, 108, 98, 97, 114, 105, 99, 111, 110, 115, 105, 122, 101, 32, 116, 115, 114, 32, 116, 116, 121, 102, 97, 115, 116, 32, 116, 120, 32, 117, 110, 100, 111, 102, 105, 108, 101, 32, 117, 116, 32, 118, 101, 114, 98, 111, 115, 101, 102, 105, 108, 101, 32, 118, 105, 114, 116, 117, 97, 108, 101, 100, 105, 116, 32, 119, 98, 32, 119, 102, 119, 32, 119, 105, 108, 100, 99, 104, 97, 114, 32, 119, 105, 108, 100, 111, 112, 116, 105, 111, 110, 115, 32, 119, 105, 110, 104, 101, 105, 103, 104, 116, 32, 119, 109, 32, 119, 114, 97, 112, 109, 97, 114, 103, 105, 110, 32, 119, 115, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 108, 108, 111, 119, 114, 101, 118, 105, 110, 115, 32, 97, 114, 97, 98, 32, 97, 117, 116, 111, 114, 101, 97, 100, 32, 98, 97, 99, 107, 117, 112, 32, 98, 97, 108, 108, 111, 111, 110, 101, 120, 112, 114, 32, 98, 104, 32, 98, 108, 32, 98, 115, 107, 32, 99, 99, 32, 99, 104, 32, 99, 105, 110, 111, 32, 99, 109, 112, 32, 99, 111, 109, 32, 99, 111, 110, 99, 101, 97, 108, 99, 117, 114, 115, 111, 114, 32, 99, 112, 32, 99, 115, 99, 111, 112, 101, 112, 114, 103, 32, 99, 115, 112, 114, 103, 32, 99, 117, 108, 32, 100, 101, 102, 32, 100, 105, 102, 102, 32, 100, 105, 115, 112, 108, 97, 121, 32, 101, 100, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 101, 110, 100, 111, 102, 108, 105, 110, 101, 32, 101, 114, 114, 111, 114, 102, 111, 114, 109, 97, 116, 32, 102, 99, 108, 32, 102, 100, 109, 32, 102, 101, 120, 32, 102, 105, 108, 101, 116, 121, 112, 101, 32, 102, 111, 32, 102, 111, 108, 100, 108, 101, 118, 101, 108, 115, 116, 97, 114, 116, 32, 102, 111, 114, 109, 97, 116, 101, 120, 112, 114, 32, 102, 116, 32, 103, 102, 119, 32, 103, 116, 116, 32, 103, 117, 105, 112, 116, 121, 32, 104, 104, 32, 104, 107, 109, 97, 112, 32, 105, 99, 32, 105, 109, 99, 32, 105, 109, 115, 101, 97, 114, 99, 104, 32, 105, 110, 100, 101, 110, 116, 107, 101, 121, 115, 32, 105, 115, 102, 32, 105, 115, 112, 114, 105, 110, 116, 32, 107, 109, 32, 108, 98, 114, 32, 108, 105, 115, 116, 32, 108, 115, 112, 32, 109, 97, 107, 101, 112, 114, 103, 32, 109, 97, 120, 109, 101, 109, 32, 109, 104, 32, 109, 109, 112, 32, 109, 111, 114, 101, 32, 109, 111, 117, 115, 101, 115, 32, 109, 122, 113, 32, 110, 117, 119, 32, 111, 112, 102, 117, 110, 99, 32, 112, 97, 116, 99, 104, 101, 120, 112, 114, 32, 112, 102, 110, 32, 112, 111, 112, 116, 32, 112, 114, 105, 110, 116, 102, 111, 110, 116, 32, 112, 117, 109, 104, 101, 105, 103, 104, 116, 32, 114, 101, 100, 114, 97, 119, 116, 105, 109, 101, 32, 114, 105, 103, 104, 116, 108, 101, 102, 116, 32, 114, 116, 112, 32, 115, 98, 111, 32, 115, 99, 114, 111, 108, 108, 106, 117, 109, 112, 32, 115, 101, 108, 32, 115, 104, 101, 108, 108, 32, 115, 104, 101, 108, 108, 116, 121, 112, 101, 32, 115, 104, 111, 114, 116, 110, 97, 109, 101, 32, 115, 104, 113, 32, 115, 109, 32, 115, 111, 32, 115, 112, 101, 108, 108, 102, 105, 108, 101, 32, 115, 112, 114, 32, 115, 116, 32, 115, 116, 115, 32, 115, 119, 97, 112, 115, 121, 110, 99, 32, 115, 121, 110, 32, 116, 97, 103, 32, 116, 98, 32, 116, 101, 114, 109, 98, 105, 100, 105, 32, 116, 103, 115, 116, 32, 116, 105, 116, 108, 101, 111, 108, 100, 32, 116, 111, 112, 32, 116, 116, 105, 109, 101, 111, 117, 116, 32, 116, 116, 121, 109, 32, 117, 99, 32, 117, 110, 100, 111, 108, 101, 118, 101, 108, 115, 32, 118, 98, 32, 118, 102, 105, 108, 101, 32, 118, 105, 115, 117, 97, 108, 98, 101, 108, 108, 32, 119, 99, 32, 119, 104, 32, 119, 105, 108, 100, 99, 104, 97, 114, 109, 32, 119, 105, 109, 32, 119, 105, 110, 109, 105, 110, 104, 101, 105, 103, 104, 116, 32, 119, 109, 104, 32, 119, 114, 97, 112, 115, 99, 97, 110, 32, 119, 119, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 108, 116, 107, 101, 121, 109, 97, 112, 32, 97, 114, 97, 98, 105, 99, 32, 97, 117, 116, 111, 119, 114, 105, 116, 101, 32, 98, 97, 99, 107, 117, 112, 99, 111, 112, 121, 32, 98, 100, 105, 114, 32, 98, 105, 110, 32, 98, 111, 109, 98, 32, 98, 116, 32, 99, 99, 118, 32, 99, 104, 97, 114, 99, 111, 110, 118, 101, 114, 116, 32, 99, 105, 110, 111, 112, 116, 105, 111, 110, 115, 32, 99, 109, 115, 32, 99, 111, 109, 109, 101, 110, 116, 115, 32, 99, 111, 110, 99, 101, 97, 108, 108, 101, 118, 101, 108, 32, 99, 112, 111, 32, 99, 115, 99, 111, 112, 101, 113, 117, 105, 99, 107, 102, 105, 120, 32, 99, 115, 113, 102, 32, 99, 117, 114, 115, 111, 114, 98, 105, 110, 100, 32, 100, 101, 102, 105, 110, 101, 32, 100, 105, 102, 102, 101, 120, 112, 114, 32, 100, 121, 32, 101, 102, 32, 101, 111, 108, 32, 101, 115, 99, 107, 101, 121, 115, 32, 102, 99, 115, 32, 102, 100, 110, 32, 102, 102, 32, 102, 105, 108, 108, 99, 104, 97, 114, 115, 32, 102, 111, 108, 100, 99, 108, 111, 115, 101, 32, 102, 111, 108, 100, 109, 97, 114, 107, 101, 114, 32, 102, 111, 114, 109, 97, 116, 108, 105, 115, 116, 112, 97, 116, 32, 103, 99, 114, 32, 103, 104, 114, 32, 103, 117, 105, 99, 117, 114, 115, 111, 114, 32, 103, 117, 105, 116, 97, 98, 108, 97, 98, 101, 108, 32, 104, 105, 32, 104, 107, 109, 97, 112, 112, 32, 105, 99, 111, 110, 32, 105, 109, 99, 109, 100, 108, 105, 110, 101, 32, 105, 110, 99, 32, 105, 110, 100, 107, 32, 105, 115, 102, 110]);
        fileData6.push.apply(fileData6, [97, 109, 101, 32, 106, 111, 105, 110, 115, 112, 97, 99, 101, 115, 32, 107, 109, 112, 32, 108, 99, 115, 32, 108, 105, 115, 116, 99, 104, 97, 114, 115, 32, 108, 119, 32, 109, 97, 116, 32, 109, 97, 120, 109, 101, 109, 112, 97, 116, 116, 101, 114, 110, 32, 109, 105, 115, 32, 109, 109, 116, 32, 109, 111, 117, 115, 101, 32, 109, 111, 117, 115, 101, 115, 104, 97, 112, 101, 32, 109, 122, 113, 117, 97, 110, 116, 117, 109, 32, 111, 100, 101, 118, 32, 111, 115, 102, 105, 108, 101, 116, 121, 112, 101, 32, 112, 97, 116, 99, 104, 109, 111, 100, 101, 32, 112, 104, 32, 112, 114, 101, 115, 101, 114, 118, 101, 105, 110, 100, 101, 110, 116, 32, 112, 114, 105, 110, 116, 104, 101, 97, 100, 101, 114, 32, 112, 118, 104, 32, 114, 101, 108, 97, 116, 105, 118, 101, 110, 117, 109, 98, 101, 114, 32, 114, 105, 103, 104, 116, 108, 101, 102, 116, 99, 109, 100, 32, 114, 117, 32, 115, 98, 114, 32, 115, 99, 114, 111, 108, 108, 111, 102, 102, 32, 115, 101, 108, 101, 99, 116, 105, 111, 110, 32, 115, 104, 101, 108, 108, 99, 109, 100, 102, 108, 97, 103, 32, 115, 104, 101, 108, 108, 120, 101, 115, 99, 97, 112, 101, 32, 115, 104, 111, 119, 98, 114, 101, 97, 107, 32, 115, 105, 32, 115, 109, 97, 114, 116, 99, 97, 115, 101, 32, 115, 111, 102, 116, 116, 97, 98, 115, 116, 111, 112, 32, 115, 112, 101, 108, 108, 108, 97, 110, 103, 32, 115, 112, 115, 32, 115, 116, 97, 32, 115, 117, 32, 115, 119, 98, 32, 115, 121, 110, 109, 97, 120, 99, 111, 108, 32, 116, 97, 103, 98, 115, 101, 97, 114, 99, 104, 32, 116, 98, 105, 32, 116, 101, 114, 109, 101, 110, 99, 111, 100, 105, 110, 103, 32, 116, 104, 101, 115, 97, 117, 114, 117, 115, 32, 116, 105, 116, 108, 101, 115, 116, 114, 105, 110, 103, 32, 10, 10, 34, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 115, 58, 32, 84, 104, 101, 115, 101, 32, 97, 114, 101, 32, 116, 104, 101, 32, 116, 117, 114, 110, 45, 111, 102, 102, 32, 115, 101, 116, 116, 105, 110, 103, 32, 118, 97, 114, 105, 97, 110, 116, 115, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 110, 111, 97, 99, 100, 32, 110, 111, 97, 108, 108, 111, 119, 114, 101, 118, 105, 110, 115, 32, 110, 111, 97, 110, 116, 105, 97, 108, 105, 97, 115, 32, 110, 111, 97, 114, 97, 98, 105, 99, 32, 110, 111, 97, 114, 115, 104, 97, 112, 101, 32, 110, 111, 97, 117, 116, 111, 114, 101, 97, 100, 32, 110, 111, 97, 119, 32, 110, 111, 98, 97, 108, 108, 111, 111, 110, 101, 118, 97, 108, 32, 110, 111, 98, 105, 110, 97, 114, 121, 32, 110, 111, 98, 107, 32, 110, 111, 98, 117, 102, 108, 105, 115, 116, 101, 100, 32, 110, 111, 99, 105, 110, 32, 110, 111, 99, 111, 110, 102, 105, 114, 109, 32, 110, 111, 99, 111, 112, 121, 105, 110, 100, 101, 110, 116, 32, 110, 111, 99, 115, 99, 111, 112, 101, 116, 97, 103, 32, 110, 111, 99, 115, 118, 101, 114, 98, 32, 110, 111, 99, 117, 114, 115, 111, 114, 98, 105, 110, 100, 32, 110, 111, 100, 101, 99, 111, 32, 110, 111, 100, 105, 102, 102, 32, 110, 111, 101, 98, 32, 110, 111, 101, 107, 32, 110, 111, 101, 113, 117, 97, 108, 97, 108, 119, 97, 121, 115, 32, 110, 111, 101, 115, 99, 107, 101, 121, 115, 32, 110, 111, 101, 120, 32, 110, 111, 101, 120, 114, 99, 32, 110, 111, 102, 107, 32, 110, 111, 102, 111, 108, 100, 101, 110, 97, 98, 108, 101, 32, 110, 111, 103, 100, 101, 102, 97, 117, 108, 116, 32, 110, 111, 104, 105, 100, 32, 110, 111, 104, 107, 32, 110, 111, 104, 107, 109, 97, 112, 112, 32, 110, 111, 104, 108, 115, 32, 110, 111, 105, 99, 32, 110, 111, 105, 103, 110, 111, 114, 101, 99, 97, 115, 101, 32, 110, 111, 105, 109, 99, 32, 110, 111, 105, 109, 100, 32, 110, 111, 105, 110, 99, 115, 101, 97, 114, 99, 104, 32, 110, 111, 105, 110, 102, 101, 114, 99, 97, 115, 101, 32, 110, 111, 105, 115, 32, 110, 111, 106, 115, 32, 110, 111, 108, 98, 114, 32, 110, 111, 108, 105, 115, 112, 32, 110, 111, 108, 111, 97, 100, 112, 108, 117, 103, 105, 110, 115, 32, 110, 111, 108, 122, 32, 110, 111, 109, 97, 99, 97, 116, 115, 117, 105, 32, 110, 111, 109, 104, 32, 110, 111, 109, 111, 100, 32, 110, 111, 109, 111, 100, 105, 102, 105, 97, 98, 108, 101, 32, 110, 111, 109, 111, 114, 101, 32, 110, 111, 109, 111, 117, 115, 101, 102, 111, 99, 117, 115, 32, 110, 111, 110, 117, 32, 110, 111, 111, 100, 101, 118, 32, 110, 111, 112, 97, 115, 116, 101, 32, 110, 111, 112, 114, 101, 115, 101, 114, 118, 101, 105, 110, 100, 101, 110, 116, 32, 110, 111, 112, 114, 111, 109, 112, 116, 32, 110, 111, 114, 101, 97, 100, 111, 110, 108, 121, 32, 110, 111, 114, 101, 109, 97, 112, 32, 110, 111, 114, 101, 118, 105, 110, 115, 32, 110, 111, 114, 105, 103, 104, 116, 108, 101, 102, 116, 32, 110, 111, 114, 110, 117, 32, 110, 111, 114, 115, 32, 110, 111, 114, 117, 108, 101, 114, 32, 110, 111, 115, 99, 32, 110, 111, 115, 99, 114, 111, 108, 108, 98, 105, 110, 100, 32, 110, 111, 115, 101, 99, 117, 114, 101, 32, 110, 111, 115, 104, 101, 108, 108, 115, 108, 97, 115, 104, 32, 110, 111, 115, 104, 105, 102, 116, 114, 111, 117, 110, 100, 32, 110, 111, 115, 104, 111, 119, 99, 109, 100, 32, 110, 111, 115, 104, 111, 119, 109, 97, 116, 99, 104, 32, 110, 111, 115, 105, 32, 110, 111, 115, 109, 97, 114, 116, 99, 97, 115, 101, 32, 110, 111, 115, 109, 97, 114, 116, 116, 97, 98, 32, 110, 111, 115, 110, 32, 110, 111, 115, 112, 101, 108, 108, 32, 110, 111, 115, 112, 108, 105, 116, 114, 105, 103, 104, 116, 32, 110, 111, 115, 114, 32, 110, 111, 115, 116, 97, 32, 110, 111, 115, 116, 109, 112, 32, 110, 111, 115, 119, 102, 32, 110, 111, 116, 97, 103, 98, 115, 101, 97, 114, 99, 104, 32, 110, 111, 116, 97, 103, 115, 116, 97, 99, 107, 32, 110, 111, 116, 98, 105, 100, 105, 32, 110, 111, 116, 101, 114, 109, 98, 105, 100, 105, 32, 110, 111, 116, 101, 120, 116, 97, 117, 116, 111, 32, 110, 111, 116, 102, 32, 110, 111, 116, 105, 108, 100, 101, 111, 112, 32, 110, 111, 116, 105, 116, 108, 101, 32, 110, 111, 116, 111, 112, 32, 110, 111, 116, 116, 105, 109, 101, 111, 117, 116, 32, 110, 111, 116, 116, 121, 102, 97, 115, 116, 32, 110, 111, 118, 98, 32, 110, 111, 119, 97, 32, 110, 111, 119, 98, 32, 110, 111, 119, 102, 104, 32, 110, 111, 119, 105, 108, 100, 105, 103, 110, 111, 114, 101, 99, 97, 115, 101, 42, 32, 42, 32, 110, 111, 119, 105, 110, 102, 105, 120, 104, 101, 105, 103, 104, 116, 32, 110, 111, 119, 105, 118, 32, 110, 111, 119, 114, 97, 112, 32, 110, 111, 119, 114, 105, 116, 101, 32, 110, 111, 119, 114, 105, 116, 101, 98, 97, 99, 107, 117, 112, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 110, 111, 97, 105, 32, 110, 111, 97, 108, 116, 107, 101, 121, 109, 97, 112, 32, 110, 111, 97, 114, 32, 110, 111, 97, 114, 97, 98, 105, 99, 115, 104, 97, 112, 101, 32, 110, 111, 97, 117, 116, 111, 99, 104, 100, 105, 114, 32, 110, 111, 97, 117, 116, 111, 119, 114, 105, 116, 101, 32, 110, 111, 97, 119, 97, 32, 110, 111, 98, 101, 118, 97, 108, 32, 110, 111, 98, 105, 111, 115, 107, 32, 110, 111, 98, 108, 32, 110, 111, 99, 102, 32, 110, 111, 99, 105, 110, 100, 101, 110, 116, 32, 110, 111, 99, 111, 110, 115, 107, 32, 110, 111, 99, 112, 32, 110, 111, 99, 115, 99, 111, 112, 101, 118, 101, 114, 98, 111, 115, 101, 32, 110, 111, 99, 117, 99, 32, 110, 111, 99, 117, 114, 115, 111, 114, 99, 111, 108, 117, 109, 110, 32, 110, 111, 100, 101, 108, 99, 111, 109, 98, 105, 110, 101, 32, 110, 111, 100, 105, 103, 114, 97, 112, 104, 32, 110, 111, 101, 100, 32, 110, 111, 101, 110, 100, 111, 102, 108, 105, 110, 101, 32, 110, 111, 101, 114, 114, 111, 114, 98, 101, 108, 108, 115, 32, 110, 111, 101, 116, 32, 110, 111, 101, 120, 112, 97, 110, 100, 116, 97, 98, 32, 110, 111, 102, 101, 110, 32, 110, 111, 102, 107, 109, 97, 112, 32, 110, 111, 103, 100, 32, 110, 111, 103, 117, 105, 112, 116, 121, 32, 110, 111, 104, 105, 100, 100, 101, 110, 32, 110, 111, 104, 107, 109, 97, 112, 32, 110, 111, 104, 107, 112, 32, 110, 111, 104, 108, 115, 101, 97, 114, 99, 104, 32, 110, 111, 105, 99, 111, 110, 32, 110, 111, 105, 109, 32, 110, 111, 105, 109, 99, 109, 100, 108, 105, 110, 101, 32, 110, 111, 105, 109, 100, 105, 115, 97, 98, 108, 101, 32, 110, 111, 105, 110, 102, 32, 110, 111, 105, 110, 115, 101, 114, 116, 109, 111, 100, 101, 32, 110, 111, 106, 111, 105, 110, 115, 112, 97, 99, 101, 115, 32, 110, 111, 108, 97, 122, 121, 114, 101, 100, 114, 97, 119, 32, 110, 111, 108, 105, 110, 101, 98, 114, 101, 97, 107, 32, 110, 111, 108, 105, 115, 116, 32, 110, 111, 108, 112, 108, 32, 110, 111, 109, 97, 32, 110, 111, 109, 97, 103, 105, 99, 32, 110, 111, 109, 108, 32, 110, 111, 109, 111, 100, 101, 108, 105, 110, 101, 32, 110, 111, 109, 111, 100, 105, 102, 105, 101, 100, 32, 110, 111, 109, 111, 117, 115, 101, 102, 32, 110, 111, 109, 111, 117, 115, 101, 104, 105, 100, 101, 32, 110, 111, 110, 117, 109, 98, 101, 114, 32, 110, 111, 111, 112, 101, 110, 100, 101, 118, 105, 99, 101, 32, 110, 111, 112, 105, 32, 110, 111, 112, 114, 101, 118, 105, 101, 119, 119, 105, 110, 100, 111, 119, 32, 110, 111, 112, 118, 119, 32, 110, 111, 114, 101, 108, 97, 116, 105, 118, 101, 110, 117, 109, 98, 101, 114, 32, 110, 111, 114, 101, 115, 116, 111, 114, 101, 115, 99, 114, 101, 101, 110, 32, 110, 111, 114, 105, 32, 110, 111, 114, 108, 32, 110, 111, 114, 111, 32, 110, 111, 114, 117, 32, 110, 111, 115, 98, 32, 110, 111, 115, 99, 98, 32, 110, 111, 115, 99, 115, 32, 110, 111, 115, 102, 116, 32, 110, 111, 115, 104, 101, 108, 108, 116, 101, 109, 112, 32, 110, 111, 115, 104, 111, 114, 116, 110, 97, 109, 101, 32, 110, 111, 115, 104, 111, 119, 102, 117, 108, 108, 116, 97, 103, 32, 110, 111, 115, 104, 111, 119, 109, 111, 100, 101, 32, 110, 111, 115, 109, 32, 110, 111, 115, 109, 97, 114, 116, 105, 110, 100, 101, 110, 116, 32, 110, 111, 115, 109, 100, 32, 110, 111, 115, 111, 108, 32, 110, 111, 115, 112, 108, 105, 116, 98, 101, 108, 111, 119, 32, 110, 111, 115, 112, 114, 32, 110, 111, 115, 115, 108, 32, 110, 111, 115, 116, 97, 114, 116, 111, 102, 108, 105, 110, 101, 32, 110, 111, 115, 119, 97, 112, 102, 105, 108, 101, 32, 110, 111, 116, 97, 32, 110, 111, 116, 97, 103, 114, 101, 108, 97, 116, 105, 118, 101, 32, 110, 111, 116, 98, 105, 32, 110, 111, 116, 98, 115, 32, 110, 111, 116, 101, 114, 115, 101, 32, 110, 111, 116, 101, 120, 116, 109, 111, 100, 101, 32, 110, 111, 116, 103, 115, 116, 32, 110, 111, 116, 105, 109, 101, 111, 117, 116, 32, 110, 111, 116, 111, 32, 110, 111, 116, 114, 32, 110, 111, 116, 116, 121, 98, 117, 105, 108, 116, 105, 110, 32, 110, 111, 116, 120, 32, 110, 111, 118, 105, 115, 117, 97, 108, 98, 101, 108, 108, 32, 110, 111, 119, 97, 114, 110, 32, 110, 111, 119, 101, 105, 114, 100, 105, 110, 118, 101, 114, 116, 32, 110, 111, 119, 102, 119, 32, 110, 111, 119, 105, 108, 100, 109, 101, 110, 117, 32, 110, 111, 119, 105, 110, 102, 105, 120, 119, 105, 100, 116, 104, 32, 110, 111, 119, 109, 110, 117, 32, 110, 111, 119, 114, 97, 112, 115, 99, 97, 110, 32, 110, 111, 119, 114, 105, 116, 101, 97, 110, 121, 32, 110, 111, 119, 115, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 110, 111, 97, 107, 109, 32, 110, 111, 97, 110, 116, 105, 32, 110, 111, 97, 114, 97, 98, 32, 110, 111, 97, 114, 105, 32, 110, 111, 97, 117, 116, 111, 105, 110, 100, 101, 110, 116, 32, 110, 111, 97, 117, 116, 111, 119, 114, 105, 116, 101, 97, 108, 108, 32, 110, 111, 98, 97, 99, 107, 117, 112, 32, 110, 111, 98, 105, 110, 32, 110, 111, 98, 105, 111, 115, 107, 101, 121, 32, 110, 111, 98, 111, 109, 98, 32, 110, 111, 99, 105, 32, 110, 111, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 110, 111, 99, 111, 110, 115, 107, 101, 121, 32, 110, 111, 99, 114, 98, 32, 110, 111, 99, 115, 116, 32, 110, 111, 99, 117, 108, 32, 110, 111, 99, 117, 114, 115, 111, 114, 108, 105, 110, 101, 32, 110, 111, 100, 103, 32, 110, 111, 101, 97, 32, 110, 111, 101, 100, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 110, 111, 101, 111, 108, 32, 10, 10, 34, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 115, 58, 32, 84, 104, 101, 115, 101, 32, 97, 114, 101, 32, 116, 104, 101, 32, 105, 110, 118, 101, 114, 116, 105, 98, 108, 101, 32, 118, 97, 114, 105, 97, 110, 116, 115, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 105, 110, 118, 97, 99, 100, 32, 105, 110, 118, 97, 108, 108, 111, 119, 114, 101, 118, 105, 110, 115, 32, 105, 110, 118, 97, 110, 116, 105, 97, 108, 105, 97, 115, 32, 105, 110, 118, 97, 114, 97, 98, 105, 99, 32, 105, 110, 118, 97, 114, 115, 104, 97, 112, 101, 32, 105, 110, 118, 97, 117, 116, 111, 114, 101, 97, 100, 32, 105, 110, 118, 97, 119, 32, 105, 110, 118, 98, 97, 108, 108, 111, 111, 110, 101, 118, 97, 108, 32, 105, 110, 118, 98, 105, 110, 97, 114, 121, 32, 105, 110, 118, 98, 107, 32, 105, 110, 118, 98, 117, 102, 108, 105, 115, 116, 101, 100, 32, 105, 110, 118, 99, 105, 110, 32, 105, 110, 118, 99, 111, 110, 102, 105, 114, 109, 32, 105, 110, 118, 99, 111, 112, 121, 105, 110, 100, 101, 110, 116, 32, 105, 110, 118, 99, 115, 99, 111, 112, 101, 116, 97, 103, 32, 105, 110, 118, 99, 115, 118, 101, 114, 98, 32, 105, 110, 118, 99, 117, 114, 115, 111, 114, 98, 105, 110, 100, 32, 105, 110, 118, 100, 101, 99, 111, 32, 105, 110, 118, 100, 105, 102, 102, 32, 105, 110, 118, 101, 98, 32, 105, 110, 118, 101, 107, 32, 105, 110, 118, 101, 113, 117, 97, 108, 97, 108, 119, 97, 121, 115, 32, 105, 110, 118, 101, 115, 99, 107, 101, 121, 115, 32, 105, 110, 118, 101, 120, 32, 105, 110, 118, 101, 120, 114, 99, 32, 105, 110, 118, 102, 107, 32, 105, 110, 118, 102, 111, 108, 100, 101, 110, 97, 98, 108, 101, 32, 105, 110, 118, 103, 100, 101, 102, 97, 117, 108, 116, 32, 105, 110, 118, 104, 105, 100, 32, 105, 110, 118, 104, 107, 32, 105, 110, 118, 104, 107, 109, 97, 112, 112, 32, 105, 110, 118, 104, 108, 115, 32, 105, 110, 118, 105, 99, 32, 105, 110, 118, 105, 103, 110, 111, 114, 101, 99, 97, 115, 101, 32, 105, 110, 118, 105, 109, 99, 32, 105, 110, 118, 105, 109, 100, 32, 105, 110, 118, 105, 110, 99, 115, 101, 97, 114, 99, 104, 32, 105, 110, 118, 105, 110, 102, 101, 114, 99, 97, 115, 101, 32, 105, 110, 118, 105, 115, 32, 105, 110, 118, 106, 115, 32, 105, 110, 118, 108, 98, 114, 32, 105, 110, 118, 108, 105, 115, 112, 32, 105, 110, 118, 108, 111, 97, 100, 112, 108, 117, 103, 105, 110, 115, 32, 105, 110, 118, 108, 122, 32, 105, 110, 118, 109, 97, 99, 97, 116, 115, 117, 105, 32, 105, 110, 118, 109, 104, 32, 105, 110, 118, 109, 111, 100, 32, 105, 110, 118, 109, 111, 100, 105, 102, 105, 97, 98, 108, 101, 32, 105, 110, 118, 109, 111, 114, 101, 32, 105, 110, 118, 109, 111, 117, 115, 101, 102, 111, 99, 117, 115, 32, 105, 110, 118, 110, 117, 32, 105, 110, 118, 111, 100, 101, 118, 32, 105, 110, 118, 112, 97, 115, 116, 101, 32, 105, 110, 118, 112, 114, 101, 115, 101, 114, 118, 101, 105, 110, 100, 101, 110, 116, 32, 105, 110, 118, 112, 114, 111, 109, 112, 116, 32, 105, 110, 118, 114, 101, 97, 100, 111, 110, 108, 121, 32, 105, 110, 118, 114, 101, 109, 97, 112, 32, 105, 110, 118, 114, 101, 118, 105, 110, 115, 32, 105, 110, 118, 114, 105, 103, 104, 116, 108, 101, 102, 116, 32, 105, 110, 118, 114, 110, 117, 32, 105, 110, 118, 114, 115, 32, 105, 110, 118, 114, 117, 108, 101, 114, 32, 105, 110, 118, 115, 99, 32, 105, 110, 118, 115, 99, 114, 111, 108, 108, 98, 105, 110, 100, 32, 105, 110, 118, 115, 101, 99, 117, 114, 101, 32, 105, 110, 118, 115, 104, 101, 108, 108, 115, 108, 97, 115, 104, 32, 105, 110, 118, 115, 104, 105, 102, 116, 114, 111, 117, 110, 100, 32, 105, 110, 118, 115, 104, 111, 119, 99, 109, 100, 32, 105, 110, 118, 115, 104, 111, 119, 109, 97, 116, 99, 104, 32, 105, 110, 118, 115, 105, 32, 105, 110, 118, 115, 109, 97, 114, 116, 99, 97, 115, 101, 32, 105, 110, 118, 115, 109, 97, 114, 116, 116, 97, 98, 32, 105, 110, 118, 115, 110, 32, 105, 110, 118, 115, 112, 101, 108, 108, 32, 105, 110, 118, 115, 112, 108, 105, 116, 114, 105, 103, 104, 116, 32, 105, 110, 118, 115, 114, 32, 105, 110, 118, 115, 116, 97, 32, 105, 110, 118, 115, 116, 109, 112, 32, 105, 110, 118, 115, 119, 102, 32, 105, 110, 118, 116, 97, 103, 98, 115, 101, 97, 114, 99, 104, 32, 105, 110, 118, 116, 97, 103, 115, 116, 97, 99, 107, 32, 105, 110, 118, 116, 98, 105, 100, 105, 32, 105, 110, 118, 116, 101, 114, 109, 98, 105, 100, 105, 32, 105, 110, 118, 116, 101, 120, 116, 97, 117, 116, 111, 32, 105, 110, 118, 116, 102, 32, 105, 110, 118, 116, 105, 108, 100, 101, 111, 112, 32, 105, 110, 118, 116, 105, 116, 108, 101, 32, 105, 110, 118, 116, 111, 112, 32, 105, 110, 118, 116, 116, 105, 109, 101, 111, 117, 116, 32, 105, 110, 118, 116, 116, 121, 102, 97, 115, 116, 32, 105, 110, 118, 118, 98, 32, 105, 110, 118, 119, 97, 32, 105, 110, 118, 119, 98, 32, 105, 110, 118, 119, 102, 104, 32, 105, 110, 118, 119, 105, 108, 100, 105, 103, 110, 111, 114, 101, 99, 97, 115, 101, 42, 32, 42, 32, 105, 110, 118, 119, 105, 110, 102, 105, 120, 104, 101, 105, 103, 104, 116, 32, 105, 110, 118, 119, 105, 118, 32, 105, 110, 118, 119, 114, 97, 112, 32, 105, 110, 118, 119, 114, 105, 116, 101, 32, 105, 110, 118, 119, 114, 105, 116, 101, 98, 97, 99, 107, 117, 112, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 105, 110, 118, 97, 105, 32, 105, 110, 118, 97, 108, 116, 107, 101, 121, 109, 97, 112, 32, 105, 110, 118, 97, 114, 32, 105, 110, 118, 97, 114, 97, 98, 105, 99, 115, 104, 97, 112, 101, 32, 105, 110, 118, 97, 117, 116, 111, 99, 104, 100, 105, 114, 32, 105, 110, 118, 97, 117, 116, 111, 119, 114, 105, 116, 101, 32, 105, 110, 118, 97, 119, 97, 32, 105, 110, 118, 98, 101, 118, 97, 108, 32, 105, 110, 118, 98, 105, 111, 115, 107, 32, 105, 110, 118, 98, 108, 32, 105, 110, 118, 99, 102, 32, 105, 110, 118, 99, 105, 110, 100, 101, 110, 116, 32, 105, 110, 118, 99, 111, 110, 115, 107, 32, 105, 110, 118, 99, 112, 32, 105, 110, 118, 99, 115, 99, 111, 112, 101, 118, 101, 114, 98, 111, 115, 101, 32, 105, 110, 118, 99, 117, 99, 32, 105, 110, 118, 99, 117, 114, 115, 111, 114, 99, 111, 108, 117, 109, 110, 32, 105, 110, 118, 100, 101, 108, 99, 111, 109, 98, 105, 110, 101, 32, 105, 110, 118, 100, 105, 103, 114, 97, 112, 104, 32, 105, 110, 118, 101, 100, 32, 105, 110, 118, 101, 110, 100, 111, 102, 108, 105, 110, 101, 32, 105, 110, 118, 101, 114, 114, 111, 114, 98, 101, 108, 108, 115, 32, 105, 110, 118, 101, 116, 32, 105, 110, 118, 101, 120, 112, 97, 110, 100, 116, 97, 98, 32, 105, 110, 118, 102, 101, 110, 32, 105, 110, 118, 102, 107, 109, 97, 112, 32, 105, 110, 118, 103, 100, 32, 105, 110, 118, 103, 117, 105, 112, 116, 121, 32, 105, 110, 118, 104, 105, 100, 100, 101, 110, 32, 105, 110, 118, 104, 107, 109, 97, 112, 32, 105, 110, 118, 104, 107, 112, 32, 105, 110, 118, 104, 108, 115, 101, 97, 114, 99, 104, 32, 105, 110, 118, 105, 99, 111, 110, 32, 105, 110, 118, 105, 109, 32, 105, 110, 118, 105, 109, 99, 109, 100, 108, 105, 110, 101, 32, 105, 110, 118, 105, 109, 100, 105, 115, 97, 98, 108, 101, 32, 105, 110, 118, 105, 110, 102, 32, 105, 110, 118, 105, 110, 115, 101, 114, 116, 109, 111, 100, 101, 32, 105, 110, 118, 106, 111, 105, 110, 115, 112, 97, 99, 101, 115, 32, 105, 110, 118, 108, 97, 122, 121, 114, 101, 100, 114, 97, 119, 32, 105, 110, 118, 108, 105, 110, 101, 98, 114, 101, 97, 107, 32, 105, 110, 118, 108, 105, 115, 116, 32, 105, 110, 118, 108, 112, 108, 32, 105, 110, 118, 109, 97, 32, 105, 110, 118, 109, 97, 103, 105, 99, 32, 105, 110, 118, 109, 108, 32, 105, 110, 118, 109, 111, 100, 101, 108, 105, 110, 101, 32, 105, 110, 118, 109, 111, 100, 105, 102, 105, 101, 100, 32, 105, 110, 118, 109, 111, 117, 115, 101, 102, 32, 105, 110, 118, 109, 111, 117, 115, 101, 104, 105, 100, 101, 32, 105, 110, 118, 110, 117, 109, 98, 101, 114, 32, 105, 110, 118, 111, 112, 101, 110, 100, 101, 118, 105, 99, 101, 32, 105, 110, 118, 112, 105, 32, 105, 110, 118, 112, 114, 101, 118, 105, 101, 119, 119, 105, 110, 100, 111, 119, 32, 105, 110, 118, 112, 118, 119, 32, 105, 110, 118, 114, 101, 108, 97, 116, 105, 118, 101, 110, 117, 109, 98, 101, 114, 32, 105, 110, 118, 114, 101, 115, 116, 111, 114, 101, 115, 99, 114, 101, 101, 110, 32, 105, 110, 118, 114, 105, 32, 105, 110, 118, 114, 108, 32, 105, 110, 118, 114, 111, 32, 105, 110, 118, 114, 117, 32, 105, 110, 118, 115, 98, 32, 105, 110, 118, 115, 99, 98, 32, 105, 110, 118, 115, 99, 115, 32, 105, 110, 118, 115, 102, 116, 32, 105, 110, 118, 115, 104, 101, 108, 108, 116, 101, 109, 112, 32, 105, 110, 118, 115, 104, 111, 114, 116, 110, 97, 109, 101, 32, 105, 110, 118, 115, 104, 111, 119, 102, 117, 108, 108, 116, 97, 103, 32, 105, 110, 118, 115, 104, 111, 119, 109, 111, 100, 101, 32, 105, 110, 118, 115, 109, 32, 105, 110, 118, 115, 109, 97, 114, 116, 105, 110, 100, 101, 110, 116, 32, 105, 110, 118, 115, 109, 100, 32, 105, 110, 118, 115, 111, 108, 32, 105, 110, 118, 115, 112, 108, 105, 116, 98, 101, 108, 111, 119, 32, 105, 110, 118, 115, 112, 114, 32, 105, 110, 118, 115, 115, 108, 32, 105, 110, 118, 115, 116, 97, 114, 116, 111, 102, 108, 105, 110, 101, 32, 105, 110, 118, 115, 119, 97, 112, 102, 105, 108, 101, 32, 105, 110, 118, 116, 97, 32, 105, 110, 118, 116, 97, 103, 114, 101, 108, 97, 116, 105, 118, 101, 32, 105, 110, 118, 116, 98, 105, 32, 105, 110, 118, 116, 98, 115, 32, 105, 110, 118, 116, 101, 114, 115, 101, 32, 105, 110, 118, 116, 101, 120, 116, 109, 111, 100, 101, 32, 105, 110, 118, 116, 103, 115, 116, 32, 105, 110, 118, 116, 105, 109, 101, 111, 117, 116, 32, 105, 110, 118, 116, 111, 32, 105, 110, 118, 116, 114, 32, 105, 110, 118, 116, 116, 121, 98, 117, 105, 108, 116, 105, 110, 32, 105, 110, 118, 116, 120, 32, 105, 110, 118, 118, 105, 115, 117, 97, 108, 98, 101, 108, 108, 32, 105, 110, 118, 119, 97, 114, 110, 32, 105, 110, 118, 119, 101, 105, 114, 100, 105, 110, 118, 101, 114, 116, 32, 105, 110, 118, 119, 102, 119, 32, 105, 110, 118, 119, 105, 108, 100, 109, 101, 110, 117, 32, 105, 110, 118, 119, 105, 110, 102, 105, 120, 119, 105, 100, 116, 104, 32, 105, 110, 118, 119, 109, 110, 117, 32, 105, 110, 118, 119, 114, 97, 112, 115, 99, 97, 110, 32, 105, 110, 118, 119, 114, 105, 116, 101, 97, 110, 121, 32, 105, 110, 118, 119, 115, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 105, 110, 118, 97, 107, 109, 32, 105, 110, 118, 97, 110, 116, 105, 32, 105, 110, 118, 97, 114, 97, 98, 32, 105, 110, 118, 97, 114, 105, 32, 105, 110, 118, 97, 117, 116, 111, 105, 110, 100, 101, 110, 116, 32, 105, 110, 118, 97, 117, 116, 111, 119, 114, 105, 116, 101, 97, 108, 108, 32, 105, 110, 118, 98, 97, 99, 107, 117, 112, 32, 105, 110, 118, 98, 105, 110, 32, 105, 110, 118, 98, 105, 111, 115, 107, 101, 121, 32, 105, 110, 118, 98, 111, 109, 98, 32, 105, 110, 118, 99, 105, 32, 105, 110, 118, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 105, 110, 118, 99, 111, 110, 115, 107, 101, 121, 32, 105, 110, 118, 99, 114, 98, 32, 105, 110, 118, 99, 115, 116, 32, 105, 110, 118, 99, 117, 108, 32, 105, 110, 118, 99, 117, 114, 115, 111, 114, 108, 105, 110, 101, 32, 105, 110, 118, 100, 103, 32, 105, 110, 118, 101, 97, 32, 105, 110, 118, 101, 100, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 105, 110, 118, 101, 111, 108, 32, 10, 10, 34, 32, 116, 101, 114, 109, 99, 97, 112, 32, 99, 111, 100, 101, 115, 32, 40, 119, 104, 105, 99, 104, 32, 99, 97, 110, 32, 97, 108, 115, 111, 32, 98, 101, 32, 115, 101, 116, 41, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 116, 95, 65, 66, 32, 116, 95, 97, 108, 32, 116, 95, 98, 99, 32, 116, 95, 99, 101, 32, 116, 95, 99, 108, 32, 116, 95, 67, 111, 32, 116, 95, 99, 115, 32, 116, 95, 67, 115, 32, 116, 95, 67, 83, 32, 116, 95, 67, 86, 32, 116, 95, 100, 97, 32, 116, 95, 100, 98, 32, 116, 95, 100, 108, 32, 116, 95, 68, 76, 32, 116, 95, 69, 73, 32, 116, 95, 70, 49, 32, 116, 95, 70, 50, 32, 116, 95, 70, 51, 32, 116, 95, 70, 52, 32, 116, 95, 70, 53, 32, 116, 95, 70, 54, 32, 116, 95, 70, 55, 32, 116, 95, 70, 56, 32, 116, 95, 70, 57, 32, 116, 95, 102, 115, 32, 116, 95, 73, 69, 32, 116, 95, 73, 83, 32, 116, 95, 107, 49, 32, 116, 95, 75, 49, 32, 116, 95, 107, 50, 32, 116, 95, 107, 51, 32, 116, 95, 75, 51, 32, 116, 95, 107, 52, 32, 116, 95, 75, 52, 32, 116, 95, 107, 53, 32, 116, 95, 75, 53, 32, 116, 95, 107, 54, 32, 116, 95, 75, 54, 32, 116, 95, 107, 55, 32, 116, 95, 75, 55, 32, 116, 95, 107, 56, 32, 116, 95, 75, 56, 32, 116, 95, 107, 57, 32, 116, 95, 75, 57, 32, 116, 95, 75, 65, 32, 116, 95, 107, 98, 32, 116, 95, 107, 66, 32, 116, 95, 75, 66, 32, 116, 95, 75, 67, 32, 116, 95, 107, 100, 32, 116, 95, 107, 68, 32, 116, 95, 75, 68, 32, 116, 95, 107, 101, 32, 116, 95, 75, 69, 32, 116, 95, 75, 70, 32, 116, 95, 75, 71, 32, 116, 95, 107, 104, 32, 116, 95, 75, 72, 32, 116, 95, 107, 73, 32, 116, 95, 75, 73, 32, 116, 95, 75, 74, 32, 116, 95, 75, 75, 32, 116, 95, 107, 108, 32, 116, 95, 75, 76, 32, 116, 95, 107, 78, 32, 116, 95, 107, 80, 32, 116, 95, 107, 114, 32, 116, 95, 107, 115, 32, 116, 95, 107, 117, 32, 116, 95, 108, 101, 32, 116, 95, 109, 98, 32, 116, 95, 109, 100, 32, 116, 95, 109, 101, 32, 116, 95, 109, 114, 32, 116, 95, 109, 115, 32, 116, 95, 110, 100, 32, 116, 95, 111, 112, 32, 116, 95, 82, 73, 32, 116, 95, 82, 86, 32, 116, 95, 83, 98, 32, 116, 95, 115, 101, 32, 116, 95, 83, 102, 32, 116, 95, 83, 73, 32, 116, 95, 115, 111, 32, 116, 95, 115, 114, 32, 116, 95, 116, 101, 32, 116, 95, 116, 105, 32, 116, 95, 116, 115, 32, 116, 95, 117, 101, 32, 116, 95, 117, 115, 32, 116, 95, 117, 116, 32, 116, 95, 118, 98, 32, 116, 95, 118, 101, 32, 116, 95, 118, 105, 32, 116, 95, 118, 115, 32, 116, 95, 87, 80, 32, 116, 95, 87, 83, 32, 116, 95, 120, 115, 32, 116, 95, 90, 72, 32, 116, 95, 90, 82, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 116, 95, 65, 70, 32, 116, 95, 65, 76, 32, 116, 95, 99, 100, 32, 116, 95, 67, 101, 32, 116, 95, 99, 109, 32, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 116, 95, 37, 49, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 116, 95, 35, 50, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 116, 95, 35, 52, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 116, 95, 64, 55, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 116, 95, 42, 55, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 116, 95, 38, 56, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 116, 95, 37, 105, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 116, 95, 107, 59, 34, 10, 10, 34, 32, 117, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 115, 101, 116, 116, 105, 110, 103, 115, 58, 32, 116, 104, 101, 115, 101, 32, 97, 114, 101, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 98, 121, 32, 118, 105, 32, 98, 117, 116, 32, 100, 111, 110, 39, 116, 32, 100, 111, 32, 97, 110, 121, 116, 104, 105, 110, 103, 32, 105, 110, 32, 118, 105, 109, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 69, 114, 114, 83, 101, 116, 116, 105, 110, 103, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 104, 97, 114, 100, 116, 97, 98, 115, 32, 104, 116, 32, 119, 49, 50, 48, 48, 32, 119, 51, 48, 48, 32, 119, 57, 54, 48, 48, 32, 10, 10, 34, 32, 65, 117, 116, 111, 67, 109, 100, 32, 69, 118, 101, 110, 116, 115, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 105, 103, 110, 111, 114, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 65, 117, 116, 111, 69, 118, 101, 110, 116, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 66, 117, 102, 65, 100, 100, 32, 66, 117, 102, 67, 114, 101, 97, 116, 101, 32, 66, 117, 102, 68, 101, 108, 101, 116, 101, 32, 66, 117, 102, 69, 110, 116, 101, 114, 32, 66, 117, 102, 70, 105, 108, 101, 80, 111, 115, 116, 32, 66, 117, 102, 70, 105, 108, 101, 80, 114, 101, 32, 66, 117, 102, 72, 105, 100, 100, 101, 110, 32, 66, 117, 102, 76, 101, 97, 118, 101, 32, 66, 117, 102, 78, 101, 119, 32, 66, 117, 102, 78, 101, 119, 70, 105, 108, 101, 32, 66, 117, 102, 82, 101, 97, 100, 32, 66, 117, 102, 82, 101, 97, 100, 67, 109, 100, 32, 66, 117, 102, 82, 101, 97, 100, 80, 111, 115, 116, 32, 66, 117, 102, 82, 101, 97, 100, 80, 114, 101, 32, 66, 117, 102, 85, 110, 108, 111, 97, 100, 32, 66, 117, 102, 87, 105, 110, 69, 110, 116, 101, 114, 32, 66, 117, 102, 87, 105, 110, 76, 101, 97, 118, 101, 32, 66, 117, 102, 87, 105, 112, 101, 111, 117, 116, 32, 66, 117, 102, 87, 114, 105, 116, 101, 32, 66, 117, 102, 87, 114, 105, 116, 101, 67, 109, 100, 32, 66, 117, 102, 87, 114, 105, 116, 101, 80, 111, 115, 116, 32, 66, 117, 102, 87, 114, 105, 116, 101, 80, 114, 101, 32, 67, 109, 100, 45, 101, 118, 101, 110, 116, 32, 67, 109, 100, 119, 105, 110, 69, 110, 116, 101, 114, 32, 67, 109, 100, 119, 105, 110, 76, 101, 97, 118, 101, 32, 67, 111, 108, 111, 114, 83, 99, 104, 101, 109, 101, 32, 67, 117, 114, 115, 111, 114, 72, 111, 108, 100, 32, 67, 117, 114, 115, 111, 114, 72, 111, 108, 100, 73, 32, 67, 117, 114, 115, 111, 114, 77, 111, 118, 101, 100, 32, 67, 117, 114, 115, 111, 114, 77, 111, 118, 101, 100, 73, 32, 69, 110, 99, 111, 100, 105, 110, 103, 67, 104, 97, 110, 103, 101, 100, 32, 70, 105, 108, 101, 65, 112, 112, 101, 110, 100, 67, 109, 100, 32, 70, 105, 108, 101, 65, 112, 112, 101, 110, 100, 80, 111, 115, 116, 32, 70, 105, 108, 101, 65, 112, 112, 101, 110, 100, 80, 114, 101, 32, 70, 105, 108, 101, 67, 104, 97, 110, 103, 101, 100, 82, 79, 32, 70, 105, 108, 101, 67, 104, 97, 110, 103, 101, 100, 83, 104, 101, 108, 108, 32, 70, 105, 108, 101, 67, 104, 97, 110, 103, 101, 100, 83, 104, 101, 108, 108, 80, 111, 115, 116, 32, 70, 105, 108, 101, 69, 110, 99, 111, 100, 105, 110, 103, 32, 70, 105, 108, 101, 82, 101, 97, 100, 67, 109, 100, 32, 70, 105, 108, 101, 82, 101, 97, 100, 80, 111, 115, 116, 32, 70, 105, 108, 101, 82, 101, 97, 100, 80, 114, 101, 32, 70, 105, 108, 101, 84, 121, 112, 101, 32, 70, 105, 108, 101, 87, 114, 105, 116, 101, 67, 109, 100, 32, 70, 105, 108, 101, 87, 114, 105, 116, 101, 80, 111, 115, 116, 32, 70, 105, 108, 101, 87, 114, 105, 116, 101, 80, 114, 101, 32, 70, 105, 108, 116, 101, 114, 82, 101, 97, 100, 80, 111, 115, 116, 32, 70, 105, 108, 116, 101, 114, 82, 101, 97, 100, 80, 114, 101, 32, 70, 105, 108, 116, 101, 114, 87, 114, 105, 116, 101, 80, 111, 115, 116, 32, 70, 105, 108, 116, 101, 114, 87, 114, 105, 116, 101, 80, 114, 101, 32, 70, 111, 99, 117, 115, 71, 97, 105, 110, 101, 100, 32, 70, 111, 99, 117, 115, 76, 111, 115, 116, 32, 70, 117, 110, 99, 85, 110, 100, 101, 102, 105, 110, 101, 100, 32, 71, 85, 73, 69, 110, 116, 101, 114, 32, 71, 85, 73, 70, 97, 105, 108, 101, 100, 32, 73, 110, 115, 101, 114, 116, 67, 104, 97, 110, 103, 101, 32, 73, 110, 115, 101, 114, 116, 67, 104, 97, 114, 80, 114, 101, 32, 73, 110, 115, 101, 114, 116, 69, 110, 116, 101, 114, 32, 73, 110, 115, 101, 114, 116, 76, 101, 97, 118, 101, 32, 77, 101, 110, 117, 80, 111, 112, 117, 112, 32, 81, 117, 105, 99, 107, 70, 105, 120, 67, 109, 100, 80, 111, 115, 116, 32, 81, 117, 105, 99, 107, 70, 105, 120, 67, 109, 100, 80, 114, 101, 32, 82, 101, 109, 111, 116, 101, 82, 101, 112, 108, 121, 32, 83, 101, 115, 115, 105, 111, 110, 76, 111, 97, 100, 80, 111, 115, 116, 32, 83, 104, 101, 108, 108, 67, 109, 100, 80, 111, 115, 116, 32, 83, 104, 101, 108, 108, 70, 105, 108, 116, 101, 114, 80, 111, 115, 116, 32, 83, 111, 117, 114, 99, 101, 67, 109, 100, 32, 83, 111, 117, 114, 99, 101, 80, 114, 101, 32, 83, 112, 101, 108, 108, 70, 105, 108, 101, 77, 105, 115, 115, 105, 110, 103, 32, 83, 116, 100, 105, 110, 82, 101, 97, 100, 80, 111, 115, 116, 32, 83, 116, 100, 105, 110, 82, 101, 97, 100, 80, 114, 101, 32, 83, 119, 97, 112, 69, 120, 105, 115, 116, 115, 32, 83, 121, 110, 116, 97, 120, 32, 84, 97, 98, 69, 110, 116, 101, 114, 32, 84, 97, 98, 76, 101, 97, 118, 101, 32, 84, 101, 114, 109, 67, 104, 97, 110, 103, 101, 100, 32, 84, 101, 114, 109, 82, 101, 115, 112, 111, 110, 115, 101, 32, 85, 115, 101, 114, 32, 85, 115, 101, 114, 71, 101, 116, 116, 105, 110, 103, 66, 111, 114, 101, 100, 32, 86, 105, 109, 69, 110, 116, 101, 114, 32, 86, 105, 109, 76, 101, 97, 118, 101, 32, 86, 105, 109, 76, 101, 97, 118, 101, 80, 114, 101, 32, 86, 105, 109, 82, 101, 115, 105, 122, 101, 100, 32, 87, 105, 110, 69, 110, 116, 101, 114, 32, 87, 105, 110, 76, 101, 97, 118, 101, 32, 10, 10, 34, 32, 72, 105, 103, 104, 108, 105, 103, 104, 116, 32, 99, 111, 109, 109, 111, 110, 108, 121, 32, 117, 115, 101, 100, 32, 71, 114, 111, 117, 112, 110, 97, 109, 101, 115, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 71, 114, 111, 117, 112, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 67, 111, 109, 109, 101, 110, 116, 32, 67, 111, 110, 115, 116, 97, 110, 116, 32, 83, 116, 114, 105, 110, 103, 32, 67, 104, 97, 114, 97, 99, 116, 101, 114, 32, 78, 117, 109, 98, 101, 114, 32, 66, 111, 111, 108, 101, 97, 110, 32, 70, 108, 111, 97, 116, 32, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 70, 117, 110, 99, 116, 105, 111, 110, 32, 83, 116, 97, 116, 101, 109, 101, 110, 116, 32, 67, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 32, 82, 101, 112, 101, 97, 116, 32, 76, 97, 98, 101, 108, 32, 79, 112, 101, 114, 97, 116, 111, 114, 32, 75, 101, 121, 119, 111, 114, 100, 32, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 80, 114, 101, 80, 114, 111, 99, 32, 73, 110, 99, 108, 117, 100, 101, 32, 68, 101, 102, 105, 110, 101, 32, 77, 97, 99, 114, 111, 32, 80, 114, 101, 67, 111, 110, 100, 105, 116, 32, 84, 121, 112, 101, 32, 83, 116, 111, 114, 97, 103, 101, 67, 108, 97, 115, 115, 32, 83, 116, 114, 117, 99, 116, 117, 114, 101, 32, 84, 121, 112, 101, 100, 101, 102, 32, 83, 112, 101, 99, 105, 97, 108, 32, 83, 112, 101, 99, 105, 97, 108, 67, 104, 97, 114, 32, 84, 97, 103, 32, 68, 101, 108, 105, 109, 105, 116, 101, 114, 32, 83, 112, 101, 99, 105, 97, 108, 67, 111, 109, 109, 101, 110, 116, 32, 68, 101, 98, 117, 103, 32, 85, 110, 100, 101, 114, 108, 105, 110, 101, 100, 32, 73, 103, 110, 111, 114, 101, 32, 69, 114, 114, 111, 114, 32, 84, 111, 100, 111, 32, 10, 10, 34, 32, 68, 101, 102, 97, 117, 108, 116, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 32, 103, 114, 111, 117, 112, 115, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 72, 76, 71, 114, 111, 117, 112, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 67, 111, 108, 111, 114, 67, 111, 108, 117, 109, 110, 32, 67, 117, 114, 115, 111, 114, 32, 67, 117, 114, 115, 111, 114, 67, 111, 108, 117, 109, 110, 32, 67, 117, 114, 115, 111, 114, 73, 77, 32, 67, 117, 114, 115, 111, 114, 76, 105, 110, 101, 32, 68, 105, 102, 102, 65, 100, 100, 32, 68, 105, 102, 102, 67, 104, 97, 110, 103, 101, 32, 68, 105, 102, 102, 68, 101, 108, 101, 116, 101, 32, 68, 105, 102, 102, 84, 101, 120, 116, 32, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 69, 114, 114, 111, 114, 77, 115, 103, 32, 70, 111, 108, 100, 67, 111, 108, 117, 109, 110, 32, 70, 111, 108, 100, 101, 100, 32, 73, 110, 99, 83, 101, 97, 114, 99, 104, 32, 76, 105, 110, 101, 78, 114, 32, 77, 97, 116, 99, 104, 80, 97, 114, 101, 110, 32, 77, 101, 110, 117, 32, 77, 111, 100, 101, 77, 115, 103, 32, 77, 111, 114, 101, 77, 115, 103, 32, 78, 111, 110, 84, 101, 120, 116, 32, 78, 111, 114, 109, 97, 108, 32, 80, 109, 101, 110, 117, 32, 80, 109, 101, 110, 117, 83, 98, 97, 114, 32, 80, 109, 101, 110, 117, 83, 101, 108, 32, 80, 109, 101, 110, 117, 84, 104, 117, 109, 98, 32, 81, 117, 101, 115, 116, 105, 111, 110, 32, 83, 99, 114, 111, 108, 108, 98, 97, 114, 32, 83, 101, 97, 114, 99, 104, 32, 83, 105, 103, 110, 67, 111, 108, 117, 109, 110, 32, 83, 112, 101, 99, 105, 97, 108, 75, 101, 121, 32, 83, 112, 101, 108, 108, 66, 97, 100, 32, 83, 112, 101, 108, 108, 67, 97, 112, 32, 83, 112, 101, 108, 108, 76, 111, 99, 97, 108, 32, 83, 112, 101, 108, 108, 82, 97, 114, 101, 32, 83, 116, 97, 116, 117, 115, 76, 105, 110, 101, 32, 83, 116, 97, 116, 117, 115, 76, 105, 110, 101, 78, 67, 32, 84, 97, 98, 76, 105, 110, 101, 32, 84, 97, 98, 76, 105, 110, 101, 70, 105, 108, 108, 32, 84, 97, 98, 76, 105, 110, 101, 83, 101, 108, 32, 84, 105, 116, 108, 101, 32, 84, 111, 111, 108, 116, 105, 112, 32, 86, 101, 114, 116, 83, 112, 108, 105, 116, 32, 86, 105, 115, 117, 97, 108, 32, 86, 105, 115, 117, 97, 108, 78, 79, 83, 32, 87, 97, 114, 110, 105, 110, 103, 77, 115, 103, 32, 87, 105, 108, 100, 77, 101, 110, 117, 32, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 72, 76, 71, 114, 111, 117, 112, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 67, 111, 110, 99, 101, 97, 108, 34, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 109, 97, 116, 99, 104, 10, 10, 34, 32, 70, 117, 110, 99, 116, 105, 111, 110, 32, 78, 97, 109, 101, 115, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 70, 117, 110, 99, 78, 97, 109, 101, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 98, 115, 32, 97, 110, 100, 32, 97, 114, 103, 105, 100, 120, 32, 97, 116, 97, 110, 32, 98, 114, 111, 119, 115, 101, 100, 105, 114, 32, 98, 117, 102, 108, 111, 97, 100, 101, 100, 32, 98, 117, 102, 119, 105, 110, 110, 114, 32, 99, 97, 108, 108, 32, 99, 104, 97, 114, 50, 110, 114, 32, 99, 111, 108, 32, 99, 111, 109, 112, 108, 101, 116, 101, 95, 99, 104, 101, 99, 107, 32, 99, 111, 115, 32, 99, 115, 99, 111, 112, 101, 95, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 100, 101, 108, 101, 116, 101, 32, 100, 105, 102, 102, 95, 104, 108, 73, 68, 32, 101, 118, 97, 108, 32, 101, 120, 105, 115, 116, 115, 32, 101, 120, 112, 114, 56, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 32, 102, 105, 110, 100, 100, 105, 114, 32, 102, 108, 111, 111, 114, 32, 102, 110, 97, 109, 101, 109, 111, 100, 105, 102, 121, 32, 102, 111, 108, 100, 108, 101, 118, 101, 108, 32, 102, 111, 114, 101, 103, 114, 111, 117, 110, 100, 32, 103, 101, 116, 32, 103, 101, 116, 99, 104, 97, 114, 32, 103, 101, 116, 99, 109, 100, 112, 111, 115, 32, 103, 101, 116, 102, 111, 110, 116, 110, 97, 109, 101, 32, 103, 101, 116, 102, 116, 105, 109, 101, 32, 103, 101, 116, 108, 111, 99, 108, 105, 115, 116, 32, 103, 101, 116, 112, 111, 115, 32, 103, 101, 116, 114, 101, 103, 116, 121, 112, 101, 32, 103, 101, 116, 119, 105, 110, 112, 111, 115, 120, 32, 103, 108, 111, 98, 32, 104, 97, 115, 95, 107, 101, 121, 32, 104, 105, 115, 116, 97, 100, 100, 32, 104, 105, 115, 116, 110, 114, 32, 104, 111, 115, 116, 110, 97, 109, 101, 32, 105, 110, 100, 101, 120, 32, 105, 110, 112, 117, 116, 108, 105, 115, 116, 32, 105, 110, 112, 117, 116, 115, 101, 99, 114, 101, 116, 32, 105, 115, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 106, 111, 105, 110, 32, 108, 105, 98, 99, 97, 108, 108, 32, 108, 105, 110, 101, 50, 98, 121, 116, 101, 32, 108, 111, 103, 32, 109, 97, 112, 32, 109, 97, 116, 99, 104, 32, 109, 97, 116, 99, 104, 100, 101, 108, 101, 116, 101, 32, 109, 97, 116, 99, 104, 115, 116, 114, 32, 109, 107, 100, 105, 114, 32, 110, 101, 120, 116, 110, 111, 110, 98, 108, 97, 110, 107, 32, 112, 97, 116, 104, 115, 104, 111, 114, 116, 101, 110, 32, 112, 114, 105, 110, 116, 102, 32, 112, 121, 101, 118, 97, 108, 32, 114, 101, 108, 116, 105, 109, 101, 32, 114, 101, 109, 111, 116, 101, 95, 102, 111, 114, 101, 103, 114, 111, 117, 110, 100, 32, 114, 101, 109, 111, 116, 101, 95, 114, 101, 97, 100, 32, 114, 101, 109, 111, 118, 101, 32, 114, 101, 112, 101, 97, 116, 32, 114, 101, 118, 101, 114, 115, 101, 32, 115, 101, 97, 114, 99, 104, 32, 115, 101, 97, 114, 99, 104, 112, 97, 105, 114, 32, 115, 101, 97, 114, 99, 104, 112, 111, 115, 32, 115, 101, 114, 118, 101, 114, 108, 105, 115, 116, 32, 115, 101, 116, 99, 109, 100, 112, 111, 115, 32, 115, 101, 116, 108, 111, 99, 108, 105, 115, 116, 32, 115, 101, 116, 112, 111, 115, 32, 115, 101, 116, 114, 101, 103, 32, 115, 101, 116, 116, 97, 98, 119, 105, 110, 118, 97, 114, 32, 115, 104, 101, 108, 108, 101, 115, 99, 97, 112, 101, 32, 115, 105, 109, 112, 108, 105, 102, 121, 32, 115, 105, 110, 104, 32, 115, 111, 117, 110, 100, 102, 111, 108, 100, 32, 115, 112, 101, 108, 108, 115, 117, 103, 103, 101, 115, 116, 32, 115, 113, 114, 116, 32, 115, 116, 114, 50, 110, 114, 32, 115, 116, 114, 100, 105, 115, 112, 108, 97, 121, 119, 105, 100, 116, 104, 32, 115, 116, 114, 105, 100, 120, 32, 115, 116, 114, 108, 101, 110, 32, 115, 116, 114, 114, 105, 100, 120, 32, 115, 116, 114, 119, 105, 100, 116, 104, 32, 115, 117, 98, 115, 116, 105, 116, 117, 116, 101, 32, 115, 121, 110, 73, 68, 32, 115, 121, 110, 73, 68, 116, 114, 97, 110, 115, 32, 115, 121, 115, 116, 101, 109, 32, 116, 97, 98, 112, 97, 103, 101, 110, 114, 32, 116, 97, 103, 102, 105, 108, 101, 115, 32, 116, 97, 110, 32, 116, 101, 109, 112, 110, 97, 109, 101, 32, 116, 111, 117, 112, 112, 101, 114, 32, 116, 114, 117, 110, 99, 32, 117, 110, 100, 111, 102, 105, 108, 101, 32, 118, 97, 108, 117, 101, 115, 32, 118, 105, 115, 117, 97, 108, 109, 111, 100, 101, 32, 119, 105, 110, 99, 111, 108, 32, 119, 105, 110, 108, 105, 110, 101, 32, 119, 105, 110, 114, 101, 115, 116, 99, 109, 100, 32, 119, 105, 110, 115, 97, 118, 101, 118, 105, 101, 119, 32, 119, 114, 105, 116, 101, 102, 105, 108, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 70, 117, 110, 99, 78, 97, 109, 101, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 99, 111, 115, 32, 97, 112, 112, 101, 110, 100, 32, 97, 114, 103, 118, 32, 97, 116, 97, 110, 50, 32, 98, 117, 102, 101, 120, 105, 115, 116, 115, 32, 98, 117, 102, 110, 97, 109, 101, 32, 98, 121, 116, 101, 50, 108, 105, 110, 101, 32, 99, 101, 105, 108, 32, 99, 105, 110, 100, 101, 110, 116, 32, 99, 111, 109, 112, 108, 101, 116, 101, 32, 99, 111, 110, 102, 105, 114, 109, 32, 99, 111, 115, 104, 32, 99, 117, 114, 115, 111, 114, 32, 100, 105, 100, 95, 102, 105, 108, 101, 116, 121, 112, 101, 32, 101, 109, 112, 116, 121, 32, 101, 118, 101, 110, 116, 104, 97, 110, 100, 108, 101, 114, 32, 101, 120, 112, 32, 101, 120, 116, 101, 110, 100, 32, 102, 105, 108, 101, 119, 114, 105, 116, 97, 98, 108, 101, 32, 102, 105, 110, 100, 102, 105, 108, 101, 32, 102, 109, 111, 100, 32, 102, 111, 108, 100, 99, 108, 111, 115, 101, 100, 32, 102, 111, 108, 100, 116, 101, 120, 116, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 101, 116, 98, 117, 102, 108, 105, 110, 101, 32, 103, 101, 116, 99, 104, 97, 114, 109, 111, 100, 32, 103, 101, 116, 99, 109, 100, 116, 121, 112, 101, 32, 103, 101, 116, 102, 112, 101, 114, 109, 32, 103, 101, 116, 102, 116, 121, 112, 101, 32, 103, 101, 116, 109, 97, 116, 99, 104, 101, 115, 32, 103, 101, 116, 113, 102, 108, 105, 115, 116, 32, 103, 101, 116, 116, 97, 98, 118, 97, 114, 32, 103, 101, 116, 119, 105, 110, 112, 111, 115, 121, 32, 103, 108, 111, 98, 112, 97, 116, 104, 32, 104, 97, 115, 108, 111, 99, 97, 108, 100, 105, 114, 32, 104, 105, 115, 116, 100, 101, 108, 32, 104, 108, 101, 120, 105, 115, 116, 115, 32, 105, 99, 111, 110, 118, 32, 105, 110, 112, 117, 116, 32, 105, 110, 112, 117, 116, 114, 101, 115, 116, 111, 114, 101, 32, 105, 110, 115, 101, 114, 116, 32, 105, 115, 108, 111, 99, 107, 101, 100, 32, 107, 101, 121, 115, 32, 108, 105, 98, 99, 97, 108, 108, 110, 114, 32, 108, 105, 115, 112, 105, 110, 100, 101, 110, 116, 32, 108, 111, 103, 49, 48, 32, 109, 97, 112, 97, 114, 103, 32, 109, 97, 116, 99, 104, 97, 100, 100, 32, 109, 97, 116, 99, 104, 101, 110, 100, 32, 109, 97, 120, 32, 109, 111, 100, 101, 32, 110, 114, 50, 99, 104, 97, 114, 32, 112, 111, 119, 32, 112, 117, 109, 118, 105, 115, 105, 98, 108, 101, 32, 114, 97, 110, 103, 101, 32, 114, 101, 108, 116, 105, 109, 101, 115, 116, 114, 32, 114, 101, 109, 111, 116, 101, 95, 112, 101, 101, 107, 32, 114, 101, 109, 111, 116, 101, 95, 115, 101, 110, 100, 32, 114, 101, 110, 97, 109, 101, 32, 114, 101, 115, 111, 108, 118, 101, 32, 114, 111, 117, 110, 100, 32, 115, 101, 97, 114, 99, 104, 100, 101, 99, 108, 32, 115, 101, 97, 114, 99, 104, 112, 97, 105, 114, 112, 111, 115, 32, 115, 101, 114, 118, 101, 114, 50, 99, 108, 105, 101, 110, 116, 32, 115, 101, 116, 98, 117, 102, 118, 97, 114, 32, 115, 101, 116, 108, 105, 110, 101, 32, 115, 101, 116, 109, 97, 116, 99, 104, 101, 115, 32, 115, 101, 116, 113, 102, 108, 105, 115, 116, 32, 115, 101, 116, 116, 97, 98, 118, 97, 114, 32, 115, 101, 116, 119, 105, 110, 118, 97, 114, 32, 115, 104, 105, 102, 116, 119, 105, 100, 116, 104, 32, 115, 105, 110, 32, 115, 111, 114, 116, 32, 115, 112, 101, 108, 108, 98, 97, 100, 119, 111, 114, 100, 32, 115, 112, 108, 105, 116, 32, 115, 116, 114, 50, 102, 108, 111, 97, 116, 32, 115, 116, 114, 99, 104, 97, 114, 115, 32, 115, 116, 114, 102, 116, 105, 109, 101, 32, 115, 116, 114, 105, 110, 103, 32, 115, 116, 114, 112, 97, 114, 116, 32, 115, 116, 114, 116, 114, 97, 110, 115, 32, 115, 117, 98, 109, 97, 116, 99, 104, 32, 115, 121, 110, 99, 111, 110, 99, 101, 97, 108, 101, 100, 32, 115, 121, 110, 73, 68, 97, 116, 116, 114, 32, 115, 121, 110, 115, 116, 97, 99, 107, 32, 116, 97, 98, 112, 97, 103, 101, 98, 117, 102, 108, 105, 115, 116, 32, 116, 97, 98, 112, 97, 103, 101, 119, 105, 110, 110, 114, 32, 116, 97, 103, 108, 105, 115, 116, 32, 116, 97, 110, 104, 32, 116, 111, 108, 111, 119, 101, 114, 32, 116, 114, 32, 116, 121, 112, 101, 32, 117, 110, 100, 111, 116, 114, 101, 101, 32, 118, 105, 114, 116, 99, 111, 108, 32, 119, 105, 110, 98, 117, 102, 110, 114, 32, 119, 105, 110, 104, 101, 105, 103, 104, 116, 32, 119, 105, 110, 110, 114, 32, 119, 105, 110, 114, 101, 115, 116, 118, 105, 101, 119, 32, 119, 105, 110, 119, 105, 100, 116, 104, 32, 120, 111, 114, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 70, 117, 110, 99, 78, 97, 109, 101, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 100, 100, 32, 97, 114, 103, 99, 32, 97, 115, 105, 110, 32, 98, 114, 111, 119, 115, 101, 32, 98, 117, 102, 108, 105, 115, 116, 101, 100, 32, 98, 117, 102, 110, 114, 32, 98, 121, 116, 101, 105, 100, 120, 32, 99, 104, 97, 110, 103, 101, 110, 114, 32, 99, 108, 101, 97, 114, 109, 97, 116, 99, 104, 101, 115, 32, 99, 111, 109, 112, 108, 101, 116, 101, 95, 97, 100, 100, 32, 99, 111, 112, 121, 32, 99, 111, 117, 110, 116, 32, 100, 101, 101, 112, 99, 111, 112, 121, 32, 100, 105, 102, 102, 95, 102, 105, 108, 108, 101, 114, 32, 101, 115, 99, 97, 112, 101, 32, 101, 120, 101, 99, 117, 116, 97, 98, 108, 101, 32, 101, 120, 112, 97, 110, 100, 32, 102, 101, 101, 100, 107, 101, 121, 115, 32, 102, 105, 108, 116, 101, 114, 32, 102, 108, 111, 97, 116, 50, 110, 114, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 32, 102, 111, 108, 100, 99, 108, 111, 115, 101, 100, 101, 110, 100, 32, 102, 111, 108, 100, 116, 101, 120, 116, 114, 101, 115, 117, 108, 116, 32, 103, 97, 114, 98, 97, 103, 101, 99, 111, 108, 108, 101, 99, 116, 32, 103, 101, 116, 98, 117, 102, 118, 97, 114, 32, 103, 101, 116, 99, 109, 100, 108, 105, 110, 101, 32, 103, 101, 116, 99, 119, 100, 32, 103, 101, 116, 102, 115, 105, 122, 101, 32, 103, 101, 116, 108, 105, 110, 101, 32, 103, 101, 116, 112, 105, 100, 32, 103, 101, 116, 114, 101, 103, 32, 103, 101, 116, 116, 97, 98, 119, 105, 110, 118, 97, 114, 32, 103, 101, 116, 119, 105, 110, 118, 97, 114, 32, 104, 97, 115, 32, 104, 97, 115, 109, 97, 112, 116, 111, 32, 104, 105, 115, 116, 103, 101, 116, 32, 104, 108, 73, 68, 32, 105, 110, 100, 101, 110, 116, 32, 105, 110, 112, 117, 116, 100, 105, 97, 108, 111, 103, 32, 105, 110, 112, 117, 116, 115, 97, 118, 101, 32, 105, 110, 118, 101, 114, 116, 32, 105, 116, 101, 109, 115, 32, 108, 101, 110, 32, 108, 105, 110, 101, 32, 108, 111, 99, 97, 108, 116, 105, 109, 101, 32, 108, 117, 97, 101, 118, 97, 108, 32, 109, 97, 112, 99, 104, 101, 99, 107, 32, 109, 97, 116, 99, 104, 97, 114, 103, 32, 109, 97, 116, 99, 104, 108, 105, 115, 116, 32, 109, 105, 110, 32, 109, 122, 101, 118, 97, 108, 32, 111, 114, 32, 112, 114, 101, 118, 110, 111, 110, 98, 108, 97, 110, 107, 32, 112, 121, 51, 101, 118, 97, 108, 32, 114]);
        fileData6.push.apply(fileData6, [101, 97, 100, 102, 105, 108, 101, 32, 114, 101, 109, 111, 116, 101, 95, 101, 120, 112, 114, 32, 10, 10, 34, 45, 45, 45, 32, 115, 121, 110, 116, 97, 120, 32, 104, 101, 114, 101, 32, 97, 110, 100, 32, 97, 98, 111, 118, 101, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 98, 121, 32, 109, 107, 118, 105, 109, 118, 105, 109, 32, 45, 45, 45, 10, 34, 32, 83, 112, 101, 99, 105, 97, 108, 32, 86, 105, 109, 32, 72, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 32, 40, 110, 111, 116, 32, 97, 117, 116, 111, 109, 97, 116, 105, 99, 41, 32, 123, 123, 123, 49, 10, 10, 34, 32, 99, 111, 109, 109, 97, 110, 100, 115, 32, 110, 111, 116, 32, 112, 105, 99, 107, 101, 100, 32, 117, 112, 32, 98, 121, 32, 116, 104, 101, 32, 103, 101, 110, 101, 114, 97, 116, 111, 114, 32, 40, 100, 117, 101, 32, 116, 111, 32, 110, 111, 110, 45, 115, 116, 97, 110, 100, 97, 114, 100, 32, 102, 111, 114, 109, 97, 116, 41, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 112, 121, 51, 10, 10, 34, 32, 68, 101, 112, 114, 101, 99, 97, 116, 101, 100, 32, 118, 97, 114, 105, 97, 98, 108, 101, 32, 111, 112, 116, 105, 111, 110, 115, 32, 123, 123, 123, 50, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 95, 109, 105, 110, 108, 105, 110, 101, 115, 34, 41, 10, 32, 108, 101, 116, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 109, 105, 110, 108, 105, 110, 101, 115, 61, 32, 103, 58, 118, 105, 109, 95, 109, 105, 110, 108, 105, 110, 101, 115, 10, 101, 110, 100, 105, 102, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 95, 109, 97, 120, 108, 105, 110, 101, 115, 34, 41, 10, 32, 108, 101, 116, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 109, 97, 120, 108, 105, 110, 101, 115, 61, 32, 103, 58, 118, 105, 109, 95, 109, 97, 120, 108, 105, 110, 101, 115, 10, 101, 110, 100, 105, 102, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 116, 97, 120, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 10, 32, 108, 101, 116, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 61, 32, 103, 58, 118, 105, 109, 115, 121, 110, 116, 97, 120, 95, 110, 111, 101, 114, 114, 111, 114, 10, 101, 110, 100, 105, 102, 10, 10, 34, 32, 78, 117, 109, 98, 101, 114, 115, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 78, 117, 109, 98, 101, 114, 9, 34, 92, 60, 92, 100, 92, 43, 92, 37, 40, 92, 46, 92, 100, 92, 43, 92, 37, 40, 91, 101, 69, 93, 91, 43, 45, 93, 92, 61, 92, 100, 92, 43, 92, 41, 92, 61, 92, 41, 92, 61, 34, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 108, 111, 98, 97, 108, 44, 118, 105, 109, 83, 117, 98, 115, 116, 44, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 78, 117, 109, 98, 101, 114, 9, 34, 45, 92, 100, 92, 43, 92, 37, 40, 92, 46, 92, 100, 92, 43, 92, 37, 40, 91, 101, 69, 93, 91, 43, 45, 93, 92, 61, 92, 100, 92, 43, 92, 41, 92, 61, 92, 41, 92, 61, 34, 32, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 108, 111, 98, 97, 108, 44, 118, 105, 109, 83, 117, 98, 115, 116, 44, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 78, 117, 109, 98, 101, 114, 9, 34, 92, 60, 48, 91, 120, 88, 93, 92, 120, 92, 43, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 78, 117, 109, 98, 101, 114, 9, 34, 35, 92, 120, 92, 123, 54, 125, 34, 10, 10, 34, 32, 65, 108, 108, 32, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 115, 32, 97, 114, 101, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 98, 121, 32, 118, 105, 109, 73, 115, 67, 111, 109, 109, 97, 110, 100, 115, 46, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 67, 109, 100, 83, 101, 112, 9, 34, 91, 58, 124, 93, 92, 43, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 65, 100, 100, 114, 101, 115, 115, 44, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 44, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 44, 118, 105, 109, 69, 120, 116, 67, 109, 100, 44, 118, 105, 109, 70, 105, 108, 116, 101, 114, 44, 118, 105, 109, 76, 101, 116, 44, 118, 105, 109, 77, 97, 112, 44, 118, 105, 109, 77, 97, 114, 107, 44, 118, 105, 109, 83, 101, 116, 44, 118, 105, 109, 83, 121, 110, 116, 97, 120, 44, 118, 105, 109, 85, 115, 101, 114, 67, 109, 100, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 73, 115, 67, 111, 109, 109, 97, 110, 100, 9, 34, 92, 60, 92, 104, 92, 119, 42, 92, 62, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 86, 97, 114, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 60, 92, 104, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 35, 95, 93, 42, 92, 62, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 86, 97, 114, 9, 9, 34, 92, 60, 91, 98, 119, 103, 108, 115, 97, 118, 93, 58, 92, 104, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 35, 95, 93, 42, 92, 62, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 70, 66, 86, 97, 114, 32, 32, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 32, 32, 34, 92, 60, 91, 98, 119, 103, 108, 115, 97, 118, 93, 58, 92, 104, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 35, 95, 93, 42, 92, 62, 34, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 105, 110, 10, 10, 34, 32, 73, 110, 115, 101, 114, 116, 105, 111, 110, 115, 32, 65, 110, 100, 32, 65, 112, 112, 101, 110, 100, 115, 58, 32, 105, 110, 115, 101, 114, 116, 32, 97, 112, 112, 101, 110, 100, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 73, 110, 115, 101, 114, 116, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 115, 116, 97, 114, 116, 61, 34, 94, 91, 58, 32, 92, 116, 93, 42, 92, 40, 92, 100, 92, 43, 92, 40, 44, 92, 100, 92, 43, 92, 41, 92, 61, 92, 41, 92, 61, 97, 92, 37, 91, 112, 112, 101, 110, 100, 93, 36, 34, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 101, 110, 100, 61, 34, 94, 92, 46, 36, 34, 34, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 73, 110, 115, 101, 114, 116, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 115, 116, 97, 114, 116, 61, 34, 94, 91, 58, 32, 92, 116, 93, 42, 92, 40, 92, 100, 92, 43, 92, 40, 44, 92, 100, 92, 43, 92, 41, 92, 61, 92, 41, 92, 61, 99, 92, 37, 91, 104, 97, 110, 103, 101, 93, 36, 34, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 101, 110, 100, 61, 34, 94, 92, 46, 36, 34, 34, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 73, 110, 115, 101, 114, 116, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 115, 116, 97, 114, 116, 61, 34, 94, 91, 58, 32, 92, 116, 93, 42, 92, 40, 92, 100, 92, 43, 92, 40, 44, 92, 100, 92, 43, 92, 41, 92, 61, 92, 41, 92, 61, 105, 92, 37, 91, 110, 115, 101, 114, 116, 93, 36, 34, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 101, 110, 100, 61, 34, 94, 92, 46, 36, 34, 34, 10, 10, 34, 32, 66, 101, 104, 97, 118, 101, 33, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 66, 101, 104, 97, 118, 101, 9, 34, 92, 60, 98, 101, 92, 37, 91, 104, 97, 118, 101, 93, 92, 62, 34, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 66, 101, 104, 97, 118, 101, 77, 111, 100, 101, 108, 44, 118, 105, 109, 66, 101, 104, 97, 118, 101, 69, 114, 114, 111, 114, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 66, 101, 104, 97, 118, 101, 77, 111, 100, 101, 108, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 109, 115, 119, 105, 110, 9, 120, 116, 101, 114, 109, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 32, 38, 38, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 98, 101, 104, 97, 118, 101, 101, 114, 114, 111, 114, 34, 41, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 66, 101, 104, 97, 118, 101, 69, 114, 114, 111, 114, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 91, 94, 32, 93, 92, 43, 34, 10, 101, 110, 100, 105, 102, 10, 10, 34, 32, 70, 105, 108, 101, 116, 121, 112, 101, 115, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 70, 105, 108, 101, 116, 121, 112, 101, 9, 34, 92, 60, 102, 105, 108, 101, 116, 92, 37, 91, 121, 112, 101, 93, 92, 40, 92, 115, 92, 43, 92, 73, 92, 105, 42, 92, 41, 42, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 70, 84, 67, 109, 100, 44, 118, 105, 109, 70, 84, 79, 112, 116, 105, 111, 110, 44, 118, 105, 109, 70, 84, 69, 114, 114, 111, 114, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 32, 38, 38, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 118, 105, 109, 70, 84, 69, 114, 114, 111, 114, 34, 41, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 70, 84, 69, 114, 114, 111, 114, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 73, 92, 105, 42, 34, 10, 101, 110, 100, 105, 102, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 70, 84, 67, 109, 100, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 102, 105, 108, 101, 116, 91, 121, 112, 101, 93, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 70, 84, 79, 112, 116, 105, 111, 110, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 100, 101, 116, 101, 99, 116, 32, 105, 110, 100, 101, 110, 116, 32, 111, 102, 102, 32, 111, 110, 32, 112, 108, 117, 103, 105, 110, 10, 10, 34, 32, 65, 117, 103, 114, 111, 117, 112, 32, 58, 32, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 69, 114, 114, 111, 114, 32, 114, 101, 109, 111, 118, 101, 100, 32, 98, 101, 99, 97, 117, 115, 101, 32, 108, 111, 110, 103, 32, 97, 117, 103, 114, 111, 117, 112, 115, 32, 99, 97, 117, 115, 101, 100, 32, 115, 121, 110, 99, 39, 105, 110, 103, 32, 112, 114, 111, 98, 108, 101, 109, 115, 46, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 32, 58, 32, 84, 114, 97, 100, 101, 45, 111, 102, 102, 58, 32, 73, 110, 99, 114, 101, 97, 115, 105, 110, 103, 32, 115, 121, 110, 99, 108, 105, 110, 101, 115, 32, 119, 105, 116, 104, 32, 115, 108, 111, 119, 101, 114, 32, 101, 100, 105, 116, 105, 110, 103, 32, 118, 115, 32, 97, 117, 103, 114, 111, 117, 112, 32, 69, 78, 68, 32, 101, 114, 114, 111, 114, 32, 99, 104, 101, 99, 107, 105, 110, 103, 46, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 73, 115, 67, 111, 109, 109, 97, 110, 100, 44, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 44, 118, 105, 109, 85, 115, 101, 114, 67, 109, 100, 44, 118, 105, 109, 69, 120, 101, 99, 117, 116, 101, 44, 118, 105, 109, 78, 111, 116, 70, 117, 110, 99, 44, 118, 105, 109, 70, 117, 110, 99, 78, 97, 109, 101, 44, 118, 105, 109, 70, 117, 110, 99, 116, 105, 111, 110, 44, 118, 105, 109, 70, 117, 110, 99, 116, 105, 111, 110, 69, 114, 114, 111, 114, 44, 118, 105, 109, 76, 105, 110, 101, 67, 111, 109, 109, 101, 110, 116, 44, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 44, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 78, 117, 109, 98, 101, 114, 44, 118, 105, 109, 79, 112, 101, 114, 80, 97, 114, 101, 110, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 44, 118, 105, 109, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 83, 117, 98, 115, 116, 44, 118, 105, 109, 77, 97, 114, 107, 44, 118, 105, 109, 82, 101, 103, 105, 115, 116, 101, 114, 44, 118, 105, 109, 65, 100, 100, 114, 101, 115, 115, 44, 118, 105, 109, 70, 105, 108, 116, 101, 114, 44, 118, 105, 109, 67, 109, 112, 108, 120, 82, 101, 112, 101, 97, 116, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 44, 118, 105, 109, 76, 101, 116, 44, 118, 105, 109, 83, 101, 116, 44, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 44, 118, 105, 109, 82, 101, 103, 105, 111, 110, 44, 118, 105, 109, 83, 121, 110, 76, 105, 110, 101, 44, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 44, 118, 105, 109, 67, 116, 114, 108, 67, 104, 97, 114, 44, 118, 105, 109, 70, 117, 110, 99, 86, 97, 114, 44, 118, 105, 109, 67, 111, 110, 116, 105, 110, 117, 101, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 34, 41, 32, 38, 38, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 32, 61, 126, 32, 39, 97, 39, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 32, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 9, 102, 111, 108, 100, 32, 115, 116, 97, 114, 116, 61, 34, 92, 60, 97, 117, 103, 92, 37, 91, 114, 111, 117, 112, 93, 92, 62, 92, 115, 92, 43, 92, 104, 92, 119, 42, 34, 32, 101, 110, 100, 61, 34, 92, 60, 97, 117, 103, 92, 37, 91, 114, 111, 117, 112, 93, 92, 62, 92, 115, 92, 43, 91, 101, 69, 93, 91, 110, 78, 93, 91, 100, 68, 93, 92, 62, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 75, 101, 121, 44, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 44, 64, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 76, 105, 115, 116, 32, 107, 101, 101, 112, 101, 110, 100, 10, 101, 108, 115, 101, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 32, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 9, 115, 116, 97, 114, 116, 61, 34, 92, 60, 97, 117, 103, 92, 37, 91, 114, 111, 117, 112, 93, 92, 62, 92, 115, 92, 43, 92, 104, 92, 119, 42, 34, 32, 101, 110, 100, 61, 34, 92, 60, 97, 117, 103, 92, 37, 91, 114, 111, 117, 112, 93, 92, 62, 92, 115, 92, 43, 91, 101, 69, 93, 91, 110, 78, 93, 91, 100, 68, 93, 92, 62, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 75, 101, 121, 44, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 44, 64, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 76, 105, 115, 116, 32, 107, 101, 101, 112, 101, 110, 100, 10, 101, 110, 100, 105, 102, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 9, 34, 97, 117, 103, 92, 37, 91, 114, 111, 117, 112, 93, 33, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 75, 101, 121, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 32, 38, 38, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 97, 117, 103, 114, 111, 117, 112, 101, 114, 114, 111, 114, 34, 41, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 32, 32, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 69, 114, 114, 111, 114, 9, 34, 92, 60, 97, 117, 103, 92, 37, 91, 114, 111, 117, 112, 93, 92, 62, 92, 115, 92, 43, 91, 101, 69, 93, 91, 110, 78, 93, 91, 100, 68, 93, 92, 62, 34, 10, 101, 110, 100, 105, 102, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 75, 101, 121, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 117, 103, 91, 114, 111, 117, 112, 93, 10, 10, 34, 32, 79, 112, 101, 114, 97, 116, 111, 114, 115, 58, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 34, 32, 67, 79, 77, 66, 65, 75, 58, 32, 118, 105, 109, 79, 112, 101, 114, 80, 97, 114, 101, 110, 32, 117, 115, 101, 100, 32, 116, 111, 32, 104, 97, 118, 101, 32, 34, 111, 110, 101, 108, 105, 110, 101, 34, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 79, 112, 101, 114, 71, 114, 111, 117, 112, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 69, 110, 118, 118, 97, 114, 44, 118, 105, 109, 70, 117, 110, 99, 44, 118, 105, 109, 70, 117, 110, 99, 86, 97, 114, 44, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 79, 112, 101, 114, 80, 97, 114, 101, 110, 44, 118, 105, 109, 78, 117, 109, 98, 101, 114, 44, 118, 105, 109, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 82, 101, 103, 105, 115, 116, 101, 114, 44, 118, 105, 109, 67, 111, 110, 116, 105, 110, 117, 101, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 79, 112, 101, 114, 9, 34, 92, 40, 61, 61, 92, 124, 33, 61, 92, 124, 62, 61, 92, 124, 60, 61, 92, 124, 61, 92, 126, 92, 124, 33, 92, 126, 92, 124, 62, 92, 124, 60, 92, 124, 61, 92, 41, 91, 63, 35, 93, 92, 123, 48, 44, 50, 125, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 79, 112, 101, 114, 9, 34, 124, 124, 92, 124, 38, 38, 92, 124, 91, 45, 43, 46, 93, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 79, 112, 101, 114, 80, 97, 114, 101, 110, 32, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 80, 97, 114, 101, 110, 83, 101, 112, 9, 115, 116, 97, 114, 116, 61, 34, 40, 34, 32, 101, 110, 100, 61, 34, 41, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 79, 112, 101, 114, 71, 114, 111, 117, 112, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 79, 112, 101, 114, 80, 97, 114, 101, 110, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 101, 112, 9, 115, 116, 97, 114, 116, 61, 34, 123, 34, 32, 101, 110, 100, 61, 34, 125, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 79, 112, 101, 114, 71, 114, 111, 117, 112, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 86, 97, 114, 44, 118, 105, 109, 70, 117, 110, 99, 86, 97, 114, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 32, 38, 38, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 111, 112, 101, 114, 101, 114, 114, 111, 114, 34, 41, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 79, 112, 101, 114, 69, 114, 114, 111, 114, 9, 34, 41, 34, 10, 101, 110, 100, 105, 102, 10, 10, 34, 32, 70, 117, 110, 99, 116, 105, 111, 110, 115, 32, 58, 32, 84, 97, 103, 32, 105, 115, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 102, 111, 114, 32, 116, 104, 111, 115, 101, 32, 119, 104, 111, 32, 119, 105, 115, 104, 32, 116, 111, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 32, 116, 97, 103, 103, 101, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 70, 117, 110, 99, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 44, 118, 105, 109, 70, 117, 110, 99, 116, 105, 111, 110, 69, 114, 114, 111, 114, 44, 118, 105, 109, 70, 117, 110, 99, 75, 101, 121, 44, 84, 97, 103, 44, 118, 105, 109, 70, 117, 110, 99, 83, 73, 68, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 65, 98, 98, 44, 118, 105, 109, 65, 100, 100, 114, 101, 115, 115, 44, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 75, 101, 121, 44, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 44, 118, 105, 109, 67, 109, 112, 108, 120, 82, 101, 112, 101, 97, 116, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 44, 118, 105, 109, 67, 111, 110, 116, 105, 110, 117, 101, 44, 118, 105, 109, 67, 116, 114, 108, 67, 104, 97, 114, 44, 118, 105, 109, 69, 99, 104, 111, 44, 118, 105, 109, 69, 99, 104, 111, 72, 76, 44, 118, 105, 109, 69, 120, 101, 99, 117, 116, 101, 44, 118, 105, 109, 73, 102, 44, 118, 105, 109, 73, 115, 67, 111, 109, 109, 97, 110, 100, 44, 118, 105, 109, 70, 66, 86, 97, 114, 44, 118, 105, 109, 70, 117, 110, 99, 44, 118, 105, 109, 70, 117, 110, 99, 116, 105, 111, 110, 44, 118, 105, 109, 70, 117, 110, 99, 86, 97, 114, 44, 118, 105, 109, 72, 105, 103, 104, 108, 105, 103, 104, 116, 44, 118, 105, 109, 73, 115, 67, 111, 109, 109, 97, 110, 100, 44, 118, 105, 109, 76, 101, 116, 44, 118, 105, 109, 76, 105, 110, 101, 67, 111, 109, 109, 101, 110, 116, 44, 118, 105, 109, 77, 97, 112, 44, 118, 105, 109, 77, 97, 114, 107, 44, 118, 105, 109, 78, 111, 114, 109, 44, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 44, 118, 105, 109, 78, 111, 116, 70, 117, 110, 99, 44, 118, 105, 109, 78, 117, 109, 98, 101, 114, 44, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 79, 112, 101, 114, 80, 97, 114, 101, 110, 44, 118, 105, 109, 82, 101, 103, 105, 111, 110, 44, 118, 105, 109, 82, 101, 103, 105, 115, 116, 101, 114, 44, 118, 105, 109, 83, 101, 116, 44, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 44, 118, 105, 109, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 83, 117, 98, 115, 116, 44, 118, 105, 109, 83, 121, 110, 76, 105, 110, 101, 44, 118, 105, 109, 85, 110, 109, 97, 112, 44, 118, 105, 109, 85, 115, 101, 114, 67, 111, 109, 109, 97, 110, 100, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 70, 117, 110, 99, 116, 105, 111, 110, 9, 34, 92, 60, 102, 117, 92, 37, 91, 110, 99, 116, 105, 111, 110, 93, 33, 92, 61, 92, 115, 92, 43, 92, 37, 40, 60, 91, 115, 83, 93, 91, 105, 73, 93, 91, 100, 68, 93, 62, 92, 124, 91, 115, 83, 103, 71, 98, 66, 119, 87, 116, 84, 108, 76, 93, 58, 92, 41, 92, 61, 92, 37, 40, 92, 105, 92, 124, 91, 35, 46, 93, 92, 124, 123, 46, 92, 123, 45, 49, 44, 125, 125, 92, 41, 42, 92, 122, 101, 92, 115, 42, 40, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 70, 117, 110, 99, 76, 105, 115, 116, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 10, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 34, 41, 32, 38, 38, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 32, 61, 126, 32, 39, 102, 39, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 102, 111, 108, 100, 32, 115, 116, 97, 114, 116, 61, 34, 92, 122, 101, 40, 34, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 101, 110, 100, 61, 34, 92, 60, 92, 40, 101, 110, 100, 102, 92, 62, 92, 124, 101, 110, 100, 102, 117, 92, 37, 91, 110, 99, 116, 105, 111, 110, 93, 92, 62, 92, 41, 34, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 10, 101, 108, 115, 101, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 115, 116, 97, 114, 116, 61, 34, 92, 122, 101, 40, 34, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 101, 110, 100, 61, 34, 92, 60, 92, 40, 101, 110, 100, 102, 92, 62, 92, 124, 101, 110, 100, 102, 117, 92, 37, 91, 110, 99, 116, 105, 111, 110, 93, 92, 62, 92, 41, 34, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 10, 101, 110, 100, 105, 102, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 70, 117, 110, 99, 86, 97, 114, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 97, 58, 92, 40, 92, 104, 92, 119, 42, 92, 124, 92, 100, 92, 43, 92, 41, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 70, 117, 110, 99, 83, 73, 68, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 99, 60, 115, 105, 100, 62, 92, 124, 92, 60, 115, 58, 34, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 70, 117, 110, 99, 75, 101, 121, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 102, 117, 91, 110, 99, 116, 105, 111, 110, 93, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 70, 117, 110, 99, 66, 108, 97, 110, 107, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 115, 92, 43, 34, 10, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 80, 97, 116, 116, 101, 114, 110, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 115, 116, 97, 114, 116, 9, 115, 107, 105, 112, 9, 101, 110, 100, 10, 10, 34, 32, 83, 112, 101, 99, 105, 97, 108, 32, 70, 105, 108, 101, 110, 97, 109, 101, 115, 44, 32, 77, 111, 100, 105, 102, 105, 101, 114, 115, 44, 32, 69, 120, 116, 101, 110, 115, 105, 111, 110, 32, 82, 101, 109, 111, 118, 97, 108, 58, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 9, 34, 60, 99, 92, 40, 119, 111, 114, 100, 92, 124, 87, 79, 82, 68, 92, 41, 62, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 77, 111, 100, 44, 118, 105, 109, 83, 117, 98, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 9, 34, 60, 92, 40, 91, 97, 99, 115, 93, 102, 105, 108, 101, 92, 124, 97, 109, 97, 116, 99, 104, 92, 124, 97, 98, 117, 102, 92, 41, 62, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 77, 111, 100, 44, 118, 105, 109, 83, 117, 98, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 9, 34, 92, 115, 37, 91, 32, 92, 116, 58, 93, 34, 109, 115, 61, 115, 43, 49, 44, 109, 101, 61, 101, 45, 49, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 77, 111, 100, 44, 118, 105, 109, 83, 117, 98, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 9, 34, 92, 115, 37, 36, 34, 109, 115, 61, 115, 43, 49, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 77, 111, 100, 44, 118, 105, 109, 83, 117, 98, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 9, 34, 92, 115, 37, 60, 34, 109, 115, 61, 115, 43, 49, 44, 109, 101, 61, 101, 45, 49, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 77, 111, 100, 44, 118, 105, 109, 83, 117, 98, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 9, 34, 35, 92, 100, 92, 43, 92, 124, 91, 35, 37, 93, 60, 92, 62, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 77, 111, 100, 44, 118, 105, 109, 83, 117, 98, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 77, 111, 100, 9, 34, 92, 40, 58, 91, 112, 104, 116, 114, 101, 93, 92, 41, 92, 43, 34, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 10, 10, 34, 32, 85, 115, 101, 114, 45, 83, 112, 101, 99, 105, 102, 105, 101, 100, 32, 67, 111, 109, 109, 97, 110, 100, 115, 58, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 85, 115, 101, 114, 67, 109, 100, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 65, 100, 100, 114, 101, 115, 115, 44, 118, 105, 109, 83, 121, 110, 116, 97, 120, 44, 118, 105, 109, 72, 105, 103, 104, 108, 105, 103, 104, 116, 44, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 44, 118, 105, 109, 67, 109, 112, 108, 120, 82, 101, 112, 101, 97, 116, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 44, 118, 105, 109, 67, 116, 114, 108, 67, 104, 97, 114, 44, 118, 105, 109, 69, 115, 99, 97, 112, 101, 66, 114, 97, 99, 101, 44, 118, 105, 109, 70, 105, 108, 116, 101, 114, 44, 118, 105, 109, 70, 117, 110, 99, 44, 118, 105, 109, 70, 117, 110, 99, 78, 97, 109, 101, 44, 118, 105, 109, 70, 117, 110, 99, 116, 105, 111, 110, 44, 118, 105, 109, 70, 117, 110, 99, 116, 105, 111, 110, 69, 114, 114, 111, 114, 44, 118, 105, 109, 73, 115, 67, 111, 109, 109, 97, 110, 100, 44, 118, 105, 109, 77, 97, 114, 107, 44, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 44, 118, 105, 109, 78, 117, 109, 98, 101, 114, 44, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 82, 101, 103, 105, 111, 110, 44, 118, 105, 109, 82, 101, 103, 105, 115, 116, 101, 114, 44, 118, 105, 109, 76, 101, 116, 44, 118, 105, 109, 83, 101, 116, 44, 118, 105, 109, 83, 101, 116, 69, 113, 117, 97, 108, 44, 118, 105, 109, 83, 101, 116, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 44, 118, 105, 109, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 83, 117, 98, 115, 116, 44, 118, 105, 109, 83, 117, 98, 115, 116, 82, 101, 112, 44, 118, 105, 109, 83, 117, 98, 115, 116, 82, 97, 110, 103, 101, 44, 118, 105, 109, 83, 121, 110, 76, 105, 110, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 85, 115, 101, 114, 67, 111, 109, 109, 97, 110, 100, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 99, 111, 109, 91, 109, 97, 110, 100, 93, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 85, 115, 101, 114, 67, 109, 100, 9, 34, 92, 60, 99, 111, 109, 92, 37, 91, 109, 97, 110, 100, 93, 33, 92, 61, 92, 62, 46, 42, 36, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 44, 118, 105, 109, 85, 115, 101, 114, 67, 111, 109, 109, 97, 110, 100, 44, 64, 118, 105, 109, 85, 115, 101, 114, 67, 109, 100, 76, 105, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 45, 110, 92, 37, 91, 97, 114, 103, 115, 93, 61, 91, 48, 49, 42, 63, 43, 93, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 75, 101, 121, 44, 118, 105, 109, 79, 112, 101, 114, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 45, 99, 111, 109, 92, 37, 91, 112, 108, 101, 116, 101, 93, 61, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 75, 101, 121, 44, 118, 105, 109, 79, 112, 101, 114, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 67, 109, 112, 108, 116, 44, 118, 105, 109, 85, 115, 101, 114, 67, 109, 100, 69, 114, 114, 111, 114, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 45, 114, 97, 92, 37, 91, 110, 103, 101, 93, 92, 40, 61, 37, 92, 124, 61, 92, 100, 92, 43, 92, 41, 92, 61, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 78, 117, 109, 98, 101, 114, 44, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 75, 101, 121, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 45, 99, 111, 117, 92, 37, 91, 110, 116, 93, 61, 92, 100, 92, 43, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 78, 117, 109, 98, 101, 114, 44, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 75, 101, 121, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 45, 98, 97, 110, 103, 92, 61, 92, 62, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 75, 101, 121, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 45, 98, 97, 114, 92, 62, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 75, 101, 121, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 45, 114, 101, 92, 37, 91, 103, 105, 115, 116, 101, 114, 93, 92, 62, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 75, 101, 121, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 32, 38, 38, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 117, 115, 101, 114, 99, 109, 100, 101, 114, 114, 111, 114, 34, 41, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 85, 115, 101, 114, 67, 109, 100, 69, 114, 114, 111, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 83, 92, 43, 92, 62, 34, 10, 101, 110, 100, 105, 102, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 105, 103, 110, 111, 114, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 75, 101, 121, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 98, 97, 114, 9, 98, 97, 110, 91, 103, 93, 9, 99, 111, 117, 91, 110, 116, 93, 9, 114, 97, 91, 110, 103, 101, 93, 32, 99, 111, 109, 91, 112, 108, 101, 116, 101, 93, 9, 110, 91, 97, 114, 103, 115, 93, 9, 114, 101, 91, 103, 105, 115, 116, 101, 114, 93, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 67, 109, 112, 108, 116, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 97, 117, 103, 114, 111, 117, 112, 32, 98, 117, 102, 102, 101, 114, 32, 99, 111, 108, 111, 114, 32, 99, 111, 109, 109, 97, 110, 100, 32, 99, 111, 109, 112, 105, 108, 101, 114, 32, 99, 115, 99, 111, 112, 101, 32, 100, 105, 114, 32, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 32, 101, 118, 101, 110, 116, 32, 101, 120, 112, 114, 101, 115, 115, 105, 111, 110, 32, 102, 105, 108, 101, 32, 102, 105, 108, 101, 95, 105, 110, 95, 112, 97, 116, 104, 32, 102, 105, 108, 101, 116, 121, 112, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 104, 101, 108, 112, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 32, 108, 111, 99, 97, 108, 101, 32, 109, 97, 112, 112, 105, 110, 103, 32, 109, 101, 110, 117, 32, 111, 112, 116, 105, 111, 110, 32, 115, 104, 101, 108, 108, 99, 109, 100, 32, 115, 105, 103, 110, 32, 115, 121, 110, 116, 97, 120, 32, 116, 97, 103, 32, 116, 97, 103, 95, 108, 105, 115, 116, 102, 105, 108, 101, 115, 32, 118, 97, 114, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 67, 109, 112, 108, 116, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 99, 117, 115, 116, 111, 109, 32, 99, 117, 115, 116, 111, 109, 108, 105, 115, 116, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 67, 109, 112, 108, 116, 70, 117, 110, 99, 44, 118, 105, 109, 85, 115, 101, 114, 67, 109, 100, 69, 114, 114, 111, 114, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 67, 109, 112, 108, 116, 70, 117, 110, 99, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 44, 92, 37, 40, 91, 115, 83, 93, 58, 92, 124, 60, 91, 115, 83, 93, 91, 105, 73, 93, 91, 100, 68, 93, 62, 92, 41, 92, 61, 92, 37, 40, 92, 104, 92, 119, 42, 92, 37, 40, 35, 92, 104, 92, 119, 42, 92, 41, 92, 43, 92, 124, 92, 104, 92, 119, 42, 92, 41, 34, 104, 115, 61, 115, 43, 49, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 85, 115, 101, 114, 67, 109, 100, 69, 114, 114, 111, 114, 10, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 109, 97, 116, 99, 104, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 67, 109, 112, 108, 116, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 99, 117, 115, 116, 111, 109, 44, 92, 117, 92, 119, 42, 34, 10, 10, 34, 32, 76, 111, 119, 101, 114, 32, 80, 114, 105, 111, 114, 105, 116, 121, 32, 67, 111, 109, 109, 101, 110, 116, 115, 58, 32, 97, 102, 116, 101, 114, 32, 115, 111, 109, 101, 32, 118, 105, 109, 32, 99, 111, 109, 109, 97, 110, 100, 115, 46, 46, 46, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 9, 101, 120, 99, 108, 117, 100, 101, 110, 108, 32, 43, 92, 115, 34, 91, 94, 92, 45, 58, 46, 37, 35, 61, 42, 93, 46, 42, 36, 43, 108, 99, 61, 49, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 71, 114, 111, 117, 112, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 83, 116, 114, 105, 110, 103, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 9, 43, 92, 60, 101, 110, 100, 105, 102, 92, 115, 92, 43, 34, 46, 42, 36, 43, 108, 99, 61, 53, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 71, 114, 111, 117, 112, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 83, 116, 114, 105, 110, 103, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 9, 43, 92, 60, 101, 108, 115, 101, 92, 115, 92, 43, 34, 46, 42, 36, 43, 108, 99, 61, 52, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 71, 114, 111, 117, 112, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 83, 116, 114, 105, 110, 103, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 83, 116, 114, 105, 110, 103, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 111, 110, 101, 108, 105, 110, 101, 32, 115, 116, 97, 114, 116, 61, 39, 92, 83, 92, 115, 92, 43, 34, 39, 109, 115, 61, 101, 9, 101, 110, 100, 61, 39, 34, 39, 10, 10, 34, 32, 69, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 32, 86, 97, 114, 105, 97, 98, 108, 101, 115, 58, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 69, 110, 118, 118, 97, 114, 9, 34, 92, 36, 92, 73, 92, 105, 42, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 69, 110, 118, 118, 97, 114, 9, 34, 92, 36, 123, 92, 73, 92, 105, 42, 125, 34, 10, 10, 34, 32, 73, 110, 45, 83, 116, 114, 105, 110, 103, 32, 83, 112, 101, 99, 105, 97, 108, 115, 58, 32, 123, 123, 123, 50, 10, 34, 32, 84, 114, 121, 32, 116, 111, 32, 99, 97, 116, 99, 104, 32, 115, 116, 114, 105, 110, 103, 115, 44, 32, 105, 102, 32, 110, 111, 116, 104, 105, 110, 103, 32, 101, 108, 115, 101, 32, 109, 97, 116, 99, 104, 101, 115, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 105, 116, 32, 109, 117, 115, 116, 32, 112, 114, 101, 99, 101, 100, 101, 32, 116, 104, 101, 32, 111, 116, 104, 101, 114, 115, 33, 41, 10, 34, 32, 32, 118, 105, 109, 69, 115, 99, 97, 112, 101, 66, 114, 97, 99, 101, 32, 104, 97, 110, 100, 108, 101, 115, 32, 91, 34, 93, 32, 32, 91, 93, 34, 93, 32, 40, 105, 101, 46, 32, 34, 115, 32, 100, 111, 110, 39, 116, 32, 116, 101, 114, 109, 105, 110, 97, 116, 101, 32, 115, 116, 114, 105, 110, 103, 32, 105, 110, 115, 105, 100, 101, 32, 91, 93, 41, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 69, 115, 99, 97, 112, 101, 66, 114, 97, 99, 101, 9, 111, 110, 101, 108, 105, 110, 101, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 32, 115, 116, 97, 114, 116, 61, 34, 91, 94, 92, 92, 93, 92, 40, 92, 92, 92, 92, 92, 41, 42, 92, 91, 92, 122, 115, 92, 94, 92, 61, 92, 93, 92, 61, 34, 32, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 92, 124, 92, 92, 92, 93, 34, 32, 101, 110, 100, 61, 34, 93, 34, 109, 101, 61, 101, 45, 49, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 80, 97, 116, 83, 101, 112, 69, 114, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 92, 41, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 80, 97, 116, 83, 101, 112, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 92, 124, 34, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 80, 97, 116, 83, 101, 112, 90, 111, 110, 101, 9, 111, 110, 101, 108, 105, 110, 101, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 32, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 80, 97, 116, 83, 101, 112, 90, 32, 115, 116, 97, 114, 116, 61, 34, 92, 92, 37, 92, 61, 92, 122, 101, 40, 34, 32, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 34, 32, 101, 110, 100, 61, 34, 92, 92, 41, 92, 124, 91, 94, 92, 93, 91, 39, 34, 93, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 116, 114, 105, 110, 103, 71, 114, 111, 117, 112, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 80, 97, 116, 82, 101, 103, 105, 111, 110, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 80, 97, 116, 83, 101, 112, 82, 32, 115, 116, 97, 114, 116, 61, 34, 92, 92, 91, 122, 37, 93, 92, 61, 40, 34, 32, 101, 110, 100, 61, 34, 92, 92, 41, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 117, 98, 115, 116, 76, 105, 115, 116, 32, 111, 110, 101, 108, 105, 110, 101, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 78, 111, 116, 80, 97, 116, 83, 101, 112, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 92, 92, 92, 34, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 71, 114, 111, 117, 112, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 69, 115, 99, 97, 112, 101, 66, 114, 97, 99, 101, 44, 118, 105, 109, 80, 97, 116, 83, 101, 112, 44, 118, 105, 109, 78, 111, 116, 80, 97, 116, 83, 101, 112, 44, 118, 105, 109, 80, 97, 116, 83, 101, 112, 69, 114, 114, 44, 118, 105, 109, 80, 97, 116, 83, 101, 112, 90, 111, 110, 101, 44, 64, 83, 112, 101, 108, 108, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 9, 111, 110, 101, 108, 105, 110, 101, 32, 107, 101, 101, 112, 101, 110, 100, 9, 115, 116, 97, 114, 116, 61, 43, 91, 94, 58, 97, 45, 122, 65, 45, 90, 62, 33, 92, 92, 64, 93, 34, 43, 108, 99, 61, 49, 32, 115, 107, 105, 112, 61, 43, 92, 92, 92, 92, 92, 124, 92, 92, 34, 43, 32, 101, 110, 100, 61, 43, 34, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 116, 114, 105, 110, 103, 71, 114, 111, 117, 112, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 9, 111, 110, 101, 108, 105, 110, 101, 32, 107, 101, 101, 112, 101, 110, 100, 9, 115, 116, 97, 114, 116, 61, 43, 91, 94, 58, 97, 45, 122, 65, 45, 90, 62, 33, 92, 92, 64, 93, 39, 43, 108, 99, 61, 49, 32, 101, 110, 100, 61, 43, 39, 43, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 9, 111, 110, 101, 108, 105, 110, 101, 9, 115, 116, 97, 114, 116, 61, 43, 61, 33, 43, 108, 99, 61, 49, 9, 115, 107, 105, 112, 61, 43, 92, 92, 92, 92, 92, 124, 92, 92, 33, 43, 32, 101, 110, 100, 61, 43, 33, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 116, 114, 105, 110, 103, 71, 114, 111, 117, 112, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 9, 111, 110, 101, 108, 105, 110, 101, 9, 115, 116, 97, 114, 116, 61, 34, 61, 43, 34, 108, 99, 61, 49, 9, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 92, 124, 92, 92, 43, 34, 32, 101, 110, 100, 61, 34, 43, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 116, 114, 105, 110, 103, 71, 114, 111, 117, 112, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 9, 111, 110, 101, 108, 105, 110, 101, 9, 115, 116, 97, 114, 116, 61, 34, 92, 115, 47, 92, 115, 42, 92, 65, 34, 108, 99, 61, 49, 32, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 92, 124, 92, 92, 43, 34, 32, 101, 110, 100, 61, 34, 47, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 116, 114, 105, 110, 103, 71, 114, 111, 117, 112, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 43, 34, 91, 94, 34, 93, 42, 92, 92, 36, 43, 9, 115, 107, 105, 112, 110, 108, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 116, 114, 105, 110, 103, 67, 111, 110, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 67, 111, 110, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 43, 92, 40, 92, 92, 92, 92, 92, 124, 46, 92, 41, 92, 123, 45, 125, 91, 94]);
        fileData6.push.apply(fileData6, [92, 92, 93, 34, 43, 10, 10, 34, 32, 83, 117, 98, 115, 116, 105, 116, 117, 116, 105, 111, 110, 115, 58, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 83, 117, 98, 115, 116, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 80, 97, 116, 83, 101, 112, 44, 118, 105, 109, 80, 97, 116, 82, 101, 103, 105, 111, 110, 44, 118, 105, 109, 80, 97, 116, 83, 101, 112, 69, 114, 114, 44, 118, 105, 109, 83, 117, 98, 115, 116, 84, 119, 111, 66, 83, 44, 118, 105, 109, 83, 117, 98, 115, 116, 82, 97, 110, 103, 101, 44, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 83, 117, 98, 115, 116, 82, 101, 112, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 83, 117, 98, 115, 116, 83, 117, 98, 115, 116, 114, 44, 118, 105, 109, 83, 117, 98, 115, 116, 84, 119, 111, 66, 83, 44, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 83, 117, 98, 115, 116, 76, 105, 115, 116, 9, 97, 100, 100, 61, 118, 105, 109, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 117, 98, 115, 116, 9, 34, 92, 40, 58, 92, 43, 92, 115, 42, 92, 124, 94, 92, 115, 42, 92, 124, 124, 92, 115, 42, 92, 41, 92, 60, 92, 37, 40, 115, 92, 37, 91, 117, 98, 115, 116, 105, 116, 117, 116, 101, 93, 92, 124, 115, 109, 92, 37, 91, 97, 103, 105, 99, 93, 92, 124, 115, 110, 111, 92, 37, 91, 109, 97, 103, 105, 99, 93, 92, 41, 91, 58, 91, 58, 97, 108, 112, 104, 97, 58, 93, 93, 92, 64, 33, 34, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 117, 98, 115, 116, 80, 97, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 117, 98, 115, 116, 9, 34, 115, 92, 37, 91, 117, 98, 115, 116, 105, 116, 117, 116, 101, 93, 91, 58, 35, 91, 58, 97, 108, 112, 104, 97, 58, 93, 93, 92, 64, 33, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 117, 98, 115, 116, 80, 97, 116, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 117, 98, 115, 116, 9, 34, 47, 92, 122, 115, 115, 92, 37, 91, 117, 98, 115, 116, 105, 116, 117, 116, 101, 93, 92, 122, 101, 47, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 117, 98, 115, 116, 80, 97, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 117, 98, 115, 116, 49, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 115, 92, 37, 91, 117, 98, 115, 116, 105, 116, 117, 116, 101, 93, 92, 62, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 117, 98, 115, 116, 80, 97, 116, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 117, 98, 115, 116, 80, 97, 116, 32, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 117, 98, 115, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 34, 92, 122, 40, 91, 94, 97, 45, 122, 65, 45, 90, 40, 32, 92, 116, 91, 92, 93, 38, 93, 92, 41, 34, 114, 115, 61, 115, 43, 49, 32, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 92, 124, 92, 92, 92, 122, 49, 34, 32, 101, 110, 100, 61, 34, 92, 122, 49, 34, 114, 101, 61, 101, 45, 49, 44, 109, 101, 61, 101, 45, 49, 9, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 117, 98, 115, 116, 76, 105, 115, 116, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 117, 98, 115, 116, 82, 101, 112, 52, 9, 111, 110, 101, 108, 105, 110, 101, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 117, 98, 115, 116, 82, 101, 112, 52, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 117, 98, 115, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 34, 92, 122, 40, 46, 92, 41, 34, 32, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 92, 124, 92, 92, 92, 122, 49, 34, 32, 101, 110, 100, 61, 34, 92, 122, 49, 34, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 32, 101, 110, 100, 61, 34, 60, 91, 99, 67, 93, 91, 114, 82, 93, 62, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 117, 98, 115, 116, 82, 101, 112, 76, 105, 115, 116, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 117, 98, 115, 116, 70, 108, 97, 103, 69, 114, 114, 9, 111, 110, 101, 108, 105, 110, 101, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 9, 115, 116, 97, 114, 116, 61, 34, 92, 92, 92, 64, 60, 33, 92, 91, 34, 32, 115, 107, 105, 112, 61, 34, 92, 92, 92, 91, 34, 32, 101, 110, 100, 61, 34, 92, 93, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 67, 111, 108, 108, 67, 108, 97, 115, 115, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 67, 111, 108, 108, 67, 108, 97, 115, 115, 69, 114, 114, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 91, 58, 46, 92, 123, 45, 92, 125, 58, 92, 93, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 67, 111, 108, 108, 67, 108, 97, 115, 115, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 9, 34, 92, 91, 58, 92, 40, 97, 108, 110, 117, 109, 92, 124, 97, 108, 112, 104, 97, 92, 124, 98, 108, 97, 110, 107, 92, 124, 99, 110, 116, 114, 108, 92, 124, 100, 105, 103, 105, 116, 92, 124, 103, 114, 97, 112, 104, 92, 124, 108, 111, 119, 101, 114, 92, 124, 112, 114, 105, 110, 116, 92, 124, 112, 117, 110, 99, 116, 92, 124, 115, 112, 97, 99, 101, 92, 124, 117, 112, 112, 101, 114, 92, 124, 120, 100, 105, 103, 105, 116, 92, 124, 114, 101, 116, 117, 114, 110, 92, 124, 116, 97, 98, 92, 124, 101, 115, 99, 97, 112, 101, 92, 124, 98, 97, 99, 107, 115, 112, 97, 99, 101, 92, 41, 58, 92, 93, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 117, 98, 115, 116, 83, 117, 98, 115, 116, 114, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 92, 122, 92, 61, 92, 100, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 117, 98, 115, 116, 84, 119, 111, 66, 83, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 92, 92, 92, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 117, 98, 115, 116, 70, 108, 97, 103, 69, 114, 114, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 91, 94, 60, 32, 92, 116, 92, 114, 124, 93, 92, 43, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 83, 117, 98, 115, 116, 70, 108, 97, 103, 115, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 117, 98, 115, 116, 70, 108, 97, 103, 115, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 91, 38, 99, 101, 103, 105, 73, 112, 114, 93, 92, 43, 34, 10, 10, 34, 32, 39, 83, 116, 114, 105, 110, 103, 39, 58, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 9, 34, 91, 94, 40, 44, 93, 39, 91, 94, 39, 93, 92, 123, 45, 125, 92, 122, 115, 39, 34, 10, 10, 34, 32, 77, 97, 114, 107, 115, 44, 32, 82, 101, 103, 105, 115, 116, 101, 114, 115, 44, 32, 65, 100, 100, 114, 101, 115, 115, 101, 115, 44, 32, 70, 105, 108, 116, 101, 114, 115, 58, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 97, 114, 107, 9, 34, 39, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 93, 92, 122, 101, 91, 45, 43, 44, 33, 93, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 77, 97, 114, 107, 78, 117, 109, 98, 101, 114, 44, 118, 105, 109, 83, 117, 98, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 97, 114, 107, 9, 34, 39, 91, 60, 62, 93, 92, 122, 101, 91, 45, 43, 44, 33, 93, 34, 9, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 77, 97, 114, 107, 78, 117, 109, 98, 101, 114, 44, 118, 105, 109, 83, 117, 98, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 97, 114, 107, 9, 34, 44, 92, 122, 115, 39, 91, 60, 62, 93, 92, 122, 101, 34, 9, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 77, 97, 114, 107, 78, 117, 109, 98, 101, 114, 44, 118, 105, 109, 83, 117, 98, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 97, 114, 107, 9, 34, 91, 33, 44, 58, 93, 92, 122, 115, 39, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 93, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 77, 97, 114, 107, 78, 117, 109, 98, 101, 114, 44, 118, 105, 109, 83, 117, 98, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 97, 114, 107, 9, 34, 92, 60, 110, 111, 114, 109, 92, 37, 91, 97, 108, 93, 92, 115, 92, 122, 115, 39, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 93, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 77, 97, 114, 107, 78, 117, 109, 98, 101, 114, 44, 118, 105, 109, 83, 117, 98, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 97, 114, 107, 78, 117, 109, 98, 101, 114, 9, 34, 91, 45, 43, 93, 92, 100, 92, 43, 34, 9, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 117, 98, 115, 116, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 79, 112, 101, 114, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 80, 108, 97, 105, 110, 77, 97, 114, 107, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 39, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 93, 34, 10, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 82, 101, 103, 105, 115, 116, 101, 114, 9, 39, 91, 94, 44, 59, 91, 123, 93, 92, 122, 115, 34, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 46, 37, 35, 58, 95, 92, 45, 47, 93, 92, 122, 101, 91, 94, 97, 45, 122, 65, 45, 90, 95, 34, 58, 48, 45, 57, 93, 39, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 82, 101, 103, 105, 115, 116, 101, 114, 9, 39, 92, 60, 110, 111, 114, 109, 92, 115, 92, 43, 92, 122, 115, 34, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 93, 39, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 82, 101, 103, 105, 115, 116, 101, 114, 9, 39, 92, 60, 110, 111, 114, 109, 97, 108, 92, 115, 92, 43, 92, 122, 115, 34, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 93, 39, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 82, 101, 103, 105, 115, 116, 101, 114, 9, 39, 64, 34, 39, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 80, 108, 97, 105, 110, 82, 101, 103, 105, 115, 116, 101, 114, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 39, 34, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 92, 45, 58, 46, 37, 35, 42, 43, 61, 93, 39, 10, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 65, 100, 100, 114, 101, 115, 115, 9, 34, 44, 92, 122, 115, 91, 46, 36, 93, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 117, 98, 115, 116, 49, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 65, 100, 100, 114, 101, 115, 115, 9, 34, 37, 92, 122, 101, 92, 97, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 83, 117, 98, 115, 116, 49, 10, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 70, 105, 108, 116, 101, 114, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 94, 33, 46, 92, 123, 45, 125, 92, 40, 124, 92, 124, 36, 92, 41, 34, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 70, 105, 108, 116, 101, 114, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 65, 33, 46, 92, 123, 45, 125, 92, 40, 124, 92, 124, 36, 92, 41, 34, 109, 115, 61, 115, 43, 49, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 44, 118, 105, 109, 70, 117, 110, 99, 116, 105, 111, 110, 44, 118, 105, 109, 70, 117, 110, 99, 78, 97, 109, 101, 44, 118, 105, 109, 79, 112, 101, 114, 80, 97, 114, 101, 110, 10, 10, 34, 32, 67, 111, 109, 112, 108, 101, 120, 32, 114, 101, 112, 101, 97, 116, 115, 32, 40, 58, 104, 32, 99, 111, 109, 112, 108, 101, 120, 45, 114, 101, 112, 101, 97, 116, 41, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 67, 109, 112, 108, 120, 82, 101, 112, 101, 97, 116, 9, 39, 91, 94, 97, 45, 122, 65, 45, 90, 95, 47, 92, 92, 40, 41, 93, 113, 91, 48, 45, 57, 97, 45, 122, 65, 45, 90, 34, 93, 92, 62, 39, 108, 99, 61, 49, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 67, 109, 112, 108, 120, 82, 101, 112, 101, 97, 116, 9, 39, 64, 91, 48, 45, 57, 97, 45, 122, 34, 46, 61, 64, 58, 93, 92, 122, 101, 92, 40, 36, 92, 124, 91, 94, 97, 45, 122, 65, 45, 90, 93, 92, 62, 92, 41, 39, 10, 10, 34, 32, 83, 101, 116, 32, 99, 111, 109, 109, 97, 110, 100, 32, 97, 110, 100, 32, 97, 115, 115, 111, 99, 105, 97, 116, 101, 100, 32, 115, 101, 116, 45, 111, 112, 116, 105, 111, 110, 115, 32, 40, 118, 105, 109, 79, 112, 116, 105, 111, 110, 115, 41, 32, 119, 105, 116, 104, 32, 99, 111, 109, 109, 101, 110, 116, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 101, 116, 9, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 115, 116, 97, 114, 116, 61, 34, 92, 60, 92, 37, 40, 115, 101, 116, 108, 92, 37, 91, 111, 99, 97, 108, 93, 92, 124, 115, 101, 116, 103, 92, 37, 91, 108, 111, 98, 97, 108, 93, 92, 124, 115, 101, 92, 37, 91, 116, 93, 92, 41, 92, 62, 34, 32, 115, 107, 105, 112, 61, 34, 92, 37, 40, 92, 92, 92, 92, 92, 41, 42, 92, 92, 46, 34, 32, 101, 110, 100, 61, 34, 36, 34, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 32, 101, 110, 100, 61, 34, 60, 91, 99, 67, 93, 91, 114, 82, 93, 62, 34, 32, 107, 101, 101, 112, 101, 110, 100, 32, 111, 110, 101, 108, 105, 110, 101, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 83, 101, 116, 69, 113, 117, 97, 108, 44, 118, 105, 109, 79, 112, 116, 105, 111, 110, 44, 118, 105, 109, 69, 114, 114, 83, 101, 116, 116, 105, 110, 103, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 44, 118, 105, 109, 83, 101, 116, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 83, 101, 116, 77, 111, 100, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 101, 116, 69, 113, 117, 97, 108, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 115, 116, 97, 114, 116, 61, 34, 91, 61, 58, 93, 92, 124, 91, 45, 43, 94, 93, 61, 34, 32, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 92, 124, 92, 92, 92, 115, 34, 32, 101, 110, 100, 61, 34, 91, 124, 32, 92, 116, 93, 92, 124, 36, 34, 109, 101, 61, 101, 45, 49, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 67, 116, 114, 108, 67, 104, 97, 114, 44, 118, 105, 109, 83, 101, 116, 83, 101, 112, 44, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 44, 118, 105, 109, 69, 110, 118, 118, 97, 114, 32, 111, 110, 101, 108, 105, 110, 101, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 101, 116, 83, 116, 114, 105, 110, 103, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 115, 116, 97, 114, 116, 61, 43, 61, 34, 43, 104, 115, 61, 115, 43, 49, 9, 115, 107, 105, 112, 61, 43, 92, 92, 92, 92, 92, 124, 92, 92, 34, 43, 32, 32, 101, 110, 100, 61, 43, 34, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 67, 116, 114, 108, 67, 104, 97, 114, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 101, 116, 83, 101, 112, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 91, 44, 58, 93, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 101, 116, 77, 111, 100, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 38, 118, 105, 109, 92, 61, 92, 124, 91, 33, 38, 63, 60, 93, 92, 124, 97, 108, 108, 38, 34, 10, 10, 34, 32, 76, 101, 116, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 76, 101, 116, 9, 108, 101, 116, 9, 117, 110, 108, 91, 101, 116, 93, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 86, 97, 114, 44, 118, 105, 109, 70, 117, 110, 99, 86, 97, 114, 10, 10, 34, 32, 65, 98, 98, 114, 101, 118, 105, 97, 116, 105, 111, 110, 115, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 65, 98, 98, 9, 97, 98, 91, 98, 114, 101, 118, 105, 97, 116, 101, 93, 32, 99, 97, 91, 98, 98, 114, 101, 118, 93, 32, 105, 110, 111, 114, 101, 97, 91, 98, 98, 114, 101, 118, 93, 32, 99, 110, 111, 114, 101, 97, 91, 98, 98, 114, 101, 118, 93, 32, 110, 111, 114, 101, 97, 91, 98, 98, 114, 101, 118, 93, 32, 105, 97, 91, 98, 98, 114, 101, 118, 93, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 97, 112, 77, 111, 100, 44, 118, 105, 109, 77, 97, 112, 76, 104, 115, 10, 10, 34, 32, 65, 117, 116, 111, 99, 109, 100, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 65, 117, 116, 111, 69, 118, 101, 110, 116, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 40, 33, 92, 115, 92, 43, 92, 41, 92, 61, 92, 40, 92, 97, 92, 43, 44, 92, 41, 42, 92, 97, 92, 43, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 65, 117, 116, 111, 69, 118, 101, 110, 116, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 83, 112, 97, 99, 101, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 83, 112, 97, 99, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 115, 92, 43, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 83, 102, 120, 76, 105, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 83, 102, 120, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 83, 42, 34, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 9, 97, 117, 91, 116, 111, 99, 109, 100, 93, 32, 100, 111, 91, 97, 117, 116, 111, 99, 109, 100, 93, 32, 100, 111, 97, 117, 116, 111, 97, 91, 108, 108, 93, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 65, 117, 116, 111, 69, 118, 101, 110, 116, 76, 105, 115, 116, 10, 10, 34, 32, 69, 99, 104, 111, 32, 97, 110, 100, 32, 69, 120, 101, 99, 117, 116, 101, 32, 45, 45, 32, 112, 114, 101, 102, 101, 114, 32, 115, 116, 114, 105, 110, 103, 115, 33, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 69, 99, 104, 111, 9, 111, 110, 101, 108, 105, 110, 101, 32, 101, 120, 99, 108, 117, 100, 101, 110, 108, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 115, 116, 97, 114, 116, 61, 34, 92, 60, 101, 99, 92, 37, 91, 104, 111, 93, 92, 62, 34, 32, 115, 107, 105, 112, 61, 34, 92, 40, 92, 92, 92, 92, 92, 41, 42, 92, 92, 124, 34, 32, 101, 110, 100, 61, 34, 36, 92, 124, 124, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 70, 117, 110, 99, 44, 118, 105, 109, 70, 117, 110, 99, 86, 97, 114, 44, 118, 105, 109, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 86, 97, 114, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 69, 120, 101, 99, 117, 116, 101, 9, 111, 110, 101, 108, 105, 110, 101, 32, 101, 120, 99, 108, 117, 100, 101, 110, 108, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 115, 116, 97, 114, 116, 61, 34, 92, 60, 101, 120, 101, 92, 37, 91, 99, 117, 116, 101, 93, 92, 62, 34, 32, 115, 107, 105, 112, 61, 34, 92, 40, 92, 92, 92, 92, 92, 41, 42, 92, 92, 124, 34, 32, 101, 110, 100, 61, 34, 36, 92, 124, 124, 92, 124, 60, 91, 99, 67, 93, 91, 114, 82, 93, 62, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 70, 117, 110, 99, 86, 97, 114, 44, 118, 105, 109, 73, 115, 67, 111, 109, 109, 97, 110, 100, 44, 118, 105, 109, 79, 112, 101, 114, 44, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 44, 118, 105, 109, 79, 112, 101, 114, 80, 97, 114, 101, 110, 44, 118, 105, 109, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 86, 97, 114, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 69, 99, 104, 111, 72, 76, 9, 34, 101, 99, 104, 111, 104, 108, 92, 61, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 44, 118, 105, 109, 72, 76, 71, 114, 111, 117, 112, 44, 118, 105, 109, 69, 99, 104, 111, 72, 76, 78, 111, 110, 101, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 105, 103, 110, 111, 114, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 69, 99, 104, 111, 72, 76, 78, 111, 110, 101, 9, 110, 111, 110, 101, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 109, 97, 116, 99, 104, 10, 10, 34, 32, 77, 97, 112, 115, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 97, 112, 9, 9, 34, 92, 60, 109, 97, 112, 92, 62, 33, 92, 61, 92, 122, 101, 92, 115, 42, 91, 94, 40, 93, 34, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 97, 112, 77, 111, 100, 44, 118, 105, 109, 77, 97, 112, 76, 104, 115, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 77, 97, 112, 9, 9, 99, 109, 91, 97, 112, 93, 32, 99, 110, 111, 91, 114, 101, 109, 97, 112, 93, 32, 105, 109, 91, 97, 112, 93, 32, 105, 110, 111, 91, 114, 101, 109, 97, 112, 93, 32, 108, 109, 91, 97, 112, 93, 32, 108, 110, 91, 111, 114, 101, 109, 97, 112, 93, 32, 110, 109, 91, 97, 112, 93, 32, 110, 110, 91, 111, 114, 101, 109, 97, 112, 93, 32, 110, 111, 91, 114, 101, 109, 97, 112, 93, 32, 111, 109, 91, 97, 112, 93, 32, 111, 110, 111, 91, 114, 101, 109, 97, 112, 93, 32, 115, 109, 97, 112, 32, 115, 110, 111, 114, 91, 101, 109, 97, 112, 93, 32, 118, 109, 91, 97, 112, 93, 32, 118, 110, 91, 111, 114, 101, 109, 97, 112, 93, 32, 120, 109, 91, 97, 112, 93, 32, 120, 110, 91, 111, 114, 101, 109, 97, 112, 93, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 97, 112, 66, 97, 110, 103, 44, 118, 105, 109, 77, 97, 112, 77, 111, 100, 44, 118, 105, 109, 77, 97, 112, 76, 104, 115, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 77, 97, 112, 9, 9, 109, 97, 112, 99, 91, 108, 101, 97, 114, 93, 32, 115, 109, 97, 112, 99, 91, 108, 101, 97, 114, 93, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 85, 110, 109, 97, 112, 9, 9, 99, 117, 91, 110, 109, 97, 112, 93, 32, 105, 117, 91, 110, 109, 97, 112, 93, 32, 108, 117, 91, 110, 109, 97, 112, 93, 32, 110, 117, 110, 91, 109, 97, 112, 93, 32, 111, 117, 91, 110, 109, 97, 112, 93, 32, 115, 117, 110, 109, 91, 97, 112, 93, 32, 117, 110, 109, 91, 97, 112, 93, 32, 117, 110, 109, 91, 97, 112, 93, 32, 118, 117, 91, 110, 109, 97, 112, 93, 32, 120, 117, 91, 110, 109, 97, 112, 93, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 97, 112, 66, 97, 110, 103, 44, 118, 105, 109, 77, 97, 112, 77, 111, 100, 44, 118, 105, 109, 77, 97, 112, 76, 104, 115, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 97, 112, 76, 104, 115, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 83, 92, 43, 34, 9, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 44, 118, 105, 109, 67, 116, 114, 108, 67, 104, 97, 114, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 97, 112, 82, 104, 115, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 97, 112, 66, 97, 110, 103, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 33, 34, 9, 9, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 97, 112, 77, 111, 100, 44, 118, 105, 109, 77, 97, 112, 76, 104, 115, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 97, 112, 77, 111, 100, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 99, 60, 92, 40, 98, 117, 102, 102, 101, 114, 92, 124, 101, 120, 112, 114, 92, 124, 92, 40, 108, 111, 99, 97, 108, 92, 41, 92, 61, 108, 101, 97, 100, 101, 114, 92, 124, 112, 108, 117, 103, 92, 124, 115, 99, 114, 105, 112, 116, 92, 124, 115, 105, 100, 92, 124, 117, 110, 105, 113, 117, 101, 92, 124, 115, 105, 108, 101, 110, 116, 92, 41, 92, 43, 62, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 77, 97, 112, 77, 111, 100, 75, 101, 121, 44, 118, 105, 109, 77, 97, 112, 77, 111, 100, 69, 114, 114, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 97, 112, 77, 111, 100, 44, 118, 105, 109, 77, 97, 112, 76, 104, 115, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 97, 112, 82, 104, 115, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 46, 42, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 44, 118, 105, 109, 67, 116, 114, 108, 67, 104, 97, 114, 9, 115, 107, 105, 112, 110, 108, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 97, 112, 82, 104, 115, 69, 120, 116, 101, 110, 100, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 97, 112, 82, 104, 115, 69, 120, 116, 101, 110, 100, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 94, 92, 115, 42, 92, 92, 46, 42, 36, 34, 9, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 44, 118, 105, 109, 67, 116, 114, 108, 67, 104, 97, 114, 44, 118, 105, 109, 67, 111, 110, 116, 105, 110, 117, 101, 9, 115, 107, 105, 112, 110, 108, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 97, 112, 82, 104, 115, 69, 120, 116, 101, 110, 100, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 105, 103, 110, 111, 114, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 77, 97, 112, 77, 111, 100, 75, 101, 121, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 98, 117, 102, 102, 101, 114, 9, 101, 120, 112, 114, 9, 108, 101, 97, 100, 101, 114, 9, 108, 111, 99, 97, 108, 108, 101, 97, 100, 101, 114, 9, 112, 108, 117, 103, 9, 115, 99, 114, 105, 112, 116, 9, 115, 105, 100, 9, 115, 105, 108, 101, 110, 116, 9, 117, 110, 105, 113, 117, 101, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 109, 97, 116, 99, 104, 10, 10, 34, 32, 77, 101, 110, 117, 115, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 77, 101, 110, 117, 76, 105, 115, 116, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 77, 101, 110, 117, 66, 97, 110, 103, 44, 118, 105, 109, 77, 101, 110, 117, 80, 114, 105, 111, 114, 105, 116, 121, 44, 118, 105, 109, 77, 101, 110, 117, 78, 97, 109, 101, 44, 118, 105, 109, 77, 101, 110, 117, 77, 111, 100, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 9, 97, 109, 91, 101, 110, 117, 93, 32, 97, 110, 91, 111, 114, 101, 109, 101, 110, 117, 93, 32, 97, 117, 110, 91, 109, 101, 110, 117, 93, 32, 99, 109, 101, 91, 110, 117, 93, 32, 99, 110, 111, 114, 101, 109, 101, 91, 110, 117, 93, 32, 99, 117, 110, 109, 101, 91, 110, 117, 93, 32, 105, 109, 101, 91, 110, 117, 93, 32, 105, 110, 111, 114, 101, 109, 101, 91, 110, 117, 93, 32, 105, 117, 110, 109, 101, 91, 110, 117, 93, 32, 109, 101, 91, 110, 117, 93, 32, 110, 109, 101, 91, 110, 117, 93, 32, 110, 110, 111, 114, 101, 109, 101, 91, 110, 117, 93, 32, 110, 111, 114, 101, 109, 101, 91, 110, 117, 93, 32, 110, 117, 110, 109, 101, 91, 110, 117, 93, 32, 111, 109, 101, 91, 110, 117, 93, 32, 111, 110, 111, 114, 101, 109, 101, 91, 110, 117, 93, 32, 111, 117, 110, 109, 101, 91, 110, 117, 93, 32, 117, 110, 109, 101, 91, 110, 117, 93, 32, 118, 109, 101, 91, 110, 117, 93, 32, 118, 110, 111, 114, 101, 109, 101, 91, 110, 117, 93, 32, 118, 117, 110, 109, 101, 91, 110, 117, 93, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 64, 118, 105, 109, 77, 101, 110, 117, 76, 105, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 101, 110, 117, 78, 97, 109, 101, 9, 34, 91, 94, 32, 92, 116, 92, 92, 60, 93, 92, 43, 34, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 101, 110, 117, 78, 97, 109, 101, 77, 111, 114, 101, 44, 118, 105, 109, 77, 101, 110, 117, 77, 97, 112, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 101, 110, 117, 80, 114, 105, 111, 114, 105, 116, 121, 9, 34, 92, 100, 92, 43, 92, 40, 92, 46, 92, 100, 92, 43, 92, 41, 42, 34, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 101, 110, 117, 78, 97, 109, 101, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 101, 110, 117, 78, 97, 109, 101, 77, 111, 114, 101, 9, 34, 92, 99, 92, 92, 92, 115, 92, 124, 60, 116, 97, 98, 62, 92, 124, 92, 92, 92, 46, 34, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 101, 110, 117, 78, 97, 109, 101, 44, 118, 105, 109, 77, 101, 110, 117, 78, 97, 109, 101, 77, 111, 114, 101, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 101, 110, 117, 77, 111, 100, 32, 32, 32, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 99, 60, 92, 40, 115, 99, 114, 105, 112, 116, 92, 124, 115, 105, 108, 101, 110, 116, 92, 41, 92, 43, 62, 34, 32, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 77, 97, 112, 77, 111, 100, 75, 101, 121, 44, 118, 105, 109, 77, 97, 112, 77, 111, 100, 69, 114, 114, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 64, 118, 105, 109, 77, 101, 110, 117, 76, 105, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 101, 110, 117, 77, 97, 112, 9, 34, 92, 115, 34, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 77, 101, 110, 117, 82, 104, 115, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 101, 110, 117, 82, 104, 115, 9, 34, 46, 42, 36, 34, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 44, 118, 105, 109, 73, 115, 67, 111, 109, 109, 97, 110, 100, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 101, 110, 117, 66, 97, 110, 103, 9, 34, 33, 34, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 64, 118, 105, 109, 77, 101, 110, 117, 76, 105, 115, 116, 10, 10, 34, 32, 65, 110, 103, 108, 101, 45, 66, 114, 97, 99, 107, 101, 116, 32, 78, 111, 116, 97, 116, 105, 111, 110, 32, 40, 116, 110, 120, 32, 116, 111, 32, 77, 105, 99, 104, 97, 101, 108, 32, 71, 101, 100, 100, 101, 115, 41, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 105, 103, 110, 111, 114, 101, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 9, 34, 92, 40, 92, 92, 92, 124, 60, 108, 116, 62, 92, 41, 92, 61, 60, 92, 40, 91, 115, 99, 97, 109, 100, 93, 45, 92, 41, 92, 123, 48, 44, 52, 125, 120, 92, 61, 92, 40, 102, 92, 100, 92, 123, 49, 44, 50, 125, 92, 124, 91, 94, 32, 92, 116, 58, 93, 92, 124, 99, 114, 92, 124, 108, 102, 92, 124, 108, 105, 110, 101, 102, 101, 101, 100, 92, 124, 114, 101, 116, 117, 114, 110, 92, 124, 107, 92, 61, 100, 101, 108, 92, 37, 91, 101, 116, 101, 93, 92, 124, 98, 115, 92, 124, 98, 97, 99, 107, 115, 112, 97, 99, 101, 92, 124, 116, 97, 98, 92, 124, 101, 115, 99, 92, 124, 114, 105, 103, 104, 116, 92, 124, 108, 101, 102, 116, 92, 124, 104, 101, 108, 112, 92, 124, 117, 110, 100, 111, 92, 124, 105, 110, 115, 101, 114, 116, 92, 124, 105, 110, 115, 92, 124, 107, 92, 61, 104, 111, 109, 101, 92, 124, 107, 92, 61, 101, 110, 100, 92, 124, 107, 112, 108, 117, 115, 92, 124, 107, 109, 105, 110, 117, 115, 92, 124, 107, 100, 105, 118, 105, 100, 101, 92, 124, 107, 109, 117, 108, 116, 105, 112, 108, 121, 92, 124, 107, 101, 110, 116, 101, 114, 92, 124, 107, 112, 111, 105, 110, 116, 92, 124, 115, 112, 97, 99, 101, 92, 124, 107, 92, 61, 92, 40, 112, 97, 103, 101, 92, 41, 92, 61, 92, 40, 92, 124, 100, 111, 119, 110, 92, 124, 117, 112, 92, 124, 107, 92, 100, 92, 62, 92, 41, 92, 41, 62, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 66, 114, 97, 99, 107, 101, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 9, 34, 92, 40, 92, 92, 92, 124, 60, 108, 116, 62, 92, 41, 92, 61, 60, 92, 40, 91, 115, 99, 97, 109, 50, 45, 52, 93, 45, 92, 41, 92, 123, 48, 44, 52, 125, 92, 40, 114, 105, 103, 104, 116, 92, 124, 108, 101, 102, 116, 92, 124, 109, 105, 100, 100, 108, 101, 92, 41, 92, 40, 109, 111, 117, 115, 101, 92, 41, 92, 61, 92, 40, 100, 114, 97, 103, 92, 124, 114, 101, 108, 101, 97, 115, 101, 92, 41, 92, 61, 62, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 66, 114, 97, 99, 107, 101, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 9, 34, 92, 40, 92, 92, 92, 124, 60, 108, 116, 62, 92, 41, 92, 61, 60, 92, 40, 98, 115, 108, 97, 115, 104, 92, 124, 112, 108, 117, 103, 92, 124, 115, 105, 100, 92, 124, 115, 112, 97, 99, 101, 92, 124, 98, 97, 114, 92, 124, 110, 111, 112, 92, 124, 110, 117, 108, 92, 124, 108, 116, 92, 41, 62, 34, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 66, 114, 97, 99, 107, 101, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 9, 39, 92, 40, 92, 92, 92, 124, 60, 108, 116, 62, 92, 41, 92, 61, 60, 67, 45, 82, 62, 91, 48, 45, 57, 97, 45, 122, 34, 37, 35, 58, 46, 92, 45, 61, 93, 39, 104, 101, 61, 101, 45, 49, 9, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 66, 114, 97, 99, 107, 101, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 9, 39, 92, 40, 92, 92, 92, 124, 60, 108, 116, 62, 92, 41, 92, 61, 60, 92, 37, 40, 113, 45, 92, 41, 92, 61, 92, 40, 108, 105, 110, 101, 91, 49, 50, 93, 92, 124, 99, 111, 117, 110, 116, 92, 124, 98, 97, 110, 103, 92, 124, 114, 101, 103, 92, 124, 97, 114, 103, 115, 92, 124, 102, 45, 97, 114, 103, 115, 92, 124, 108, 116, 92, 41, 62, 39, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 66, 114, 97, 99, 107, 101, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 9, 34, 92, 40, 92, 92, 92, 124, 60, 108, 116, 62, 92, 41, 92, 61, 60, 92, 40, 91, 99, 97, 115, 93, 102, 105, 108, 101, 92, 124, 97, 98, 117, 102, 92, 124, 97, 109, 97, 116, 99, 104, 92, 124, 99, 119, 111, 114, 100, 92, 124, 99, 87, 79, 82, 68, 92, 124, 99, 108, 105, 101, 110, 116, 92, 41, 62, 34, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 66, 114, 97, 99, 107, 101, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 66, 114, 97, 99, 107, 101, 116, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 91, 92, 92, 60, 62, 93, 34, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 109, 97, 116, 99, 104, 10, 10, 34, 32, 85, 115, 101, 114, 32, 70, 117, 110, 99, 116, 105, 111, 110, 32, 72, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 32, 123, 123, 123, 50, 10, 34, 32, 40, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 71, 97, 117, 116, 97, 109, 32, 73, 121, 101, 114, 39, 115, 32, 115, 117, 103, 103, 101, 115, 116, 105, 111, 110, 41, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 70, 117, 110, 99, 9, 9, 34, 92, 37, 40, 92, 37, 40, 91, 115, 83, 103, 71, 98, 66, 119, 87, 116, 84, 108, 76, 93, 58, 92, 124, 60, 91, 115, 83, 93, 91, 105, 73, 93, 91, 100, 68, 93, 62, 92, 41, 92, 61, 92, 37, 40, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 95, 93, 92, 43, 92, 46, 92, 41, 42, 92, 73, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 95, 46, 93, 42, 92, 41, 92, 122, 101, 92, 115, 42, 40, 34, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 70, 117, 110, 99, 78, 97, 109, 101, 44, 118, 105, 109, 85, 115, 101, 114, 70, 117, 110, 99, 44, 118, 105, 109, 69, 120, 101, 99, 117, 116, 101, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 85, 115, 101, 114, 70, 117, 110, 99, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 37, 40, 92, 37, 40, 91, 115, 83, 103, 71, 98, 66, 119, 87, 116, 84, 108, 76, 93, 58, 92, 124, 60, 91, 115, 83, 93, 91, 105, 73, 93, 91, 100, 68, 93, 62, 92, 41, 92, 61, 92, 37, 40, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 95, 93, 92, 43, 92, 46, 92, 41, 42, 92, 73, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 95, 46, 93, 42, 92, 41, 92, 124, 92, 60, 92, 117, 91, 97, 45, 122, 65, 45, 90, 48, 45, 57, 46, 93, 42, 92, 62, 92, 124, 92, 60, 105, 102, 92, 62, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 78, 111, 116, 70, 117, 110, 99, 9, 34, 92, 60, 105, 102, 92, 62, 92, 124, 92, 60, 101, 108, 92, 37, 91, 115, 101, 105, 102, 93, 92, 62, 92, 124, 92, 60, 114, 101, 116, 117, 114, 110, 92, 62, 92, 124, 92, 60, 119, 104, 105, 108, 101, 92, 62, 34, 10, 10, 34, 32, 69, 114, 114, 111, 114, 115, 32, 65, 110, 100, 32, 87, 97, 114, 110, 105, 110, 103, 115, 58, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 32, 38, 38, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 118, 105, 109, 102, 117, 110, 99, 116, 105, 111, 110, 101, 114, 114, 111, 114, 34, 41, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 70, 117, 110, 99, 116, 105, 111, 110, 69, 114, 114, 111, 114, 9, 34, 92, 115, 92, 122, 115, 91, 97, 45, 122, 48, 45, 57, 93, 92, 105, 92, 123, 45, 125, 92, 122, 101, 92, 115, 42, 40, 34, 9, 9, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 70, 117, 110, 99, 75, 101, 121, 44, 118, 105, 109, 70, 117, 110, 99, 66, 108, 97, 110, 107, 10, 34, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 70, 117, 110, 99, 116, 105, 111, 110, 69, 114, 114, 111, 114, 9, 34, 92, 115, 92, 122, 115, 92, 37, 40, 60, 91, 115, 83, 93, 91, 105, 73, 93, 91, 100, 68, 93, 62, 92, 124, 91, 115, 83, 103, 71, 98, 66, 119, 87, 116, 84, 108, 76, 93, 58, 92, 41, 91, 48, 45, 57, 93, 92, 105, 92, 123, 45, 125, 92, 122, 101, 92, 115, 42, 40, 34, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 70, 117, 110, 99, 75, 101, 121, 44, 118, 105, 109, 70, 117, 110, 99, 66, 108, 97, 110, 107, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 69, 108, 115, 101, 73, 102, 69, 114, 114, 9, 34, 92, 60, 101, 108, 115, 101, 92, 115, 92, 43, 105, 102, 92, 62, 34, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 66, 117, 102, 110, 114, 87, 97, 114, 110, 9, 47, 92, 60, 98, 117, 102, 110, 114, 92, 115, 42, 40, 92, 115, 42, 91, 34, 39, 93, 92, 46, 91, 39, 34, 93, 92, 115, 42, 41, 47, 10, 101, 110, 100, 105, 102, 10, 10, 34, 32, 78, 111, 114, 109, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 78, 111, 114, 109, 9, 9, 34, 92, 60, 110, 111, 114, 109, 92, 37, 91, 97, 108, 93, 33, 92, 61, 34, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 78, 111, 114, 109, 67, 109, 100, 115, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 78, 111, 114, 109, 67, 109, 100, 115, 32, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 46, 42, 36, 34, 10, 10, 34, 32, 83, 121, 110, 116, 97, 120, 32, 123, 123, 123, 50, 10, 34, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 71, 114, 111, 117, 112, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 64, 92, 61, 91, 94, 32, 92, 116, 44, 93, 42, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 71, 114, 111, 117, 112, 83, 112, 101, 99, 105, 97, 108, 44, 118, 105, 109, 80, 97, 116, 83, 101, 112, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 71, 114, 111, 117, 112, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 64, 92, 61, 91, 94, 32, 92, 116, 44, 93, 42, 44, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 76, 105, 115, 116, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 71, 114, 111, 117, 112, 83, 112, 101, 99, 105, 97, 108, 44, 118, 105, 109, 80, 97, 116, 83, 101, 112, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 71, 114, 111, 117, 112, 83, 112, 101, 99, 105, 97, 108, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 65, 76, 76, 9, 65, 76, 76, 66, 85, 84, 9, 67, 79, 78, 84, 65, 73, 78, 69, 68, 9, 84, 79, 80, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 32, 38, 38, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 118, 105, 109, 115, 121, 110, 101, 114, 114, 111, 114, 34, 41, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 69, 114, 114, 111, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 105, 92, 43, 34, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 69, 114, 114, 111, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 105, 92, 43, 61, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 76, 105, 115, 116, 10, 101, 110, 100, 105, 102, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 67, 111, 110, 116, 97, 105, 110, 115, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 60, 99, 111, 110, 116, 97, 105, 110, 92, 40, 115, 92, 124, 101, 100, 105, 110, 92, 41, 61, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 76, 105, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 75, 101, 121, 67, 111, 110, 116, 97, 105, 110, 101, 100, 105, 110, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 60, 99, 111, 110, 116, 97, 105, 110, 101, 100, 105, 110, 61, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 76, 105, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 78, 101, 120, 116, 103, 114, 111, 117, 112, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 76, 105, 115, 116, 10, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 116, 97, 120, 9, 34, 92, 60, 115, 121, 92, 37, 91, 110, 116, 97, 120, 93, 92, 62, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 65, 117, 83, 121, 110, 116, 97, 120, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 115, 43, 115, 121, 92, 37, 91, 110, 116, 97, 120, 93, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 32, 97, 100, 100, 61, 118, 105, 109, 83, 121, 110, 116, 97, 120, 10, 10, 34, 32, 83, 121, 110, 116, 97, 120, 58, 32, 99, 97, 115, 101, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 99, 97, 115, 101, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 67, 97, 115, 101, 44, 118, 105, 109, 83, 121, 110, 67, 97, 115, 101, 69, 114, 114, 111]);
        fileData6.push.apply(fileData6, [114, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 32, 38, 38, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 118, 105, 109, 115, 121, 110, 99, 97, 115, 101, 101, 114, 114, 111, 114, 34, 41, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 67, 97, 115, 101, 69, 114, 114, 111, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 105, 92, 43, 34, 10, 101, 110, 100, 105, 102, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 67, 97, 115, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 105, 103, 110, 111, 114, 101, 9, 109, 97, 116, 99, 104, 10, 10, 34, 32, 83, 121, 110, 116, 97, 120, 58, 32, 99, 108, 101, 97, 114, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 99, 108, 101, 97, 114, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 76, 105, 115, 116, 10, 10, 34, 32, 83, 121, 110, 116, 97, 120, 58, 32, 99, 108, 117, 115, 116, 101, 114, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 99, 108, 117, 115, 116, 101, 114, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 108, 117, 115, 116, 101, 114, 78, 97, 109, 101, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 67, 108, 117, 115, 116, 101, 114, 78, 97, 109, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 78, 97, 109, 101, 32, 115, 116, 97, 114, 116, 61, 34, 92, 104, 92, 119, 42, 34, 32, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 92, 124, 92, 92, 124, 34, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 101, 112, 32, 101, 110, 100, 61, 34, 36, 92, 124, 124, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 71, 114, 111, 117, 112, 65, 100, 100, 44, 118, 105, 109, 71, 114, 111, 117, 112, 82, 101, 109, 44, 118, 105, 109, 83, 121, 110, 67, 111, 110, 116, 97, 105, 110, 115, 44, 118, 105, 109, 83, 121, 110, 69, 114, 114, 111, 114, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 71, 114, 111, 117, 112, 65, 100, 100, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 97, 100, 100, 61, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 76, 105, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 71, 114, 111, 117, 112, 82, 101, 109, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 114, 101, 109, 111, 118, 101, 61, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 76, 105, 115, 116, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 32, 97, 100, 100, 61, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 44, 118, 105, 109, 71, 114, 111, 117, 112, 65, 100, 100, 44, 118, 105, 109, 71, 114, 111, 117, 112, 82, 101, 109, 10, 10, 34, 32, 83, 121, 110, 116, 97, 120, 58, 32, 105, 110, 99, 108, 117, 100, 101, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 105, 110, 99, 108, 117, 100, 101, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 76, 105, 115, 116, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 32, 97, 100, 100, 61, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 10, 10, 34, 32, 83, 121, 110, 116, 97, 120, 58, 32, 107, 101, 121, 119, 111, 114, 100, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 83, 121, 110, 75, 101, 121, 71, 114, 111, 117, 112, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 83, 121, 110, 78, 101, 120, 116, 103, 114, 111, 117, 112, 44, 118, 105, 109, 83, 121, 110, 75, 101, 121, 79, 112, 116, 44, 118, 105, 109, 83, 121, 110, 75, 101, 121, 67, 111, 110, 116, 97, 105, 110, 101, 100, 105, 110, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 107, 101, 121, 119, 111, 114, 100, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 75, 101, 121, 82, 101, 103, 105, 111, 110, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 121, 110, 75, 101, 121, 82, 101, 103, 105, 111, 110, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 111, 110, 101, 108, 105, 110, 101, 32, 107, 101, 101, 112, 101, 110, 100, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 78, 97, 109, 101, 32, 115, 116, 97, 114, 116, 61, 34, 92, 104, 92, 119, 42, 34, 32, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 92, 124, 92, 92, 124, 34, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 101, 112, 32, 101, 110, 100, 61, 34, 124, 92, 124, 36, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 121, 110, 75, 101, 121, 71, 114, 111, 117, 112, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 75, 101, 121, 79, 112, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 60, 92, 40, 99, 111, 110, 99, 101, 97, 108, 92, 124, 99, 111, 110, 116, 97, 105, 110, 101, 100, 92, 124, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 92, 124, 115, 107, 105, 112, 101, 109, 112, 116, 121, 92, 124, 115, 107, 105, 112, 119, 104, 105, 116, 101, 92, 124, 115, 107, 105, 112, 110, 108, 92, 41, 92, 62, 34, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 32, 97, 100, 100, 61, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 10, 10, 34, 32, 83, 121, 110, 116, 97, 120, 58, 32, 109, 97, 116, 99, 104, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 83, 121, 110, 77, 116, 99, 104, 71, 114, 111, 117, 112, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 77, 116, 99, 104, 67, 111, 109, 109, 101, 110, 116, 44, 118, 105, 109, 83, 121, 110, 67, 111, 110, 116, 97, 105, 110, 115, 44, 118, 105, 109, 83, 121, 110, 69, 114, 114, 111, 114, 44, 118, 105, 109, 83, 121, 110, 77, 116, 99, 104, 79, 112, 116, 44, 118, 105, 109, 83, 121, 110, 78, 101, 120, 116, 103, 114, 111, 117, 112, 44, 118, 105, 109, 83, 121, 110, 82, 101, 103, 80, 97, 116, 44, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 109, 97, 116, 99, 104, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 77, 97, 116, 99, 104, 82, 101, 103, 105, 111, 110, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 121, 110, 77, 97, 116, 99, 104, 82, 101, 103, 105, 111, 110, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 107, 101, 101, 112, 101, 110, 100, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 78, 97, 109, 101, 32, 115, 116, 97, 114, 116, 61, 34, 92, 104, 92, 119, 42, 34, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 101, 112, 32, 101, 110, 100, 61, 34, 124, 92, 124, 36, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 121, 110, 77, 116, 99, 104, 71, 114, 111, 117, 112, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 77, 116, 99, 104, 79, 112, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 60, 92, 40, 99, 111, 110, 99, 101, 97, 108, 92, 124, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 92, 124, 99, 111, 110, 116, 97, 105, 110, 101, 100, 92, 124, 101, 120, 99, 108, 117, 100, 101, 110, 108, 92, 124, 115, 107, 105, 112, 101, 109, 112, 116, 121, 92, 124, 115, 107, 105, 112, 119, 104, 105, 116, 101, 92, 124, 100, 105, 115, 112, 108, 97, 121, 92, 124, 101, 120, 116, 101, 110, 100, 92, 124, 115, 107, 105, 112, 110, 108, 92, 124, 102, 111, 108, 100, 92, 41, 92, 62, 34, 10, 105, 102, 32, 104, 97, 115, 40, 34, 99, 111, 110, 99, 101, 97, 108, 34, 41, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 77, 116, 99, 104, 79, 112, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 60, 99, 99, 104, 97, 114, 61, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 77, 116, 99, 104, 67, 99, 104, 97, 114, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 77, 116, 99, 104, 67, 99, 104, 97, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 83, 34, 10, 101, 110, 100, 105, 102, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 32, 97, 100, 100, 61, 118, 105, 109, 83, 121, 110, 77, 116, 99, 104, 71, 114, 111, 117, 112, 10, 10, 34, 32, 83, 121, 110, 116, 97, 120, 58, 32, 111, 102, 102, 32, 97, 110, 100, 32, 111, 110, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 101, 110, 97, 98, 108, 101, 9, 108, 105, 115, 116, 9, 109, 97, 110, 117, 97, 108, 9, 111, 102, 102, 9, 111, 110, 9, 114, 101, 115, 101, 116, 10, 10, 34, 32, 83, 121, 110, 116, 97, 120, 58, 32, 114, 101, 103, 105, 111, 110, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 83, 121, 110, 82, 101, 103, 80, 97, 116, 71, 114, 111, 117, 112, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 80, 97, 116, 83, 101, 112, 44, 118, 105, 109, 78, 111, 116, 80, 97, 116, 83, 101, 112, 44, 118, 105, 109, 83, 121, 110, 80, 97, 116, 82, 97, 110, 103, 101, 44, 118, 105, 109, 83, 121, 110, 78, 111, 116, 80, 97, 116, 82, 97, 110, 103, 101, 44, 118, 105, 109, 83, 117, 98, 115, 116, 83, 117, 98, 115, 116, 114, 44, 118, 105, 109, 80, 97, 116, 82, 101, 103, 105, 111, 110, 44, 118, 105, 109, 80, 97, 116, 83, 101, 112, 69, 114, 114, 44, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 83, 121, 110, 82, 101, 103, 71, 114, 111, 117, 112, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 83, 121, 110, 67, 111, 110, 116, 97, 105, 110, 115, 44, 118, 105, 109, 83, 121, 110, 78, 101, 120, 116, 103, 114, 111, 117, 112, 44, 118, 105, 109, 83, 121, 110, 82, 101, 103, 79, 112, 116, 44, 118, 105, 109, 83, 121, 110, 82, 101, 103, 44, 118, 105, 109, 83, 121, 110, 77, 116, 99, 104, 71, 114, 112, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 114, 101, 103, 105, 111, 110, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 82, 101, 103, 105, 111, 110, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 121, 110, 82, 101, 103, 105, 111, 110, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 107, 101, 101, 112, 101, 110, 100, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 78, 97, 109, 101, 32, 115, 116, 97, 114, 116, 61, 34, 92, 104, 92, 119, 42, 34, 32, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 92, 124, 92, 92, 124, 34, 32, 101, 110, 100, 61, 34, 124, 92, 124, 36, 34, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 121, 110, 82, 101, 103, 71, 114, 111, 117, 112, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 82, 101, 103, 79, 112, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 60, 92, 40, 99, 111, 110, 99, 101, 97, 108, 92, 40, 101, 110, 100, 115, 92, 41, 92, 61, 92, 124, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 92, 124, 99, 111, 110, 116, 97, 105, 110, 101, 100, 92, 124, 101, 120, 99, 108, 117, 100, 101, 110, 108, 92, 124, 115, 107, 105, 112, 101, 109, 112, 116, 121, 92, 124, 115, 107, 105, 112, 119, 104, 105, 116, 101, 92, 124, 100, 105, 115, 112, 108, 97, 121, 92, 124, 107, 101, 101, 112, 101, 110, 100, 92, 124, 111, 110, 101, 108, 105, 110, 101, 92, 124, 101, 120, 116, 101, 110, 100, 92, 124, 115, 107, 105, 112, 110, 108, 92, 124, 102, 111, 108, 100, 92, 41, 92, 62, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 82, 101, 103, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 40, 115, 116, 97, 114, 116, 92, 124, 115, 107, 105, 112, 92, 124, 101, 110, 100, 92, 41, 61, 34, 104, 101, 61, 101, 45, 49, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 82, 101, 103, 80, 97, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 77, 116, 99, 104, 71, 114, 112, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 71, 114, 111, 117, 112, 44, 118, 105, 109, 72, 76, 71, 114, 111, 117, 112, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 121, 110, 82, 101, 103, 80, 97, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 101, 120, 116, 101, 110, 100, 9, 115, 116, 97, 114, 116, 61, 34, 92, 122, 40, 91, 45, 96, 126, 33, 64, 35, 36, 37, 94, 38, 42, 95, 61, 43, 59, 58, 39, 34, 44, 46, 47, 63, 93, 92, 41, 34, 32, 32, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 92, 124, 92, 92, 92, 122, 49, 34, 32, 32, 101, 110, 100, 61, 34, 92, 122, 49, 34, 32, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 121, 110, 82, 101, 103, 80, 97, 116, 71, 114, 111, 117, 112, 32, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 80, 97, 116, 77, 111, 100, 44, 118, 105, 109, 83, 121, 110, 82, 101, 103, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 80, 97, 116, 77, 111, 100, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 40, 104, 115, 92, 124, 109, 115, 92, 124, 109, 101, 92, 124, 104, 115, 92, 124, 104, 101, 92, 124, 114, 115, 92, 124, 114, 101, 92, 41, 61, 91, 115, 101, 93, 92, 40, 91, 45, 43, 93, 92, 100, 92, 43, 92, 41, 92, 61, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 80, 97, 116, 77, 111, 100, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 40, 104, 115, 92, 124, 109, 115, 92, 124, 109, 101, 92, 124, 104, 115, 92, 124, 104, 101, 92, 124, 114, 115, 92, 124, 114, 101, 92, 41, 61, 91, 115, 101, 93, 92, 40, 91, 45, 43, 93, 92, 100, 92, 43, 92, 41, 92, 61, 44, 34, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 80, 97, 116, 77, 111, 100, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 80, 97, 116, 77, 111, 100, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 108, 99, 61, 92, 100, 92, 43, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 80, 97, 116, 77, 111, 100, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 108, 99, 61, 92, 100, 92, 43, 44, 34, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 80, 97, 116, 77, 111, 100, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 121, 110, 80, 97, 116, 82, 97, 110, 103, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 115, 116, 97, 114, 116, 61, 34, 92, 91, 34, 9, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 92, 124, 92, 92, 93, 34, 32, 32, 32, 101, 110, 100, 61, 34, 93, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 78, 111, 116, 80, 97, 116, 82, 97, 110, 103, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 92, 92, 92, 92, 124, 92, 92, 92, 91, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 77, 116, 99, 104, 67, 111, 109, 109, 101, 110, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 39, 34, 91, 94, 34, 93, 92, 43, 36, 39, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 32, 97, 100, 100, 61, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 10, 10, 34, 32, 83, 121, 110, 116, 97, 120, 58, 32, 115, 121, 110, 99, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 115, 121, 110, 99, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 99, 67, 44, 118, 105, 109, 83, 121, 110, 99, 76, 105, 110, 101, 115, 44, 118, 105, 109, 83, 121, 110, 99, 77, 97, 116, 99, 104, 44, 118, 105, 109, 83, 121, 110, 99, 69, 114, 114, 111, 114, 44, 118, 105, 109, 83, 121, 110, 99, 76, 105, 110, 101, 98, 114, 101, 97, 107, 44, 118, 105, 109, 83, 121, 110, 99, 76, 105, 110, 101, 99, 111, 110, 116, 44, 118, 105, 109, 83, 121, 110, 99, 82, 101, 103, 105, 111, 110, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 32, 38, 38, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 118, 105, 109, 115, 121, 110, 99, 101, 114, 114, 111, 114, 34, 41, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 99, 69, 114, 114, 111, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 105, 92, 43, 34, 10, 101, 110, 100, 105, 102, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 99, 67, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 99, 99, 111, 109, 109, 101, 110, 116, 9, 99, 108, 101, 97, 114, 9, 102, 114, 111, 109, 115, 116, 97, 114, 116, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 99, 77, 97, 116, 99, 104, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 109, 97, 116, 99, 104, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 99, 71, 114, 111, 117, 112, 78, 97, 109, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 99, 82, 101, 103, 105, 111, 110, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 114, 101, 103, 105, 111, 110, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 82, 101, 103, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 99, 76, 105, 110, 101, 98, 114, 101, 97, 107, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 60, 108, 105, 110, 101, 98, 114, 101, 97, 107, 115, 61, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 78, 117, 109, 98, 101, 114, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 99, 76, 105, 110, 101, 99, 111, 110, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 108, 105, 110, 101, 99, 111, 110, 116, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 82, 101, 103, 80, 97, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 99, 76, 105, 110, 101, 115, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 40, 109, 105, 110, 92, 124, 109, 97, 120, 92, 41, 92, 61, 108, 105, 110, 101, 115, 61, 34, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 78, 117, 109, 98, 101, 114, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 99, 71, 114, 111, 117, 112, 78, 97, 109, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 104, 92, 119, 42, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 99, 75, 101, 121, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 99, 75, 101, 121, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 60, 103, 114, 111, 117, 112, 116, 104, 101, 114, 101, 92, 124, 103, 114, 111, 117, 112, 104, 101, 114, 101, 92, 62, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 99, 71, 114, 111, 117, 112, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 121, 110, 99, 71, 114, 111, 117, 112, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 104, 92, 119, 42, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 121, 110, 82, 101, 103, 80, 97, 116, 44, 118, 105, 109, 83, 121, 110, 99, 78, 111, 110, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 83, 121, 110, 99, 78, 111, 110, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 78, 79, 78, 69, 10, 10, 34, 32, 65, 100, 100, 105, 116, 105, 111, 110, 97, 108, 32, 73, 115, 67, 111, 109, 109, 97, 110, 100, 44, 32, 104, 101, 114, 101, 32, 98, 121, 32, 114, 101, 97, 115, 111, 110, 115, 32, 111, 102, 32, 112, 114, 101, 99, 101, 100, 101, 110, 99, 101, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 73, 115, 67, 111, 109, 109, 97, 110, 100, 9, 34, 60, 66, 97, 114, 62, 92, 115, 42, 92, 97, 92, 43, 34, 9, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 44, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 10, 10, 34, 32, 72, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 72, 105, 103, 104, 108, 105, 103, 104, 116, 67, 108, 117, 115, 116, 101, 114, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 72, 105, 76, 105, 110, 107, 44, 118, 105, 109, 72, 105, 67, 108, 101, 97, 114, 44, 118, 105, 109, 72, 105, 75, 101, 121, 76, 105, 115, 116, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 32, 38, 38, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 118, 105, 109, 104, 105, 99, 116, 101, 114, 109, 101, 114, 114, 111, 114, 34, 41, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 67, 116, 101, 114, 109, 69, 114, 114, 111, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 91, 94, 48, 45, 57, 93, 92, 105, 42, 34, 10, 101, 110, 100, 105, 102, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 103, 104, 108, 105, 103, 104, 116, 9, 34, 92, 60, 104, 105, 92, 37, 91, 103, 104, 108, 105, 103, 104, 116, 93, 92, 62, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 72, 105, 66, 97, 110, 103, 44, 64, 118, 105, 109, 72, 105, 103, 104, 108, 105, 103, 104, 116, 67, 108, 117, 115, 116, 101, 114, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 66, 97, 110, 103, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 33, 34, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 64, 118, 105, 109, 72, 105, 103, 104, 108, 105, 103, 104, 116, 67, 108, 117, 115, 116, 101, 114, 10, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 71, 114, 111, 117, 112, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 105, 92, 43, 34, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 105, 103, 110, 111, 114, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 72, 105, 65, 116, 116, 114, 105, 98, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 110, 111, 110, 101, 32, 98, 111, 108, 100, 32, 105, 110, 118, 101, 114, 115, 101, 32, 105, 116, 97, 108, 105, 99, 32, 114, 101, 118, 101, 114, 115, 101, 32, 115, 116, 97, 110, 100, 111, 117, 116, 32, 117, 110, 100, 101, 114, 108, 105, 110, 101, 32, 117, 110, 100, 101, 114, 99, 117, 114, 108, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 70, 103, 66, 103, 65, 116, 116, 114, 105, 98, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 110, 111, 110, 101, 32, 98, 103, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 102, 103, 32, 102, 111, 114, 101, 103, 114, 111, 117, 110, 100, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 109, 97, 116, 99, 104, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 65, 116, 116, 114, 105, 98, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 105, 92, 43, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 72, 105, 65, 116, 116, 114, 105, 98, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 65, 116, 116, 114, 105, 98, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 105, 92, 43, 44, 34, 104, 101, 61, 101, 45, 49, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 72, 105, 65, 116, 116, 114, 105, 98, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 72, 105, 65, 116, 116, 114, 105, 98, 76, 105, 115, 116, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 105, 103, 110, 111, 114, 101, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 72, 105, 67, 116, 101, 114, 109, 67, 111, 108, 111, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 98, 108, 97, 99, 107, 32, 98, 108, 117, 101, 32, 98, 114, 111, 119, 110, 32, 99, 121, 97, 110, 32, 100, 97, 114, 107, 98, 108, 117, 101, 32, 100, 97, 114, 107, 99, 121, 97, 110, 32, 100, 97, 114, 107, 103, 114, 97, 121, 32, 100, 97, 114, 107, 103, 114, 101, 101, 110, 32, 100, 97, 114, 107, 103, 114, 101, 121, 32, 100, 97, 114, 107, 109, 97, 103, 101, 110, 116, 97, 32, 100, 97, 114, 107, 114, 101, 100, 32, 100, 97, 114, 107, 121, 101, 108, 108, 111, 119, 32, 103, 114, 97, 121, 32, 103, 114, 101, 101, 110, 32, 103, 114, 101, 121, 32, 108, 105, 103, 104, 116, 98, 108, 117, 101, 32, 108, 105, 103, 104, 116, 99, 121, 97, 110, 32, 108, 105, 103, 104, 116, 103, 114, 97, 121, 32, 108, 105, 103, 104, 116, 103, 114, 101, 101, 110, 32, 108, 105, 103, 104, 116, 103, 114, 101, 121, 32, 108, 105, 103, 104, 116, 109, 97, 103, 101, 110, 116, 97, 32, 108, 105, 103, 104, 116, 114, 101, 100, 32, 109, 97, 103, 101, 110, 116, 97, 32, 114, 101, 100, 32, 119, 104, 105, 116, 101, 32, 121, 101, 108, 108, 111, 119, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 67, 116, 101, 114, 109, 67, 111, 108, 111, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 60, 99, 111, 108, 111, 114, 92, 100, 92, 123, 49, 44, 51, 125, 92, 62, 34, 10, 10, 115, 121, 110, 32, 99, 97, 115, 101, 32, 109, 97, 116, 99, 104, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 70, 111, 110, 116, 110, 97, 109, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 91, 97, 45, 122, 65, 45, 90, 92, 45, 42, 93, 92, 43, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 71, 117, 105, 70, 111, 110, 116, 110, 97, 109, 101, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 39, 91, 97, 45, 122, 65, 45, 90, 92, 45, 42, 32, 93, 92, 43, 39, 34, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 71, 117, 105, 82, 103, 98, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 35, 92, 120, 92, 123, 54, 125, 34, 10, 10, 34, 32, 72, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 58, 32, 104, 105, 32, 103, 114, 111, 117, 112, 32, 107, 101, 121, 61, 97, 114, 103, 32, 46, 46, 46, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 9, 118, 105, 109, 72, 105, 67, 108, 117, 115, 116, 101, 114, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 71, 114, 111, 117, 112, 44, 118, 105, 109, 72, 105, 71, 114, 111, 117, 112, 44, 118, 105, 109, 72, 105, 84, 101, 114, 109, 44, 118, 105, 109, 72, 105, 67, 84, 101, 114, 109, 44, 118, 105, 109, 72, 105, 83, 116, 97, 114, 116, 83, 116, 111, 112, 44, 118, 105, 109, 72, 105, 67, 116, 101, 114, 109, 70, 103, 66, 103, 44, 118, 105, 109, 72, 105, 71, 117, 105, 44, 118, 105, 109, 72, 105, 71, 117, 105, 70, 111, 110, 116, 44, 118, 105, 109, 72, 105, 71, 117, 105, 70, 103, 66, 103, 44, 118, 105, 109, 72, 105, 75, 101, 121, 69, 114, 114, 111, 114, 44, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 72, 105, 75, 101, 121, 76, 105, 115, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 111, 110, 101, 108, 105, 110, 101, 32, 115, 116, 97, 114, 116, 61, 34, 92, 105, 92, 43, 34, 32, 115, 107, 105, 112, 61, 34, 92, 92, 92, 92, 92, 124, 92, 92, 124, 34, 32, 101, 110, 100, 61, 34, 36, 92, 124, 124, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 72, 105, 67, 108, 117, 115, 116, 101, 114, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 32, 38, 38, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 118, 105, 109, 104, 105, 107, 101, 121, 101, 114, 114, 111, 114, 34, 41, 10, 32, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 75, 101, 121, 69, 114, 114, 111, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 105, 92, 43, 61, 34, 104, 101, 61, 101, 45, 49, 10, 101, 110, 100, 105, 102, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 84, 101, 114, 109, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 99, 116, 101, 114, 109, 61, 34, 104, 101, 61, 101, 45, 49, 9, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 72, 105, 65, 116, 116, 114, 105, 98, 76, 105, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 83, 116, 97, 114, 116, 83, 116, 111, 112, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 99, 92, 40, 115, 116, 97, 114, 116, 92, 124, 115, 116, 111, 112, 92, 41, 61, 34, 104, 101, 61, 101, 45, 49, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 72, 105, 84, 101, 114, 109, 99, 97, 112, 44, 118, 105, 109, 79, 112, 116, 105, 111, 110, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 67, 84, 101, 114, 109, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 99, 99, 116, 101, 114, 109, 61, 34, 104, 101, 61, 101, 45, 49, 9, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 72, 105, 65, 116, 116, 114, 105, 98, 76, 105, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 67, 116, 101, 114, 109, 70, 103, 66, 103, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 99, 99, 116, 101, 114, 109, 91, 102, 98, 93, 103, 61, 34, 104, 101, 61, 101, 45, 49, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 72, 105, 78, 109, 98, 114, 44, 118, 105, 109, 72, 105, 67, 116, 101, 114, 109, 67, 111, 108, 111, 114, 44, 118, 105, 109, 70, 103, 66, 103, 65, 116, 116, 114, 105, 98, 44, 118, 105, 109, 72, 105, 67, 116, 101, 114, 109, 69, 114, 114, 111, 114, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 71, 117, 105, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 99, 103, 117, 105, 61, 34, 104, 101, 61, 101, 45, 49, 9, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 72, 105, 65, 116, 116, 114, 105, 98, 76, 105, 115, 116, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 71, 117, 105, 70, 111, 110, 116, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 99, 102, 111, 110, 116, 61, 34, 104, 101, 61, 101, 45, 49, 9, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 72, 105, 70, 111, 110, 116, 110, 97, 109, 101, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 71, 117, 105, 70, 103, 66, 103, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 99, 103, 117, 105, 92, 37, 40, 91, 102, 98, 93, 103, 92, 124, 115, 112, 92, 41, 61, 34, 104, 101, 61, 101, 45, 49, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 72, 105, 71, 114, 111, 117, 112, 44, 118, 105, 109, 72, 105, 71, 117, 105, 70, 111, 110, 116, 110, 97, 109, 101, 44, 118, 105, 109, 72, 105, 71, 117, 105, 82, 103, 98, 44, 118, 105, 109, 70, 103, 66, 103, 65, 116, 116, 114, 105, 98, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 84, 101, 114, 109, 99, 97, 112, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 34, 92, 83, 92, 43, 34, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 72, 105, 78, 109, 98, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 39, 92, 100, 92, 43, 39, 10, 10, 34, 32, 72, 105, 103, 104, 108, 105, 103, 104, 116, 58, 32, 99, 108, 101, 97, 114, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 107, 101, 121, 119, 111, 114, 100, 9, 118, 105, 109, 72, 105, 67, 108, 101, 97, 114, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 9, 99, 108, 101, 97, 114, 9, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 72, 105, 71, 114, 111, 117, 112, 10, 10, 34, 32, 72, 105, 103, 104, 108, 105, 103, 104, 116, 58, 32, 108, 105, 110, 107, 32, 123, 123, 123, 50, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 72, 105, 76, 105, 110, 107, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 111, 110, 101, 108, 105, 110, 101, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 32, 115, 116, 97, 114, 116, 61, 34, 92, 40, 92, 60, 104, 105, 92, 37, 91, 103, 104, 108, 105, 103, 104, 116, 93, 92, 115, 92, 43, 92, 41, 92, 64, 60, 61, 92, 40, 92, 40, 100, 101, 102, 92, 37, 91, 97, 117, 108, 116, 93, 92, 115, 92, 43, 92, 41, 92, 61, 108, 105, 110, 107, 92, 62, 92, 124, 92, 60, 100, 101, 102, 92, 62, 92, 41, 34, 32, 101, 110, 100, 61, 34, 36, 34, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 72, 105, 71, 114, 111, 117, 112, 44, 118, 105, 109, 71, 114, 111, 117, 112, 44, 118, 105, 109, 72, 76, 71, 114, 111, 117, 112, 44, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 10, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 32, 97, 100, 100, 61, 118, 105, 109, 72, 105, 76, 105, 110, 107, 10, 10, 34, 32, 67, 111, 110, 116, 114, 111, 108, 32, 67, 104, 97, 114, 97, 99, 116, 101, 114, 115, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 67, 116, 114, 108, 67, 104, 97, 114, 9, 34, 91, 1, 45, 8, 11, 15, 45, 31, 93, 34, 10, 10, 34, 32, 66, 101, 103, 105, 110, 110, 101, 114, 115, 32, 45, 32, 80, 97, 116, 116, 101, 114, 110, 115, 32, 116, 104, 97, 116, 32, 105, 110, 118, 111, 108, 118, 101, 32, 94, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 76, 105, 110, 101, 67, 111, 109, 109, 101, 110, 116, 9, 43, 94, 91, 32, 92, 116, 58, 93, 42, 34, 46, 42, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 71, 114, 111, 117, 112, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 83, 116, 114, 105, 110, 103, 44, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 84, 105, 116, 108, 101, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 84, 105, 116, 108, 101, 9, 39, 34, 92, 115, 42, 92, 37, 40, 91, 115, 83, 93, 58, 92, 124, 92, 104, 92, 119, 42, 35, 92, 41, 92, 61, 92, 117, 92, 119, 42, 92, 40, 92, 115, 92, 43, 92, 117, 92, 119, 42, 92, 41, 42, 58, 39, 104, 115, 61, 115, 43, 49, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 84, 105, 116, 108, 101, 76, 101, 97, 100, 101, 114, 44, 118, 105, 109, 84, 111, 100, 111, 44, 64, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 71, 114, 111, 117, 112, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 67, 111, 110, 116, 105, 110, 117, 101, 9, 34, 94, 92, 115, 42, 92, 92, 34, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 9, 115, 116, 97, 114, 116, 61, 34, 94, 92, 115, 42, 92, 92, 92, 122, 40, 91, 39, 34, 93, 92, 41, 34, 32, 115, 107, 105, 112, 61, 39, 92, 92, 92, 92, 92, 124, 92, 92, 92, 122, 49, 39, 32, 101, 110, 100, 61, 34, 92, 122, 49, 34, 32, 111, 110, 101, 108, 105, 110, 101, 32, 107, 101, 101, 112, 101, 110, 100, 32, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 83, 116, 114, 105, 110, 103, 71, 114, 111, 117, 112, 44, 118, 105, 109, 67, 111, 110, 116, 105, 110, 117, 101, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 84, 105, 116, 108, 101, 76, 101, 97, 100, 101, 114, 9, 39, 34, 92, 115, 92, 43, 39, 109, 115, 61, 115, 43, 49, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 10, 10, 34, 32, 83, 101, 97, 114, 99, 104, 101, 115, 32, 65, 110, 100, 32, 71, 108, 111, 98, 97, 108, 115, 58, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 101, 97, 114, 99, 104, 9, 39, 94, 92, 115, 42, 91, 47, 63, 93, 46, 42, 39, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 118, 105, 109, 83, 101, 97, 114, 99, 104, 68, 101, 108, 105, 109, 10, 115, 121, 110, 32, 109, 97, 116, 99, 104, 9, 118, 105, 109, 83, 101, 97, 114, 99, 104, 68, 101, 108, 105, 109, 9, 39, 94, 92, 115, 42, 92, 122, 115, 91, 47, 63, 93, 92, 124, 91, 47, 63, 93, 36, 39, 9, 99, 111, 110, 116, 97, 105, 110, 101, 100, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 71, 108, 111, 98, 97, 108, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 83, 116, 97, 116, 101, 109, 101, 110, 116, 32, 115, 116, 97, 114, 116, 61, 39, 92, 60, 103, 92, 37, 91, 108, 111, 98, 97, 108, 93, 33, 92, 61, 47, 39, 32, 32, 115, 107, 105, 112, 61, 39, 92, 92, 46, 39, 32, 101, 110, 100, 61, 39, 47, 39, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 117, 98, 115, 116, 10, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 9, 118, 105, 109, 71, 108, 111, 98, 97, 108, 9, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 83, 116, 97, 116, 101, 109, 101, 110, 116, 32, 115, 116, 97, 114, 116, 61, 39, 92, 60, 118, 92, 37, 91, 103, 108, 111, 98, 97, 108, 93, 33, 92, 61, 47, 39, 32, 115, 107, 105, 112, 61, 39, 92, 92, 46, 39, 32, 101, 110, 100, 61, 39, 47, 39, 9, 115, 107, 105, 112, 119, 104, 105, 116, 101, 32, 110, 101, 120, 116, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 117, 98, 115, 116, 10, 10, 34, 32, 83, 99, 114, 105, 112, 116, 115, 32, 32, 58, 32, 112, 101, 114, 108, 44, 114, 117, 98, 121, 32, 58, 32, 66, 101, 110, 111, 105, 116, 32, 67, 101, 114, 114, 105, 110, 97, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 32, 32, 32, 32, 112, 121, 116, 104, 111, 110, 44, 116, 99, 108, 58, 32, 74, 111, 104, 97, 110, 110, 101, 115, 32, 90, 101, 108, 108, 110, 101, 114, 10, 34, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 108, 117, 97, 10, 10, 34, 32, 65, 108, 108, 111, 119, 115, 32, 117, 115, 101, 114, 115, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 111, 102, 32, 101, 109, 98, 101, 100, 100, 101, 100, 32, 115, 99, 114, 105, 112, 116, 32, 104, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 10, 34, 32, 116, 104, 101, 121, 32, 119, 97, 110, 116, 58, 32, 32, 40, 112, 101, 114, 108, 47, 112, 121, 116, 104, 111, 110, 47, 114, 117, 98, 121, 47, 116, 99, 108, 32, 115, 117, 112, 112, 111, 114, 116, 41, 10, 34, 32, 32, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 61, 61, 32, 48, 32, 32, 32, 58, 32, 100, 111, 110, 39, 116, 32, 101, 109, 98, 101, 100, 32, 97, 110, 121, 32, 115, 99, 114, 105, 112, 116, 115, 10, 34, 32, 32, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 126, 61, 32, 39, 108, 39, 32, 58, 32, 101, 109, 98, 101, 100, 32, 108, 117, 97, 10, 34, 32, 32, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 126, 61, 32, 39, 109, 39, 32, 58, 32, 101, 109, 98, 101, 100, 32, 109, 122, 115, 99, 104, 101, 109, 101, 10, 34, 32, 32, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 126, 61, 32, 39, 112, 39, 32, 58, 32, 101, 109, 98, 101, 100, 32, 112, 101, 114, 108, 10, 34, 32, 32, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 126, 61, 32, 39, 80, 39, 32, 58, 32, 101, 109, 98, 101, 100, 32, 112, 121, 116, 104, 111, 110, 10, 34, 32, 32, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 126, 61, 32, 39, 114, 39, 32, 58, 32, 101, 109, 98, 101, 100, 32, 114, 117, 98, 121, 10, 34, 32, 32, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 126, 61, 32, 39, 116, 39, 32, 58, 32, 101, 109, 98, 101, 100, 32, 116, 99, 108, 10, 105, 102, 32, 104, 97, 115, 40, 34, 119, 105, 110, 51, 50, 34, 41, 32, 124, 124, 32, 104, 97, 115, 40, 34, 119, 105, 110, 57, 53, 34, 41, 32, 124, 124, 32, 104, 97, 115, 40, 34, 119, 105, 110, 54, 52, 34, 41, 32, 124, 124, 32, 104, 97, 115, 40, 34, 119, 105, 110, 49, 54, 34, 41, 10, 32, 34, 32, 97, 112, 112, 97, 114, 101, 110, 116, 108, 121, 32, 104, 97, 115, 40, 34, 116, 99, 108, 34, 41, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 104, 97, 110, 103, 105, 110, 103, 32, 118, 105, 109, 32, 111, 110, 32, 115, 111, 109, 101, 32, 119, 105, 110, 100, 111, 119, 115, 32, 115, 121, 115, 116, 101, 109, 115, 32, 119, 105, 116, 104, 32, 99, 121, 103, 119, 105, 110, 10, 32, 108, 101, 116, 32, 115, 58, 116, 114, 121, 116, 99, 108, 61, 32, 40, 38, 115, 104, 101, 108, 108, 32, 33, 126, 32, 39, 92, 60, 92, 37, 40, 98, 97, 115, 104, 92, 62, 92, 124, 52, 91, 110, 78, 93, 91, 116, 84, 93, 92, 124, 92, 60, 122, 115, 104, 92, 41, 92, 62, 92, 37, 40, 92, 46, 101, 120, 101, 92, 41, 92, 61, 36, 39, 41, 10, 101, 108, 115, 101, 10, 32, 108, 101, 116, 32, 115, 58, 116, 114, 121, 116, 99, 108, 61, 32, 49, 10, 101, 110, 100, 105, 102, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 34, 41, 10, 32, 108, 101, 116, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 61, 32, 34, 34, 10, 32, 105, 102, 32, 104, 97, 115, 40, 34, 108, 117, 97, 34, 41, 32, 32, 32, 32, 32, 32, 32, 32, 124, 108, 101, 116, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 61, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 46, 34, 108, 34, 124, 101, 110, 100, 105, 102, 10, 32, 105, 102, 32, 104, 97, 115, 40, 34, 109, 122, 115, 99, 104, 101, 109, 101, 34, 41, 32, 32, 32, 124, 108, 101, 116, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 61, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 46, 34, 109, 34, 124, 101, 110, 100, 105, 102, 10, 32, 105, 102, 32, 104, 97, 115, 40, 34, 112, 101, 114, 108, 34, 41, 32, 32, 32, 32, 32, 32, 32, 124, 108, 101, 116, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 61, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 46, 34, 112, 34, 124, 101, 110, 100, 105, 102, 10, 32, 105, 102, 32, 32, 32, 32, 32, 104, 97, 115, 40, 34, 112, 121, 116, 104, 111, 110, 34, 41, 32, 124, 108, 101, 116, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 61, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 46, 34, 80, 34, 10, 32, 101, 108, 115, 101, 105, 102, 32, 104, 97, 115, 40, 34, 112, 121, 116, 104, 111, 110, 51, 34, 41, 124, 108, 101, 116, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 61, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 46, 34, 80, 34, 124, 101, 110, 100, 105, 102, 10, 32, 105, 102, 32, 104, 97, 115, 40, 34, 114, 117, 98, 121, 34, 41, 32, 32, 32, 32, 32, 32, 32, 124, 108, 101, 116, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 61, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 46, 34, 114, 34, 124, 101, 110, 100, 105, 102, 10, 32, 105, 102, 32, 115, 58, 116, 114, 121, 116, 99, 108, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 105, 102, 32, 104, 97, 115, 40, 34, 116, 99, 108, 34, 41, 32, 32, 32, 32, 32, 32, 32, 124, 108, 101, 116, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 61, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 46, 34, 116, 34, 124, 101, 110, 100, 105, 102, 10, 32, 101, 110, 100, 105, 102, 10, 101, 110, 100, 105, 102, 10, 117, 110, 108, 101, 116, 32, 115, 58, 116, 114, 121, 116, 99, 108, 10, 10, 34, 32, 91, 45, 45, 32, 108, 117, 97, 32, 45, 45, 93, 32, 123, 123, 123, 51, 10, 108, 101, 116, 32, 115, 58, 108, 117, 97, 112, 97, 116, 104, 61, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 101, 120, 112, 97, 110, 100, 40, 34, 60, 115, 102, 105, 108, 101, 62, 58, 112, 58, 104, 34, 41, 46, 34, 47, 108, 117, 97, 46, 118, 105, 109, 34, 41, 10, 105, 102, 32, 33, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 115, 58, 108, 117, 97, 112, 97, 116, 104, 41, 10, 32, 102, 111, 114, 32, 115, 58, 108, 117, 97, 112, 97, 116, 104, 32, 105, 110, 32, 115, 112, 108, 105, 116, 40, 103, 108, 111, 98, 112, 97, 116, 104, 40, 38, 114, 116, 112, 44, 34, 115, 121, 110, 116, 97, 120, 47, 108, 117, 97, 46, 118, 105, 109, 34, 41, 44, 34, 92, 110, 34, 41, 10, 32, 32, 105, 102, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 115, 58, 108, 117]);
        fileData6.push.apply(fileData6, [97, 112, 97, 116, 104, 41, 41, 10, 32, 32, 32, 108, 101, 116, 32, 115, 58, 108, 117, 97, 112, 97, 116, 104, 61, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 115, 58, 108, 117, 97, 112, 97, 116, 104, 41, 10, 32, 32, 32, 98, 114, 101, 97, 107, 10, 32, 32, 101, 110, 100, 105, 102, 10, 32, 101, 110, 100, 102, 111, 114, 10, 101, 110, 100, 105, 102, 10, 105, 102, 32, 40, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 61, 126, 32, 39, 108, 39, 41, 32, 38, 38, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 115, 58, 108, 117, 97, 112, 97, 116, 104, 41, 10, 32, 117, 110, 108, 101, 116, 33, 32, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 10, 32, 101, 120, 101, 32, 34, 115, 121, 110, 32, 105, 110, 99, 108, 117, 100, 101, 32, 64, 118, 105, 109, 76, 117, 97, 83, 99, 114, 105, 112, 116, 32, 34, 46, 115, 58, 108, 117, 97, 112, 97, 116, 104, 10, 32, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 34, 41, 32, 38, 38, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 32, 61, 126, 32, 39, 108, 39, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 76, 117, 97, 82, 101, 103, 105, 111, 110, 32, 102, 111, 108, 100, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 108, 117, 97, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 76, 117, 97, 83, 99, 114, 105, 112, 116, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 76, 117, 97, 82, 101, 103, 105, 111, 110, 32, 102, 111, 108, 100, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 108, 117, 97, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 76, 117, 97, 83, 99, 114, 105, 112, 116, 10, 32, 101, 108, 115, 101, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 76, 117, 97, 82, 101, 103, 105, 111, 110, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 108, 117, 97, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 76, 117, 97, 83, 99, 114, 105, 112, 116, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 76, 117, 97, 82, 101, 103, 105, 111, 110, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 108, 117, 97, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 76, 117, 97, 83, 99, 114, 105, 112, 116, 10, 32, 101, 110, 100, 105, 102, 10, 32, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 9, 97, 100, 100, 61, 118, 105, 109, 76, 117, 97, 82, 101, 103, 105, 111, 110, 10, 101, 108, 115, 101, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 32, 115, 116, 97, 114, 116, 61, 43, 108, 117, 97, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 32, 115, 116, 97, 114, 116, 61, 43, 108, 117, 97, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 10, 101, 110, 100, 105, 102, 10, 117, 110, 108, 101, 116, 32, 115, 58, 108, 117, 97, 112, 97, 116, 104, 10, 10, 34, 32, 91, 45, 45, 32, 112, 101, 114, 108, 32, 45, 45, 93, 32, 123, 123, 123, 51, 10, 108, 101, 116, 32, 115, 58, 112, 101, 114, 108, 112, 97, 116, 104, 61, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 101, 120, 112, 97, 110, 100, 40, 34, 60, 115, 102, 105, 108, 101, 62, 58, 112, 58, 104, 34, 41, 46, 34, 47, 112, 101, 114, 108, 46, 118, 105, 109, 34, 41, 10, 105, 102, 32, 33, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 115, 58, 112, 101, 114, 108, 112, 97, 116, 104, 41, 10, 32, 102, 111, 114, 32, 115, 58, 112, 101, 114, 108, 112, 97, 116, 104, 32, 105, 110, 32, 115, 112, 108, 105, 116, 40, 103, 108, 111, 98, 112, 97, 116, 104, 40, 38, 114, 116, 112, 44, 34, 115, 121, 110, 116, 97, 120, 47, 112, 101, 114, 108, 46, 118, 105, 109, 34, 41, 44, 34, 92, 110, 34, 41, 10, 32, 32, 105, 102, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 115, 58, 112, 101, 114, 108, 112, 97, 116, 104, 41, 41, 10, 32, 32, 32, 108, 101, 116, 32, 115, 58, 112, 101, 114, 108, 112, 97, 116, 104, 61, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 115, 58, 112, 101, 114, 108, 112, 97, 116, 104, 41, 10, 32, 32, 32, 98, 114, 101, 97, 107, 10, 32, 32, 101, 110, 100, 105, 102, 10, 32, 101, 110, 100, 102, 111, 114, 10, 101, 110, 100, 105, 102, 10, 105, 102, 32, 40, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 61, 126, 32, 39, 112, 39, 41, 32, 38, 38, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 115, 58, 112, 101, 114, 108, 112, 97, 116, 104, 41, 10, 32, 117, 110, 108, 101, 116, 33, 32, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 10, 32, 101, 120, 101, 32, 34, 115, 121, 110, 32, 105, 110, 99, 108, 117, 100, 101, 32, 64, 118, 105, 109, 80, 101, 114, 108, 83, 99, 114, 105, 112, 116, 32, 34, 46, 115, 58, 112, 101, 114, 108, 112, 97, 116, 104, 10, 32, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 34, 41, 32, 38, 38, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 32, 61, 126, 32, 39, 112, 39, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 80, 101, 114, 108, 82, 101, 103, 105, 111, 110, 32, 102, 111, 108, 100, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 112, 101, 92, 37, 91, 114, 108, 93, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 80, 101, 114, 108, 83, 99, 114, 105, 112, 116, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 80, 101, 114, 108, 82, 101, 103, 105, 111, 110, 32, 102, 111, 108, 100, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 112, 101, 92, 37, 91, 114, 108, 93, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 80, 101, 114, 108, 83, 99, 114, 105, 112, 116, 10, 32, 101, 108, 115, 101, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 80, 101, 114, 108, 82, 101, 103, 105, 111, 110, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 112, 101, 92, 37, 91, 114, 108, 93, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 80, 101, 114, 108, 83, 99, 114, 105, 112, 116, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 80, 101, 114, 108, 82, 101, 103, 105, 111, 110, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 112, 101, 92, 37, 91, 114, 108, 93, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 80, 101, 114, 108, 83, 99, 114, 105, 112, 116, 10, 32, 101, 110, 100, 105, 102, 10, 32, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 9, 97, 100, 100, 61, 118, 105, 109, 80, 101, 114, 108, 82, 101, 103, 105, 111, 110, 10, 101, 108, 115, 101, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 32, 115, 116, 97, 114, 116, 61, 43, 112, 101, 92, 37, 91, 114, 108, 93, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 32, 115, 116, 97, 114, 116, 61, 43, 112, 101, 92, 37, 91, 114, 108, 93, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 10, 101, 110, 100, 105, 102, 10, 117, 110, 108, 101, 116, 32, 115, 58, 112, 101, 114, 108, 112, 97, 116, 104, 10, 10, 34, 32, 91, 45, 45, 32, 114, 117, 98, 121, 32, 45, 45, 93, 32, 123, 123, 123, 51, 10, 108, 101, 116, 32, 115, 58, 114, 117, 98, 121, 112, 97, 116, 104, 61, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 101, 120, 112, 97, 110, 100, 40, 34, 60, 115, 102, 105, 108, 101, 62, 58, 112, 58, 104, 34, 41, 46, 34, 47, 114, 117, 98, 121, 46, 118, 105, 109, 34, 41, 10, 105, 102, 32, 33, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 115, 58, 114, 117, 98, 121, 112, 97, 116, 104, 41, 10, 32, 102, 111, 114, 32, 115, 58, 114, 117, 98, 121, 112, 97, 116, 104, 32, 105, 110, 32, 115, 112, 108, 105, 116, 40, 103, 108, 111, 98, 112, 97, 116, 104, 40, 38, 114, 116, 112, 44, 34, 115, 121, 110, 116, 97, 120, 47, 114, 117, 98, 121, 46, 118, 105, 109, 34, 41, 44, 34, 92, 110, 34, 41, 10, 32, 32, 105, 102, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 115, 58, 114, 117, 98, 121, 112, 97, 116, 104, 41, 41, 10, 32, 32, 32, 108, 101, 116, 32, 115, 58, 114, 117, 98, 121, 112, 97, 116, 104, 61, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 115, 58, 114, 117, 98, 121, 112, 97, 116, 104, 41, 10, 32, 32, 32, 98, 114, 101, 97, 107, 10, 32, 32, 101, 110, 100, 105, 102, 10, 32, 101, 110, 100, 102, 111, 114, 10, 101, 110, 100, 105, 102, 10, 105, 102, 32, 40, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 61, 126, 32, 39, 114, 39, 41, 32, 38, 38, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 115, 58, 114, 117, 98, 121, 112, 97, 116, 104, 41, 10, 32, 117, 110, 108, 101, 116, 33, 32, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 10, 32, 101, 120, 101, 32, 34, 115, 121, 110, 32, 105, 110, 99, 108, 117, 100, 101, 32, 64, 118, 105, 109, 82, 117, 98, 121, 83, 99, 114, 105, 112, 116, 32, 34, 46, 115, 58, 114, 117, 98, 121, 112, 97, 116, 104, 10, 32, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 34, 41, 32, 38, 38, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 32, 61, 126, 32, 39, 114, 39, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 82, 117, 98, 121, 82, 101, 103, 105, 111, 110, 32, 102, 111, 108, 100, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 114, 117, 98, 91, 121, 93, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 82, 117, 98, 121, 83, 99, 114, 105, 112, 116, 10, 32, 101, 108, 115, 101, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 82, 117, 98, 121, 82, 101, 103, 105, 111, 110, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 114, 117, 98, 91, 121, 93, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 82, 117, 98, 121, 83, 99, 114, 105, 112, 116, 10, 32, 101, 110, 100, 105, 102, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 82, 117, 98, 121, 82, 101, 103, 105, 111, 110, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 114, 117, 98, 91, 121, 93, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 82, 117, 98, 121, 83, 99, 114, 105, 112, 116, 10, 32, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 9, 97, 100, 100, 61, 118, 105, 109, 82, 117, 98, 121, 82, 101, 103, 105, 111, 110, 10, 101, 108, 115, 101, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 32, 115, 116, 97, 114, 116, 61, 43, 114, 117, 98, 91, 121, 93, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 32, 115, 116, 97, 114, 116, 61, 43, 114, 117, 98, 91, 121, 93, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 10, 101, 110, 100, 105, 102, 10, 117, 110, 108, 101, 116, 32, 115, 58, 114, 117, 98, 121, 112, 97, 116, 104, 10, 10, 34, 32, 91, 45, 45, 32, 112, 121, 116, 104, 111, 110, 32, 45, 45, 93, 32, 123, 123, 123, 51, 10, 108, 101, 116, 32, 115, 58, 112, 121, 116, 104, 111, 110, 112, 97, 116, 104, 61, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 101, 120, 112, 97, 110, 100, 40, 34, 60, 115, 102, 105, 108, 101, 62, 58, 112, 58, 104, 34, 41, 46, 34, 47, 112, 121, 116, 104, 111, 110, 46, 118, 105, 109, 34, 41, 10, 105, 102, 32, 33, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 115, 58, 112, 121, 116, 104, 111, 110, 112, 97, 116, 104, 41, 10, 32, 102, 111, 114, 32, 115, 58, 112, 121, 116, 104, 111, 110, 112, 97, 116, 104, 32, 105, 110, 32, 115, 112, 108, 105, 116, 40, 103, 108, 111, 98, 112, 97, 116, 104, 40, 38, 114, 116, 112, 44, 34, 115, 121, 110, 116, 97, 120, 47, 112, 121, 116, 104, 111, 110, 46, 118, 105, 109, 34, 41, 44, 34, 92, 110, 34, 41, 10, 32, 32, 105, 102, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 115, 58, 112, 121, 116, 104, 111, 110, 112, 97, 116, 104, 41, 41, 10, 32, 32, 32, 108, 101, 116, 32, 115, 58, 112, 121, 116, 104, 111, 110, 112, 97, 116, 104, 61, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 115, 58, 112, 121, 116, 104, 111, 110, 112, 97, 116, 104, 41, 10, 32, 32, 32, 98, 114, 101, 97, 107, 10, 32, 32, 101, 110, 100, 105, 102, 10, 32, 101, 110, 100, 102, 111, 114, 10, 101, 110, 100, 105, 102, 10, 105, 102, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 61, 126, 32, 39, 80, 39, 32, 38, 38, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 115, 58, 112, 121, 116, 104, 111, 110, 112, 97, 116, 104, 41, 10, 32, 117, 110, 108, 101, 116, 33, 32, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 10, 32, 101, 120, 101, 32, 34, 115, 121, 110, 32, 105, 110, 99, 108, 117, 100, 101, 32, 64, 118, 105, 109, 80, 121, 116, 104, 111, 110, 83, 99, 114, 105, 112, 116, 32, 34, 46, 115, 58, 112, 121, 116, 104, 111, 110, 112, 97, 116, 104, 10, 32, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 34, 41, 32, 38, 38, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 32, 61, 126, 32, 39, 80, 39, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 80, 121, 116, 104, 111, 110, 82, 101, 103, 105, 111, 110, 32, 102, 111, 108, 100, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 112, 121, 92, 37, 91, 116, 104, 111, 110, 93, 51, 92, 61, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 80, 121, 116, 104, 111, 110, 83, 99, 114, 105, 112, 116, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 80, 121, 116, 104, 111, 110, 82, 101, 103, 105, 111, 110, 32, 102, 111, 108, 100, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 112, 121, 92, 37, 91, 116, 104, 111, 110, 93, 51, 92, 61, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 80, 121, 116, 104, 111, 110, 83, 99, 114, 105, 112, 116, 10, 32, 101, 108, 115, 101, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 80, 121, 116, 104, 111, 110, 82, 101, 103, 105, 111, 110, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 112, 121, 92, 37, 91, 116, 104, 111, 110, 93, 51, 92, 61, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 80, 121, 116, 104, 111, 110, 83, 99, 114, 105, 112, 116, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 80, 121, 116, 104, 111, 110, 82, 101, 103, 105, 111, 110, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 112, 121, 92, 37, 91, 116, 104, 111, 110, 93, 51, 92, 61, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 80, 121, 116, 104, 111, 110, 83, 99, 114, 105, 112, 116, 10, 32, 101, 110, 100, 105, 102, 10, 32, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 9, 97, 100, 100, 61, 118, 105, 109, 80, 121, 116, 104, 111, 110, 82, 101, 103, 105, 111, 110, 10, 101, 108, 115, 101, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 32, 115, 116, 97, 114, 116, 61, 43, 112, 121, 92, 37, 91, 116, 104, 111, 110, 93, 51, 92, 61, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 32, 115, 116, 97, 114, 116, 61, 43, 112, 121, 92, 37, 91, 116, 104, 111, 110, 93, 51, 92, 61, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 10, 101, 110, 100, 105, 102, 10, 117, 110, 108, 101, 116, 32, 115, 58, 112, 121, 116, 104, 111, 110, 112, 97, 116, 104, 10, 10, 34, 32, 91, 45, 45, 32, 116, 99, 108, 32, 45, 45, 93, 32, 123, 123, 123, 51, 10, 108, 101, 116, 32, 115, 58, 116, 99, 108, 112, 97, 116, 104, 61, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 101, 120, 112, 97, 110, 100, 40, 34, 60, 115, 102, 105, 108, 101, 62, 58, 112, 58, 104, 34, 41, 46, 34, 47, 116, 99, 108, 46, 118, 105, 109, 34, 41, 10, 105, 102, 32, 33, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 115, 58, 116, 99, 108, 112, 97, 116, 104, 41, 10, 32, 102, 111, 114, 32, 115, 58, 116, 99, 108, 112, 97, 116, 104, 32, 105, 110, 32, 115, 112, 108, 105, 116, 40, 103, 108, 111, 98, 112, 97, 116, 104, 40, 38, 114, 116, 112, 44, 34, 115, 121, 110, 116, 97, 120, 47, 116, 99, 108, 46, 118, 105, 109, 34, 41, 44, 34, 92, 110, 34, 41, 10, 32, 32, 105, 102, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 115, 58, 116, 99, 108, 112, 97, 116, 104, 41, 41, 10, 32, 32, 32, 108, 101, 116, 32, 115, 58, 116, 99, 108, 112, 97, 116, 104, 61, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 115, 58, 116, 99, 108, 112, 97, 116, 104, 41, 10, 32, 32, 32, 98, 114, 101, 97, 107, 10, 32, 32, 101, 110, 100, 105, 102, 10, 32, 101, 110, 100, 102, 111, 114, 10, 101, 110, 100, 105, 102, 10, 105, 102, 32, 40, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 61, 126, 32, 39, 116, 39, 41, 32, 38, 38, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 115, 58, 116, 99, 108, 112, 97, 116, 104, 41, 10, 32, 117, 110, 108, 101, 116, 33, 32, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 10, 32, 101, 120, 101, 32, 34, 115, 121, 110, 32, 105, 110, 99, 108, 117, 100, 101, 32, 64, 118, 105, 109, 84, 99, 108, 83, 99, 114, 105, 112, 116, 32, 34, 46, 115, 58, 116, 99, 108, 112, 97, 116, 104, 10, 32, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 34, 41, 32, 38, 38, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 32, 61, 126, 32, 39, 116, 39, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 84, 99, 108, 82, 101, 103, 105, 111, 110, 32, 102, 111, 108, 100, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 116, 99, 91, 108, 93, 92, 61, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 84, 99, 108, 83, 99, 114, 105, 112, 116, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 84, 99, 108, 82, 101, 103, 105, 111, 110, 32, 102, 111, 108, 100, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 116, 99, 91, 108, 93, 92, 61, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 84, 99, 108, 83, 99, 114, 105, 112, 116, 10, 32, 101, 108, 115, 101, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 84, 99, 108, 82, 101, 103, 105, 111, 110, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 116, 99, 91, 108, 93, 92, 61, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 84, 99, 108, 83, 99, 114, 105, 112, 116, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 84, 99, 108, 82, 101, 103, 105, 111, 110, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 116, 99, 91, 108, 93, 92, 61, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 84, 99, 108, 83, 99, 114, 105, 112, 116, 10, 32, 101, 110, 100, 105, 102, 10, 32, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 9, 97, 100, 100, 61, 118, 105, 109, 84, 99, 108, 83, 99, 114, 105, 112, 116, 10, 101, 108, 115, 101, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 32, 115, 116, 97, 114, 116, 61, 43, 116, 99, 91, 108, 93, 92, 61, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 32, 115, 116, 97, 114, 116, 61, 43, 116, 99, 91, 108, 93, 92, 61, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 10, 101, 110, 100, 105, 102, 10, 117, 110, 108, 101, 116, 32, 115, 58, 116, 99, 108, 112, 97, 116, 104, 10, 10, 34, 32, 91, 45, 45, 32, 109, 122, 115, 99, 104, 101, 109, 101, 32, 45, 45, 93, 32, 123, 123, 123, 51, 10, 108, 101, 116, 32, 115, 58, 109, 122, 115, 99, 104, 101, 109, 101, 112, 97, 116, 104, 61, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 101, 120, 112, 97, 110, 100, 40, 34, 60, 115, 102, 105, 108, 101, 62, 58, 112, 58, 104, 34, 41, 46, 34, 47, 115, 99, 104, 101, 109, 101, 46, 118, 105, 109, 34, 41, 10, 105, 102, 32, 33, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 115, 58, 109, 122, 115, 99, 104, 101, 109, 101, 112, 97, 116, 104, 41, 10, 32, 102, 111, 114, 32, 115, 58, 109, 122, 115, 99, 104, 101, 109, 101, 112, 97, 116, 104, 32, 105, 110, 32, 115, 112, 108, 105, 116, 40, 103, 108, 111, 98, 112, 97, 116, 104, 40, 38, 114, 116, 112, 44, 34, 115, 121, 110, 116, 97, 120, 47, 109, 122, 115, 99, 104, 101, 109, 101, 46, 118, 105, 109, 34, 41, 44, 34, 92, 110, 34, 41, 10, 32, 32, 105, 102, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 115, 58, 109, 122, 115, 99, 104, 101, 109, 101, 112, 97, 116, 104, 41, 41, 10, 32, 32, 32, 108, 101, 116, 32, 115, 58, 109, 122, 115, 99, 104, 101, 109, 101, 112, 97, 116, 104, 61, 32, 102, 110, 97, 109, 101, 101, 115, 99, 97, 112, 101, 40, 115, 58, 109, 122, 115, 99, 104, 101, 109, 101, 112, 97, 116, 104, 41, 10, 32, 32, 32, 98, 114, 101, 97, 107, 10, 32, 32, 101, 110, 100, 105, 102, 10, 32, 101, 110, 100, 102, 111, 114, 10, 101, 110, 100, 105, 102, 10, 105, 102, 32, 40, 103, 58, 118, 105, 109, 115, 121, 110, 95, 101, 109, 98, 101, 100, 32, 61, 126, 32, 39, 109, 39, 32, 38, 38, 32, 104, 97, 115, 40, 34, 109, 122, 115, 99, 104, 101, 109, 101, 34, 41, 41, 32, 38, 38, 32, 102, 105, 108, 101, 114, 101, 97, 100, 97, 98, 108, 101, 40, 115, 58, 109, 122, 115, 99, 104, 101, 109, 101, 112, 97, 116, 104, 41, 10, 32, 117, 110, 108, 101, 116, 33, 32, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 10, 32, 108, 101, 116, 32, 105, 115, 107, 75, 101, 101, 112, 61, 32, 38, 105, 115, 107, 10, 32, 101, 120, 101, 32, 34, 115, 121, 110, 32, 105, 110, 99, 108, 117, 100, 101, 32, 64, 118, 105, 109, 77, 122, 83, 99, 104, 101, 109, 101, 83, 99, 114, 105, 112, 116, 32, 34, 46, 115, 58, 109, 122, 115, 99, 104, 101, 109, 101, 112, 97, 116, 104, 10, 32, 108, 101, 116, 32, 38, 105, 115, 107, 61, 32, 105, 115, 107, 75, 101, 101, 112, 10, 32, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 34, 41, 32, 38, 38, 32, 103, 58, 118, 105, 109, 115, 121, 110, 95, 102, 111, 108, 100, 105, 110, 103, 32, 61, 126, 32, 39, 109, 39, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 77, 122, 83, 99, 104, 101, 109, 101, 82, 101, 103, 105, 111, 110, 32, 102, 111, 108, 100, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 109, 122, 92, 37, 91, 115, 99, 104, 101, 109, 101, 93, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 77, 122, 83, 99, 104, 101, 109, 101, 83, 99, 114, 105, 112, 116, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 77, 122, 83, 99, 104, 101, 109, 101, 82, 101, 103, 105, 111, 110, 32, 102, 111, 108, 100, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 109, 122, 92, 37, 91, 115, 99, 104, 101, 109, 101, 93, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 77, 122, 83, 99, 104, 101, 109, 101, 83, 99, 114, 105, 112, 116, 10, 32, 101, 108, 115, 101, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 77, 122, 83, 99, 104, 101, 109, 101, 82, 101, 103, 105, 111, 110, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 109, 122, 92, 37, 91, 115, 99, 104, 101, 109, 101, 93, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 77, 122, 83, 99, 104, 101, 109, 101, 83, 99, 114, 105, 112, 116, 10, 32, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 77, 122, 83, 99, 104, 101, 109, 101, 82, 101, 103, 105, 111, 110, 32, 109, 97, 116, 99, 104, 103, 114, 111, 117, 112, 61, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 32, 115, 116, 97, 114, 116, 61, 43, 109, 122, 92, 37, 91, 115, 99, 104, 101, 109, 101, 93, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 9, 9, 99, 111, 110, 116, 97, 105, 110, 115, 61, 64, 118, 105, 109, 77, 122, 83, 99, 104, 101, 109, 101, 83, 99, 114, 105, 112, 116, 10, 32, 101, 110, 100, 105, 102, 10, 32, 115, 121, 110, 32, 99, 108, 117, 115, 116, 101, 114, 32, 118, 105, 109, 70, 117, 110, 99, 66, 111, 100, 121, 76, 105, 115, 116, 9, 97, 100, 100, 61, 118, 105, 109, 77, 122, 83, 99, 104, 101, 109, 101, 82, 101, 103, 105, 111, 110, 10, 101, 108, 115, 101, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 32, 115, 116, 97, 114, 116, 61, 43, 109, 122, 92, 37, 91, 115, 99, 104, 101, 109, 101, 93, 92, 115, 42, 60, 60, 92, 115, 42, 92, 122, 40, 46, 42, 92, 41, 36, 43, 32, 101, 110, 100, 61, 43, 94, 92, 122, 49, 36, 43, 10, 32, 115, 121, 110, 32, 114, 101, 103, 105, 111, 110, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 32, 115, 116, 97, 114, 116, 61, 43, 109, 122, 92, 37, 91, 115, 99, 104, 101, 109, 101, 93, 92, 115, 42, 60, 60, 92, 115, 42, 36, 43, 32, 101, 110, 100, 61, 43, 92, 46, 36, 43, 10, 101, 110, 100, 105, 102, 10, 117, 110, 108, 101, 116, 32, 115, 58, 109, 122, 115, 99, 104, 101, 109, 101, 112, 97, 116, 104, 10, 10, 34, 32, 83, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 32, 40, 115, 112, 101, 101, 100, 41, 32, 123, 123, 123, 50, 10, 34, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 109, 105, 110, 108, 105, 110, 101, 115, 34, 41, 10, 32, 101, 120, 101, 32, 34, 115, 121, 110, 32, 115, 121, 110, 99, 32, 109, 105, 110, 108, 105, 110, 101, 115, 61, 34, 46, 103, 58, 118, 105, 109, 115, 121, 110, 95, 109, 105, 110, 108, 105, 110, 101, 115, 10, 101, 110, 100, 105, 102, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 109, 97, 120, 108, 105, 110, 101, 115, 34, 41, 10, 32, 101, 120, 101, 32, 34, 115, 121, 110, 32, 115, 121, 110, 99, 32, 109, 97, 120, 108, 105, 110, 101, 115, 61, 34, 46, 103, 58, 118, 105, 109, 115, 121, 110, 95, 109, 97, 120, 108, 105, 110, 101, 115, 10, 101, 108, 115, 101, 10, 32, 115, 121, 110, 32, 115, 121, 110, 99, 32, 109, 97, 120, 108, 105, 110, 101, 115, 61, 54, 48, 10, 101, 110, 100, 105, 102, 10, 115, 121, 110, 32, 115, 121, 110, 99, 32, 108, 105, 110, 101, 99, 111, 110, 116, 9, 34, 94, 92, 115, 92, 43, 92, 92, 34, 10, 115, 121, 110, 32, 115, 121, 110, 99, 32, 109, 97, 116, 99, 104, 32, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 83, 121, 110, 99, 65, 9, 103, 114, 111, 117, 112, 116, 104, 101, 114, 101, 32, 78, 79, 78, 69, 9, 34, 92, 60, 97, 117, 103, 92, 37, 91, 114, 111, 117, 112, 93, 92, 62, 92, 115, 92, 43, 91, 101, 69, 93, 91, 110, 78, 93, 91, 100, 68, 93, 34, 10, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 34, 32, 72, 105, 103, 104, 108, 105, 103, 104, 116, 105, 110, 103, 32, 83, 101, 116, 116, 105, 110, 103, 115, 32, 123, 123, 123, 50, 10, 34, 32, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 10, 10, 105, 102, 32, 33, 101, 120, 105, 115, 116, 115, 40, 34, 103, 58, 118, 105, 109, 115, 121, 110, 95, 110, 111, 101, 114, 114, 111, 114, 34, 41, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 66, 101, 104, 97, 118, 101, 69, 114, 114, 111, 114, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 67, 111, 108, 108, 67, 108, 97, 115, 115, 69, 114, 114, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 69, 114, 114, 83, 101, 116, 116, 105, 110, 103, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 69, 109, 98, 101, 100, 69, 114, 114, 111, 114, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 70, 84, 69, 114, 114, 111, 114, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 70, 117, 110, 99, 116, 105, 111, 110, 69, 114, 114, 111, 114, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 70, 117, 110, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 65, 116, 116, 114, 105, 98, 76, 105, 115, 116, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 67, 116, 101, 114, 109, 69, 114, 114, 111, 114, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 75, 101, 121, 69, 114, 114, 111, 114, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 75, 101, 121, 67, 111, 100, 101, 69, 114, 114, 111, 114, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 77, 97, 112, 77, 111, 100, 69, 114, 114, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 117, 98, 115, 116, 70, 108, 97, 103, 69, 114, 114, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 67, 97, 115, 101, 69, 114, 114, 111, 114, 9, 118, 105, 109, 69, 114, 114, 111, 114, 10, 32, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 66, 117, 102, 110, 114, 87, 97, 114, 110, 9, 118, 105, 109, 87, 97, 114, 110, 10, 101, 110, 100, 105, 102, 10, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 65, 98, 98, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 65, 100, 100, 114, 101, 115, 115, 9, 118, 105, 109, 77, 97, 114, 107, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 65, 117, 103, 114, 111, 117, 112, 75, 101, 121, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 65, 117, 72, 105, 103, 104, 108, 105, 103, 104, 116, 9, 118, 105, 109, 72, 105, 103, 104, 108, 105, 103, 104, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 79, 112, 116, 9, 118, 105, 109, 79, 112, 116, 105, 111, 110, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 65, 117, 116, 111, 67, 109, 100, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 65, 117, 116, 111, 69, 118, 101, 110, 116, 9, 84, 121, 112, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 65, 117, 116, 111, 83, 101, 116, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 66, 101, 104, 97, 118, 101, 77, 111, 100, 101, 108, 9, 118, 105, 109, 66, 101, 104, 97, 118, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 66, 101, 104, 97, 118, 101, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 66, 114, 97, 99, 107, 101, 116, 9, 68, 101, 108, 105, 109, 105, 116, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 67, 109, 112, 108, 120, 82, 101, 112, 101, 97, 116, 9, 83, 112, 101, 99, 105, 97, 108, 67, 104, 97, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 9, 83, 116, 97, 116, 101, 109, 101, 110, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 9, 67, 111, 109, 109, 101, 110, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 83, 116, 114, 105, 110, 103, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 84, 105, 116, 108, 101, 9, 80, 114, 101, 80, 114, 111, 99, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 67, 111, 110, 100, 72, 76, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 67, 111, 110, 116, 105, 110, 117, 101, 9, 83, 112, 101, 99, 105, 97, 108, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 67, 116, 114, 108, 67, 104, 97, 114, 9, 83, 112, 101, 99, 105, 97, 108, 67, 104, 97, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 69, 99, 104, 111, 72, 76, 78, 111, 110, 101, 9, 118, 105, 109, 71, 114, 111, 117, 112, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 69, 99, 104, 111, 72, 76, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 69, 108, 115, 101, 73, 102, 69, 114, 114, 9, 69, 114, 114, 111, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 69, 108, 115, 101, 105, 102, 9, 118, 105, 109, 67, 111, 110, 100, 72, 76, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 69, 110, 118, 118, 97, 114, 9, 80, 114, 101, 80, 114, 111, 99, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 69, 114, 114, 111, 114, 9, 69, 114, 114, 111, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 70, 66, 86, 97, 114, 9, 118, 105, 109, 86, 97, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 70, 103, 66, 103, 65, 116, 116, 114, 105, 98, 9, 118, 105, 109, 72, 105, 65, 116, 116, 114, 105, 98, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 70, 111, 108, 100, 9, 70, 111, 108, 100, 101, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 70, 84, 67, 109, 100, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 70, 84, 79, 112, 116, 105, 111, 110, 9, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 70, 117, 110, 99, 75, 101, 121, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 70, 117, 110, 99, 78, 97, 109, 101, 9, 70, 117, 110, 99, 116, 105, 111, 110, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 70, 117, 110, 99, 83, 73, 68, 9, 83, 112, 101, 99, 105, 97, 108, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 70, 117, 110, 99, 86, 97, 114, 9, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 71, 114, 111, 117, 112, 65, 100, 100, 9, 118, 105, 109, 83, 121, 110, 79, 112, 116, 105, 111, 110, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 71, 114, 111, 117, 112, 78, 97, 109, 101, 9, 118, 105, 109, 71, 114, 111, 117, 112, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 71, 114, 111, 117, 112, 82, 101, 109, 9, 118, 105, 109, 83, 121, 110, 79, 112, 116, 105, 111, 110, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 71, 114, 111, 117, 112, 83, 112, 101, 99, 105, 97, 108, 9, 83, 112, 101, 99, 105, 97, 108, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 71, 114, 111, 117, 112, 9, 84, 121, 112, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 65, 116, 116, 114, 105, 98, 9, 80, 114, 101, 80, 114, 111, 99, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 67, 108, 101, 97, 114, 9, 118, 105, 109, 72, 105, 103, 104, 108, 105, 103, 104, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 67, 116, 101, 114, 109, 70, 103, 66, 103, 9, 118, 105, 109, 72, 105, 84, 101, 114, 109, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 67, 84, 101, 114, 109, 9, 118, 105, 109, 72, 105, 84, 101, 114, 109, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 103, 104, 108, 105, 103, 104, 116, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 71, 114, 111, 117, 112, 9, 118, 105, 109, 71, 114, 111, 117, 112, 78, 97, 109, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 71, 117, 105, 70, 103, 66, 103, 9, 118, 105, 109, 72, 105, 84, 101, 114, 109, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 71, 117, 105, 70, 111, 110, 116, 9, 118, 105, 109, 72, 105, 84, 101, 114, 109, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 71, 117, 105, 82, 103, 98, 9, 118, 105, 109, 78, 117, 109, 98, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 71, 117, 105, 9, 118, 105, 109, 72, 105, 84, 101, 114, 109, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 78, 109, 98, 114, 9, 78, 117, 109, 98, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 83, 116, 97, 114, 116, 83, 116, 111, 112, 9, 118, 105, 109, 72, 105, 84, 101, 114, 109, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 105, 84, 101, 114, 109, 9, 84, 121, 112, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 76, 71, 114, 111, 117, 112, 9, 118, 105, 109, 71, 114, 111, 117, 112, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 72, 76, 77, 111, 100, 9, 80, 114, 101, 80, 114, 111, 99, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 73, 110, 115, 101, 114, 116, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 75, 101, 121, 67, 111, 100, 101, 9, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 75, 101, 121, 119, 111, 114, 100, 9, 83, 116, 97, 116, 101, 109, 101, 110, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 76, 101, 116, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 76, 105, 110, 101, 67, 111, 109, 109, 101, 110, 116, 9, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 77, 97, 112, 66, 97, 110, 103, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 77, 97, 112, 77, 111, 100, 75, 101, 121, 9, 118, 105, 109, 70, 117, 110, 99, 83, 73, 68, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 77, 97, 112, 77, 111, 100, 9, 118, 105, 109, 66, 114, 97, 99, 107, 101, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 77, 97, 112, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 77, 97, 114, 107, 9, 78, 117, 109, 98, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 77, 97, 114, 107, 78, 117, 109, 98, 101, 114, 9, 118, 105, 109, 78, 117, 109, 98, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 77, 101, 110, 117, 77, 111, 100, 9, 118, 105, 109, 77, 97, 112, 77, 111, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 77, 101, 110, 117, 78, 97, 109, 101, 77, 111, 114, 101, 9, 118, 105, 109, 77, 101, 110, 117, 78, 97, 109, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 77, 101, 110, 117, 78, 97, 109, 101, 9, 80, 114, 101, 80, 114, 111, 99, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 77, 116, 99, 104, 67, 111, 109, 109, 101, 110, 116, 9, 118, 105, 109, 67, 111, 109, 109, 101, 110, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107]);
        fileData6.push.apply(fileData6, [32, 118, 105, 109, 78, 111, 114, 109, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 78, 111, 116, 97, 116, 105, 111, 110, 9, 83, 112, 101, 99, 105, 97, 108, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 78, 111, 116, 70, 117, 110, 99, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 78, 111, 116, 80, 97, 116, 83, 101, 112, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 78, 117, 109, 98, 101, 114, 9, 78, 117, 109, 98, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 79, 112, 101, 114, 69, 114, 114, 111, 114, 9, 69, 114, 114, 111, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 79, 112, 101, 114, 9, 79, 112, 101, 114, 97, 116, 111, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 79, 112, 116, 105, 111, 110, 9, 80, 114, 101, 80, 114, 111, 99, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 80, 97, 114, 101, 110, 83, 101, 112, 9, 68, 101, 108, 105, 109, 105, 116, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 80, 97, 116, 83, 101, 112, 69, 114, 114, 9, 118, 105, 109, 80, 97, 116, 83, 101, 112, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 80, 97, 116, 83, 101, 112, 82, 9, 118, 105, 109, 80, 97, 116, 83, 101, 112, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 80, 97, 116, 83, 101, 112, 9, 83, 112, 101, 99, 105, 97, 108, 67, 104, 97, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 80, 97, 116, 83, 101, 112, 90, 111, 110, 101, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 80, 97, 116, 83, 101, 112, 90, 9, 118, 105, 109, 80, 97, 116, 83, 101, 112, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 80, 97, 116, 116, 101, 114, 110, 9, 84, 121, 112, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 80, 108, 97, 105, 110, 77, 97, 114, 107, 9, 118, 105, 109, 77, 97, 114, 107, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 80, 108, 97, 105, 110, 82, 101, 103, 105, 115, 116, 101, 114, 9, 118, 105, 109, 82, 101, 103, 105, 115, 116, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 82, 101, 103, 105, 115, 116, 101, 114, 9, 83, 112, 101, 99, 105, 97, 108, 67, 104, 97, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 99, 114, 105, 112, 116, 68, 101, 108, 105, 109, 9, 67, 111, 109, 109, 101, 110, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 101, 97, 114, 99, 104, 68, 101, 108, 105, 109, 9, 83, 116, 97, 116, 101, 109, 101, 110, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 101, 97, 114, 99, 104, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 101, 112, 9, 68, 101, 108, 105, 109, 105, 116, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 101, 116, 77, 111, 100, 9, 118, 105, 109, 79, 112, 116, 105, 111, 110, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 101, 116, 83, 101, 112, 9, 83, 116, 97, 116, 101, 109, 101, 110, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 101, 116, 83, 116, 114, 105, 110, 103, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 9, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 77, 111, 100, 9, 118, 105, 109, 83, 112, 101, 99, 70, 105, 108, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 112, 101, 99, 105, 97, 108, 9, 84, 121, 112, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 116, 97, 116, 101, 109, 101, 110, 116, 9, 83, 116, 97, 116, 101, 109, 101, 110, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 116, 114, 105, 110, 103, 67, 111, 110, 116, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 116, 114, 105, 110, 103, 9, 83, 116, 114, 105, 110, 103, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 117, 98, 115, 116, 49, 9, 118, 105, 109, 83, 117, 98, 115, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 117, 98, 115, 116, 68, 101, 108, 105, 109, 9, 68, 101, 108, 105, 109, 105, 116, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 117, 98, 115, 116, 70, 108, 97, 103, 115, 9, 83, 112, 101, 99, 105, 97, 108, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 117, 98, 115, 116, 83, 117, 98, 115, 116, 114, 9, 83, 112, 101, 99, 105, 97, 108, 67, 104, 97, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 117, 98, 115, 116, 84, 119, 111, 66, 83, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 117, 98, 115, 116, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 67, 97, 115, 101, 69, 114, 114, 111, 114, 9, 69, 114, 114, 111, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 67, 97, 115, 101, 9, 84, 121, 112, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 99, 67, 9, 84, 121, 112, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 99, 69, 114, 114, 111, 114, 9, 69, 114, 114, 111, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 99, 71, 114, 111, 117, 112, 78, 97, 109, 101, 9, 118, 105, 109, 71, 114, 111, 117, 112, 78, 97, 109, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 99, 71, 114, 111, 117, 112, 9, 118, 105, 109, 71, 114, 111, 117, 112, 78, 97, 109, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 99, 75, 101, 121, 9, 84, 121, 112, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 99, 78, 111, 110, 101, 9, 84, 121, 112, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 67, 111, 110, 116, 97, 105, 110, 115, 9, 118, 105, 109, 83, 121, 110, 79, 112, 116, 105, 111, 110, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 69, 114, 114, 111, 114, 9, 69, 114, 114, 111, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 75, 101, 121, 67, 111, 110, 116, 97, 105, 110, 101, 100, 105, 110, 9, 118, 105, 109, 83, 121, 110, 67, 111, 110, 116, 97, 105, 110, 115, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 75, 101, 121, 79, 112, 116, 9, 118, 105, 109, 83, 121, 110, 79, 112, 116, 105, 111, 110, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 77, 116, 99, 104, 71, 114, 112, 9, 118, 105, 109, 83, 121, 110, 79, 112, 116, 105, 111, 110, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 77, 116, 99, 104, 79, 112, 116, 9, 118, 105, 109, 83, 121, 110, 79, 112, 116, 105, 111, 110, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 78, 101, 120, 116, 103, 114, 111, 117, 112, 9, 118, 105, 109, 83, 121, 110, 79, 112, 116, 105, 111, 110, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 78, 111, 116, 80, 97, 116, 82, 97, 110, 103, 101, 9, 118, 105, 109, 83, 121, 110, 82, 101, 103, 80, 97, 116, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 79, 112, 116, 105, 111, 110, 9, 83, 112, 101, 99, 105, 97, 108, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 80, 97, 116, 82, 97, 110, 103, 101, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 82, 101, 103, 79, 112, 116, 9, 118, 105, 109, 83, 121, 110, 79, 112, 116, 105, 111, 110, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 82, 101, 103, 80, 97, 116, 9, 118, 105, 109, 83, 116, 114, 105, 110, 103, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 82, 101, 103, 9, 84, 121, 112, 101, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 116, 97, 120, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 83, 121, 110, 84, 121, 112, 101, 9, 118, 105, 109, 83, 112, 101, 99, 105, 97, 108, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 84, 111, 100, 111, 9, 84, 111, 100, 111, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 85, 110, 109, 97, 112, 9, 118, 105, 109, 77, 97, 112, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 67, 109, 112, 108, 116, 70, 117, 110, 99, 9, 83, 112, 101, 99, 105, 97, 108, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 67, 109, 112, 108, 116, 9, 118, 105, 109, 83, 112, 101, 99, 105, 97, 108, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 75, 101, 121, 9, 118, 105, 109, 79, 112, 116, 105, 111, 110, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 85, 115, 101, 114, 65, 116, 116, 114, 98, 9, 118, 105, 109, 83, 112, 101, 99, 105, 97, 108, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 85, 115, 101, 114, 67, 109, 100, 69, 114, 114, 111, 114, 9, 69, 114, 114, 111, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 85, 115, 101, 114, 67, 111, 109, 109, 97, 110, 100, 9, 118, 105, 109, 67, 111, 109, 109, 97, 110, 100, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 85, 115, 101, 114, 70, 117, 110, 99, 9, 78, 111, 114, 109, 97, 108, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 86, 97, 114, 9, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 10, 104, 105, 32, 100, 101, 102, 32, 108, 105, 110, 107, 32, 118, 105, 109, 87, 97, 114, 110, 9, 87, 97, 114, 110, 105, 110, 103, 77, 115, 103, 10, 10, 34, 32, 67, 117, 114, 114, 101, 110, 116, 32, 83, 121, 110, 116, 97, 120, 32, 86, 97, 114, 105, 97, 98, 108, 101, 58, 32, 123, 123, 123, 50, 10, 108, 101, 116, 32, 98, 58, 99, 117, 114, 114, 101, 110, 116, 95, 115, 121, 110, 116, 97, 120, 32, 61, 32, 34, 118, 105, 109, 34, 10, 10, 34, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 34, 32, 67, 108, 101, 97, 110, 117, 112, 58, 32, 123, 123, 123, 49, 10, 108, 101, 116, 32, 38, 99, 112, 111, 32, 61, 32, 115, 58, 107, 101, 101, 112, 99, 112, 111, 10, 117, 110, 108, 101, 116, 32, 115, 58, 107, 101, 101, 112, 99, 112, 111, 10, 34, 32, 118, 105, 109, 58, 116, 115, 61, 49, 56, 32, 32, 102, 100, 109, 61, 109, 97, 114, 107, 101, 114, 10]);
        VimModule["FS_createDataFile"]("/usr/local/share/vim/syntax", "vim.vim", fileData6, true, true);
        fileData7 = [];
        fileData7.push.apply(fileData7, [34, 32, 86, 105, 109, 32, 99, 111, 108, 111, 114, 32, 102, 105, 108, 101, 10, 34, 32, 67, 111, 110, 118, 101, 114, 116, 101, 100, 32, 102, 114, 111, 109, 32, 84, 101, 120, 116, 109, 97, 116, 101, 32, 116, 104, 101, 109, 101, 32, 68, 97, 114, 107, 115, 105, 100, 101, 32, 117, 115, 105, 110, 103, 32, 67, 111, 108, 111, 114, 97, 116, 105, 111, 110, 32, 118, 48, 46, 51, 46, 50, 32, 40, 104, 116, 116, 112, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 115, 105, 99, 107, 105, 108, 108, 47, 99, 111, 108, 111, 114, 97, 116, 105, 111, 110, 41, 10, 10, 115, 101, 116, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 61, 100, 97, 114, 107, 10, 104, 105, 103, 104, 108, 105, 103, 104, 116, 32, 99, 108, 101, 97, 114, 10, 10, 105, 102, 32, 101, 120, 105, 115, 116, 115, 40, 34, 115, 121, 110, 116, 97, 120, 95, 111, 110, 34, 41, 10, 32, 32, 115, 121, 110, 116, 97, 120, 32, 114, 101, 115, 101, 116, 10, 101, 110, 100, 105, 102, 10, 10, 108, 101, 116, 32, 103, 58, 99, 111, 108, 111, 114, 115, 95, 110, 97, 109, 101, 32, 61, 32, 34, 68, 97, 114, 107, 115, 105, 100, 101, 34, 10, 10, 104, 105, 32, 67, 117, 114, 115, 111, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 50, 51, 49, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 35, 102, 56, 102, 56, 102, 48, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 86, 105, 115, 117, 97, 108, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 49, 54, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 35, 49, 54, 49, 97, 49, 102, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 67, 117, 114, 115, 111, 114, 76, 105, 110, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 50, 51, 54, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 35, 51, 49, 51, 50, 51, 51, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 67, 117, 114, 115, 111, 114, 67, 111, 108, 117, 109, 110, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 50, 51, 54, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 35, 51, 49, 51, 50, 51, 51, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 67, 111, 108, 111, 114, 67, 111, 108, 117, 109, 110, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 50, 51, 54, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 35, 51, 49, 51, 50, 51, 51, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 76, 105, 110, 101, 78, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 52, 50, 32, 99, 116, 101, 114, 109, 98, 103, 61, 50, 51, 54, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 54, 101, 54, 102, 54, 102, 32, 103, 117, 105, 98, 103, 61, 35, 51, 49, 51, 50, 51, 51, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 86, 101, 114, 116, 83, 112, 108, 105, 116, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 51, 57, 32, 99, 116, 101, 114, 109, 98, 103, 61, 50, 51, 57, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 52, 101, 52, 102, 53, 48, 32, 103, 117, 105, 98, 103, 61, 35, 52, 101, 52, 102, 53, 48, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 77, 97, 116, 99, 104, 80, 97, 114, 101, 110, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 48, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 48, 56, 100, 50, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 83, 116, 97, 116, 117, 115, 76, 105, 110, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 53, 48, 32, 99, 116, 101, 114, 109, 98, 103, 61, 50, 51, 57, 32, 99, 116, 101, 114, 109, 61, 98, 111, 108, 100, 32, 103, 117, 105, 102, 103, 61, 35, 98, 97, 98, 97, 98, 97, 32, 103, 117, 105, 98, 103, 61, 35, 52, 101, 52, 102, 53, 48, 32, 103, 117, 105, 61, 98, 111, 108, 100, 10, 104, 105, 32, 83, 116, 97, 116, 117, 115, 76, 105, 110, 101, 78, 67, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 53, 48, 32, 99, 116, 101, 114, 109, 98, 103, 61, 50, 51, 57, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 98, 97, 98, 97, 98, 97, 32, 103, 117, 105, 98, 103, 61, 35, 52, 101, 52, 102, 53, 48, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 80, 109, 101, 110, 117, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 80, 109, 101, 110, 117, 83, 101, 108, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 49, 54, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 35, 49, 54, 49, 97, 49, 102, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 73, 110, 99, 83, 101, 97, 114, 99, 104, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 53, 56, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 35, 54, 54, 52, 54, 50, 52, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 83, 101, 97, 114, 99, 104, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 53, 56, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 35, 54, 54, 52, 54, 50, 52, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 70, 111, 108, 100, 101, 100, 32, 99, 116, 101, 114, 109, 102, 103, 61, 53, 57, 32, 99, 116, 101, 114, 109, 98, 103, 61, 50, 51, 53, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 52, 57, 52, 98, 52, 100, 32, 103, 117, 105, 98, 103, 61, 35, 50, 50, 50, 51, 50, 52, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 10, 104, 105, 32, 78, 111, 114, 109, 97, 108, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 53, 48, 32, 99, 116, 101, 114, 109, 98, 103, 61, 50, 51, 53, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 98, 97, 98, 97, 98, 97, 32, 103, 117, 105, 98, 103, 61, 35, 50, 50, 50, 51, 50, 52, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 66, 111, 111, 108, 101, 97, 110, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 67, 104, 97, 114, 97, 99, 116, 101, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 67, 111, 109, 109, 101, 110, 116, 32, 99, 116, 101, 114, 109, 102, 103, 61, 53, 57, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 52, 57, 52, 98, 52, 100, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 67, 111, 110, 100, 105, 116, 105, 111, 110, 97, 108, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 48, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 48, 56, 100, 50, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 67, 111, 110, 115, 116, 97, 110, 116, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 68, 101, 102, 105, 110, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 48, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 48, 56, 100, 50, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 69, 114, 114, 111, 114, 77, 115, 103, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 51, 49, 32, 99, 116, 101, 114, 109, 98, 103, 61, 51, 56, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 56, 102, 56, 102, 48, 32, 103, 117, 105, 98, 103, 61, 35, 48, 48, 97, 56, 99, 54, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 87, 97, 114, 110, 105, 110, 103, 77, 115, 103, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 51, 49, 32, 99, 116, 101, 114, 109, 98, 103, 61, 51, 56, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 56, 102, 56, 102, 48, 32, 103, 117, 105, 98, 103, 61, 35, 48, 48, 97, 56, 99, 54, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 70, 108, 111, 97, 116, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 70, 117, 110, 99, 116, 105, 111, 110, 32, 99, 116, 101, 114, 109, 102, 103, 61, 55, 49, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 54, 56, 99, 50, 52, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 51, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 49, 99, 99, 51, 101, 56, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 105, 116, 97, 108, 105, 99, 10, 104, 105, 32, 75, 101, 121, 119, 111, 114, 100, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 48, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 48, 56, 100, 50, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 76, 97, 98, 101, 108, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 50, 48, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 50, 100, 52, 50, 99, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 78, 111, 110, 84, 101, 120, 116, 32, 99, 116, 101, 114, 109, 102, 103, 61, 53, 57, 32, 99, 116, 101, 114, 109, 98, 103, 61, 50, 51, 53, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 51, 98, 51, 97, 51, 50, 32, 103, 117, 105, 98, 103, 61, 35, 50, 97, 50, 98, 50, 99, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 78, 117, 109, 98, 101, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 79, 112, 101, 114, 97, 116, 111, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 48, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 48, 56, 100, 50, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 80, 114, 101, 80, 114, 111, 99, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 48, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 48, 56, 100, 50, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 83, 112, 101, 99, 105, 97, 108, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 53, 48, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 98, 97, 98, 97, 98, 97, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 83, 112, 101, 99, 105, 97, 108, 75, 101, 121, 32, 99, 116, 101, 114, 109, 102, 103, 61, 53, 57, 32, 99, 116, 101, 114, 109, 98, 103, 61, 50, 51, 54, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 51, 98, 51, 97, 51, 50, 32, 103, 117, 105, 98, 103, 61, 35, 51, 49, 51, 50, 51, 51, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 83, 116, 97, 116, 101, 109, 101, 110, 116, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 48, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 48, 56, 100, 50, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 83, 116, 111, 114, 97, 103, 101, 67, 108, 97, 115, 115, 32, 99, 116, 101, 114, 109, 102, 103, 61, 51, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 49, 99, 99, 51, 101, 56, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 105, 116, 97, 108, 105, 99, 10, 104, 105, 32, 83, 116, 114, 105, 110, 103, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 50, 48, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 50, 100, 52, 50, 99, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 84, 97, 103, 32, 99, 116, 101, 114, 109, 102, 103, 61, 49, 54, 54, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 101, 56, 51, 52, 49, 99, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 84, 105, 116, 108, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 53, 48, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 98, 111, 108, 100, 32, 103, 117, 105, 102, 103, 61, 35, 98, 97, 98, 97, 98, 97, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 98, 111, 108, 100, 10, 104, 105, 32, 84, 111, 100, 111, 32, 99, 116, 101, 114, 109, 102, 103, 61, 53, 57, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 105, 110, 118, 101, 114, 115, 101, 44, 98, 111, 108, 100, 32, 103, 117, 105, 102, 103, 61, 35, 52, 57, 52, 98, 52, 100, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 105, 110, 118, 101, 114, 115, 101, 44, 98, 111, 108, 100, 10, 104, 105, 32, 84, 121, 112, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 85, 110, 100, 101, 114, 108, 105, 110, 101, 100, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 117, 110, 100, 101, 114, 108, 105, 110, 101, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 117, 110, 100, 101, 114, 108, 105, 110, 101, 10, 104, 105, 32, 114, 117, 98, 121, 67, 108, 97, 115, 115, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 48, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 48, 56, 100, 50, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 70, 117, 110, 99, 116, 105, 111, 110, 32, 99, 116, 101, 114, 109, 102, 103, 61, 55, 49, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 54, 56, 99, 50, 52, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 73, 110, 116, 101, 114, 112, 111, 108, 97, 116, 105, 111, 110, 68, 101, 108, 105, 109, 105, 116, 101, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 83, 121, 109, 98, 111, 108, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 67, 111, 110, 115, 116, 97, 110, 116, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 105, 116, 97, 108, 105, 99, 10, 104, 105, 32, 114, 117, 98, 121, 83, 116, 114, 105, 110, 103, 68, 101, 108, 105, 109, 105, 116, 101, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 50, 48, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 50, 100, 52, 50, 99, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 66, 108, 111, 99, 107, 80, 97, 114, 97, 109, 101, 116, 101, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 105, 116, 97, 108, 105, 99, 10, 104, 105, 32, 114, 117, 98, 121, 73, 110, 115, 116, 97, 110, 99, 101, 86, 97, 114, 105, 97, 98, 108, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 73, 110, 99, 108, 117, 100, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 48, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 48, 56, 100, 50, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 71, 108, 111, 98, 97, 108, 86, 97, 114, 105, 97, 98, 108, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 82, 101, 103, 101, 120, 112, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 50, 48, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 50, 100, 52, 50, 99, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 82, 101, 103, 101, 120, 112, 68, 101, 108, 105, 109, 105, 116, 101, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 50, 48, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 50, 100, 52, 50, 99, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 69, 115, 99, 97, 112, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 67, 111, 110, 116, 114, 111, 108, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 48, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 48, 56, 100, 50, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 67, 108, 97, 115, 115, 86, 97, 114, 105, 97, 98, 108, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 79, 112, 101, 114, 97, 116, 111, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 48, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 48, 56, 100, 50, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 48, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 48, 56, 100, 50, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 80, 115, 101, 117, 100, 111, 86, 97, 114, 105, 97, 98, 108, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 82, 97, 105, 108, 115, 85, 115, 101, 114, 67, 108, 97, 115, 115, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 105, 116, 97, 108, 105, 99, 10, 104, 105, 32, 114, 117, 98, 121, 82, 97, 105, 108, 115, 65, 82, 65, 115, 115, 111, 99, 105, 97, 116, 105, 111, 110, 77, 101, 116, 104, 111, 100, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 82, 97, 105, 108, 115, 65, 82, 77, 101, 116, 104, 111, 100, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 82, 97, 105, 108, 115, 82, 101, 110, 100, 101, 114, 77, 101, 116, 104, 111, 100, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 114, 117, 98, 121, 82, 97, 105, 108, 115, 77, 101, 116, 104, 111, 100, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 101, 114, 117, 98, 121, 68, 101, 108, 105, 109, 105, 116, 101, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 101, 114, 117, 98, 121, 67, 111, 109, 109, 101, 110, 116, 32, 99, 116, 101, 114, 109, 102, 103, 61, 53, 57, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 52, 57, 52, 98, 52, 100, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 101, 114, 117, 98, 121, 82, 97, 105, 108, 115, 77, 101, 116, 104, 111, 100, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 104, 116, 109, 108, 84, 97, 103, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 104, 116, 109, 108, 69, 110, 100, 84, 97, 103, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 104, 116, 109, 108, 84, 97, 103, 78, 97, 109, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 104, 116, 109, 108, 65, 114, 103, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 104, 116, 109, 108, 83, 112, 101, 99, 105, 97, 108, 67, 104, 97, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 70, 117, 110, 99, 116, 105, 111, 110, 32, 99, 116, 101, 114, 109, 102, 103, 61, 51, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 49, 99, 99, 51, 101, 56, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 105, 116, 97, 108, 105, 99, 10, 104, 105, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 82, 97, 105, 108, 115, 70, 117, 110, 99, 116, 105, 111, 110, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 106, 97, 118, 97, 83, 99, 114, 105, 112, 116, 66, 114, 97, 99, 101, 115, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 121, 97, 109, 108, 75, 101, 121, 32, 99, 116, 101, 114, 109, 102, 103, 61, 49, 54, 54, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 101, 56, 51, 52, 49, 99, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 121, 97, 109, 108, 65, 110, 99, 104, 111, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 121, 97, 109, 108, 65, 108, 105, 97, 115, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 121, 97, 109, 108, 68, 111, 99, 117, 109, 101, 110, 116, 72, 101, 97, 100, 101, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 50, 50, 48, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 102, 50, 100, 52, 50, 99, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 99, 115, 115, 85, 82, 76, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 105, 116, 97, 108, 105, 99, 10, 104, 105, 32, 99, 115, 115, 70, 117, 110, 99, 116, 105, 111, 110, 78, 97, 109, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 99, 115, 115, 67, 111, 108, 111, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 99, 115, 115, 80, 115, 101, 117, 100, 111, 67, 108, 97, 115, 115, 73, 100, 32, 99, 116, 101, 114, 109, 102, 103, 61, 55, 49, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 54, 56, 99, 50, 52, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 99, 115, 115, 67, 108, 97, 115, 115, 78, 97, 109, 101, 32, 99, 116, 101, 114, 109, 102, 103, 61, 55, 49, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 54, 56, 99, 50, 52, 52, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 99, 115, 115, 86, 97, 108, 117, 101, 76, 101, 110, 103, 116, 104, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 99, 115, 115, 67, 111, 109, 109, 111, 110, 65, 116, 116, 114, 32, 99, 116, 101, 114, 109, 102, 103, 61, 57, 56, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 35, 56, 101, 54, 57, 99, 57, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69, 10, 104, 105, 32, 99, 115, 115, 66, 114, 97, 99, 101, 115, 32, 99, 116, 101, 114, 109, 102, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 98, 103, 61, 78, 79, 78, 69, 32, 99, 116, 101, 114, 109, 61, 78, 79, 78, 69, 32, 103, 117, 105, 102, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 98, 103, 61, 78, 79, 78, 69, 32, 103, 117, 105, 61, 78, 79, 78, 69]);
        VimModule["FS_createDataFile"]("/usr/local/share/vim/colors", "Darkside.vim", fileData7, true, true);
    }
    if (VimModule["calledRun"]) {
      runWithFS();
    } else {
        if (!VimModule["preRun"]) VimModule["preRun"] = [];
        VimModule["preRun"].push(runWithFS);
    }
}))();
var VimModule;
if (!VimModule) VimModule = (typeof VimModule !== "undefined" ? VimModule : null) || {};
VimModule["globalEventListeners"] = [];
var moduleOverrides = {};
for (var key in VimModule) {
    if (VimModule.hasOwnProperty(key)) {
        moduleOverrides[key] = VimModule[key]
    }
}
var ENVIRONMENT_IS_WEB = typeof window === "object";
var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    VimModule["read"] = function read(url) {
        var xhr = new XMLHttpRequest;
        xhr.open("GET", url, false);
        xhr.send(null);
        return xhr.responseText
    };
    if (typeof arguments != "undefined") {
        VimModule["arguments"] = arguments
    }
    if (typeof console !== "undefined") {
        if (!VimModule["print"]) VimModule["print"] = function print(x) {
            console.log(x)
        };
        if (!VimModule["printErr"]) VimModule["printErr"] = function printErr(x) {
            console.log(x)
        }
    } else {
        var TRY_USE_DUMP = false;
        if (!VimModule["print"]) VimModule["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? (function(x) {
            dump(x)
        }) : (function(x) {})
    }
    if (ENVIRONMENT_IS_WORKER) {
        VimModule["load"] = importScripts
    }
    if (typeof VimModule["setWindowTitle"] === "undefined") {
        VimModule["setWindowTitle"] = (function(title) {
            document.title = title
        })
    }
} else {
    throw "Unknown runtime environment. Where are we?"
}

function globalEval(x) {
    eval.call(null, x)
}
if (!VimModule["load"] && VimModule["read"]) {
    VimModule["load"] = function load(f) {
        globalEval(VimModule["read"](f))
    }
}
if (!VimModule["print"]) {
    VimModule["print"] = (function() {})
}
if (!VimModule["printErr"]) {
    VimModule["printErr"] = VimModule["print"]
}
if (!VimModule["arguments"]) {
    VimModule["arguments"] = []
}
if (!VimModule["thisProgram"]) {
    VimModule["thisProgram"] = "./this.program"
}
VimModule.print = VimModule["print"];
VimModule.printErr = VimModule["printErr"];
VimModule["preRun"] = [];
VimModule["postRun"] = [];
for (var key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
        VimModule[key] = moduleOverrides[key]
    }
}
var Runtime = {
    setTempRet0: (function(value) {
        tempRet0 = value
    }),
    getTempRet0: (function() {
        return tempRet0
    }),
    stackSave: (function() {
        return STACKTOP
    }),
    stackRestore: (function(stackTop) {
        STACKTOP = stackTop
    }),
    getNativeTypeSize: (function(type) {
        switch (type) {
            case "i1":
            case "i8":
                return 1;
            case "i16":
                return 2;
            case "i32":
                return 4;
            case "i64":
                return 8;
            case "float":
                return 4;
            case "double":
                return 8;
            default: {
                if (type[type.length - 1] === "*") {
                    return Runtime.QUANTUM_SIZE
                } else if (type[0] === "i") {
                    var bits = parseInt(type.substr(1));
                    assert(bits % 8 === 0, "bits % 8 === 0");
                    return bits / 8
                } else {
                    return 0
                }
            }
        }
    }),
    getNativeFieldSize: (function(type) {
        return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE)
    }),
    STACK_ALIGN: 16,
    getAlignSize: (function(type, size, vararg) {
        if (!vararg && (type == "i64" || type == "double")) return 8;
        if (!type) return Math.min(size, 8);
        return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE)
    }),
    dynCall: (function(sig, ptr, args) {
        if (args && args.length) {
            if (!args.splice) args = Array.prototype.slice.call(args);
            args.splice(0, 0, ptr);
            return VimModule["dynCall_" + sig].apply(null, args)
        } else {
            return VimModule["dynCall_" + sig].call(null, ptr)
        }
    }),
    functionPointers: [],
    addFunction: (function(func) {
        for (var i = 0; i < Runtime.functionPointers.length; i++) {
            if (!Runtime.functionPointers[i]) {
                Runtime.functionPointers[i] = func;
                return 2 * (1 + i)
            }
        }
        throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."
    }),
    removeFunction: (function(index) {
        Runtime.functionPointers[(index - 2) / 2] = null
    }),
    getAsmConst: (function(code, numArgs) {
        if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
        var func = Runtime.asmConstCache[code];
        if (func) return func;
        var args = [];
        for (var i = 0; i < numArgs; i++) {
            args.push(String.fromCharCode(36) + i)
        }
        var source = Pointer_stringify(code);
        if (source[0] === '"') {
            if (source.indexOf('"', 1) === source.length - 1) {
                source = source.substr(1, source.length - 2)
            } else {
                abort("invalid EM_ASM input |" + source + "|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)")
            }
        }
        try {
            var evalled = eval("(function(VimModule, FS) { return function(" + args.join(",") + "){ " + source + " } })")(VimModule, typeof FS !== "undefined" ? FS : null)
        } catch (e) {
            VimModule.printErr("error in executing inline EM_ASM code: " + e + " on: \n\n" + source + "\n\nwith args |" + args + "| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)");
            throw e
        }
        return Runtime.asmConstCache[code] = evalled
    }),
    warnOnce: (function(text) {
        if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
        if (!Runtime.warnOnce.shown[text]) {
            Runtime.warnOnce.shown[text] = 1;
            VimModule.printErr(text)
        }
    }),
    funcWrappers: {},
    getFuncWrapper: (function(func, sig) {
        assert(sig, "sig");
        if (!Runtime.funcWrappers[sig]) {
            Runtime.funcWrappers[sig] = {}
        }
        var sigCache = Runtime.funcWrappers[sig];
        if (!sigCache[func]) {
            sigCache[func] = function dynCall_wrapper() {
                return Runtime.dynCall(sig, func, arguments)
            }
        }
        return sigCache[func]
    }),
    getCompilerSetting: (function(name) {
        throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"
    }),
    stackAlloc: (function(size) {
        var ret = STACKTOP;
        STACKTOP = STACKTOP + size | 0;
        STACKTOP = STACKTOP + 15 & -16;
        return ret
    }),
    staticAlloc: (function(size) {
        var ret = STATICTOP;
        STATICTOP = STATICTOP + size | 0;
        STATICTOP = STATICTOP + 15 & -16;
        return ret
    }),
    dynamicAlloc: (function(size) {
        var ret = DYNAMICTOP;
        DYNAMICTOP = DYNAMICTOP + size | 0;
        DYNAMICTOP = DYNAMICTOP + 15 & -16;
        if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();
        return ret
    }),
    alignMemory: (function(size, quantum) {
        var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
        return ret
    }),
    makeBigInt: (function(low, high, unsigned) {
        var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296;
        return ret
    }),
    GLOBAL_BASE: 2048,
    QUANTUM_SIZE: 4,
    __dummy__: 0
};
VimModule["Runtime"] = Runtime;
var __THREW__ = 0;
var ABORT = false;
var EXITSTATUS = 0;
var undef = 0;
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
    if (!condition) {
        abort("Assertion failed: " + text, condition)
    }
}
var globalScope = this;

function getCFunc(ident) {
    var func = VimModule["_" + ident];
    if (!func) {
        try {
            func = eval("_" + ident)
        } catch (e) {}
    }
    assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
    return func
}
var cwrap, ccall;
((function() {
    var JSfuncs = {
        "stackSave": (function() {
            Runtime.stackSave()
        }),
        "stackRestore": (function() {
            Runtime.stackRestore()
        }),
        "arrayToC": (function(arr) {
            var ret = Runtime.stackAlloc(arr.length);
            writeArrayToMemory(arr, ret);
            return ret
        }),
        "stringToC": (function(str) {
            var ret = 0;
            if (str !== null && str !== undefined && str !== 0) {
                ret = Runtime.stackAlloc((str.length << 2) + 1);
                writeStringToMemory(str, ret)
            }
            return ret
        })
    };
    var toC = {
        "string": JSfuncs["stringToC"],
        "array": JSfuncs["arrayToC"]
    };
    ccall = function ccallFunc(ident, returnType, argTypes, args) {
        var func = getCFunc(ident);
        var cArgs = [];
        var stack = 0;
        if (args) {
            for (var i = 0; i < args.length; i++) {
                var converter = toC[argTypes[i]];
                if (converter) {
                    if (stack === 0) stack = Runtime.stackSave();
                    cArgs[i] = converter(args[i])
                } else {
                    cArgs[i] = args[i]
                }
            }
        }
        var ret = func.apply(null, cArgs);
        if (returnType === "string") ret = Pointer_stringify(ret);
        if (stack !== 0) Runtime.stackRestore(stack);
        return ret
    };
    var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;

    function parseJSFunc(jsfunc) {
        var parsed = jsfunc.toString().match(sourceRegex).slice(1);
        return {
            arguments: parsed[0],
            body: parsed[1],
            returnValue: parsed[2]
        }
    }
    var JSsource = {};
    for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
            JSsource[fun] = parseJSFunc(JSfuncs[fun])
        }
    }
    cwrap = function cwrap(ident, returnType, argTypes) {
        argTypes = argTypes || [];
        var cfunc = getCFunc(ident);
        var numericArgs = argTypes.every((function(type) {
            return type === "number"
        }));
        var numericRet = returnType !== "string";
        if (numericRet && numericArgs) {
            return cfunc
        }
        var argNames = argTypes.map((function(x, i) {
            return "$" + i
        }));
        var funcstr = "(function(" + argNames.join(",") + ") {";
        var nargs = argTypes.length;
        if (!numericArgs) {
            funcstr += "var stack = " + JSsource["stackSave"].body + ";";
            for (var i = 0; i < nargs; i++) {
                var arg = argNames[i],
                    type = argTypes[i];
                if (type === "number") continue;
                var convertCode = JSsource[type + "ToC"];
                funcstr += "var " + convertCode.arguments + " = " + arg + ";";
                funcstr += convertCode.body + ";";
                funcstr += arg + "=" + convertCode.returnValue + ";"
            }
        }
        var cfuncname = parseJSFunc((function() {
            return cfunc
        })).returnValue;
        funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
        if (!numericRet) {
            var strgfy = parseJSFunc((function() {
                return Pointer_stringify
            })).returnValue;
            funcstr += "ret = " + strgfy + "(ret);"
        }
        if (!numericArgs) {
            funcstr += JSsource["stackRestore"].body.replace("()", "(stack)") + ";"
        }
        funcstr += "return ret})";
        return eval(funcstr)
    }
}))();
VimModule["cwrap"] = cwrap;
VimModule["ccall"] = ccall;

function setValue(ptr, value, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*") type = "i32";
    switch (type) {
        case "i1":
            HEAP8[ptr >> 0] = value;
            break;
        case "i8":
            HEAP8[ptr >> 0] = value;
            break;
        case "i16":
            HEAP16[ptr >> 1] = value;
            break;
        case "i32":
            HEAP32[ptr >> 2] = value;
            break;
        case "i64":
            tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
            break;
        case "float":
            HEAPF32[ptr >> 2] = value;
            break;
        case "double":
            HEAPF64[ptr >> 3] = value;
            break;
        default:
            abort("invalid type for setValue: " + type)
    }
}
VimModule["setValue"] = setValue;

function getValue(ptr, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*") type = "i32";
    switch (type) {
        case "i1":
            return HEAP8[ptr >> 0];
        case "i8":
            return HEAP8[ptr >> 0];
        case "i16":
            return HEAP16[ptr >> 1];
        case "i32":
            return HEAP32[ptr >> 2];
        case "i64":
            return HEAP32[ptr >> 2];
        case "float":
            return HEAPF32[ptr >> 2];
        case "double":
            return HEAPF64[ptr >> 3];
        default:
            abort("invalid type for setValue: " + type)
    }
    return null
}
VimModule["getValue"] = getValue;
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
var ALLOC_DYNAMIC = 3;
var ALLOC_NONE = 4;
VimModule["ALLOC_NORMAL"] = ALLOC_NORMAL;
VimModule["ALLOC_STACK"] = ALLOC_STACK;
VimModule["ALLOC_STATIC"] = ALLOC_STATIC;
VimModule["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
VimModule["ALLOC_NONE"] = ALLOC_NONE;

function allocate(slab, types, allocator, ptr) {
    var zeroinit, size;
    if (typeof slab === "number") {
        zeroinit = true;
        size = slab
    } else {
        zeroinit = false;
        size = slab.length
    }
    var singleType = typeof types === "string" ? types : null;
    var ret;
    if (allocator == ALLOC_NONE) {
        ret = ptr
    } else {
        ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length))
    }
    if (zeroinit) {
        var ptr = ret,
            stop;
        assert((ret & 3) == 0, "(ret & 3) == 0");
        stop = ret + (size & ~3);
        for (; ptr < stop; ptr += 4) {
            HEAP32[ptr >> 2] = 0
        }
        stop = ret + size;
        while (ptr < stop) {
            HEAP8[ptr++ >> 0] = 0
        }
        return ret
    }
    if (singleType === "i8") {
        if (slab.subarray || slab.slice) {
            HEAPU8.set(slab, ret)
        } else {
            HEAPU8.set(new Uint8Array(slab), ret)
        }
        return ret
    }
    var i = 0,
        type, typeSize, previousType;
    while (i < size) {
        var curr = slab[i];
        if (typeof curr === "function") {
            curr = Runtime.getFunctionIndex(curr)
        }
        type = singleType || types[i];
        if (type === 0) {
            i++;
            continue
        }
        if (type == "i64") type = "i32";
        setValue(ret + i, curr, type);
        if (previousType !== type) {
            typeSize = Runtime.getNativeTypeSize(type);
            previousType = type
        }
        i += typeSize
    }
    return ret
}
VimModule["allocate"] = allocate;

function Pointer_stringify(ptr, length) {
    if (length === 0 || !ptr) return "";
    var hasUtf = 0;
    var t;
    var i = 0;
    while (1) {
        t = HEAPU8[ptr + i >> 0];
        hasUtf |= t;
        if (t == 0 && !length) break;
        i++;
        if (length && i == length) break
    }
    if (!length) length = i;
    var ret = "";
    if (hasUtf < 128) {
        var MAX_CHUNK = 1024;
        var curr;
        while (length > 0) {
            curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
            ret = ret ? ret + curr : curr;
            ptr += MAX_CHUNK;
            length -= MAX_CHUNK
        }
        return ret
    }
    return VimModule["UTF8ToString"](ptr)
}
VimModule["Pointer_stringify"] = Pointer_stringify;

function AsciiToString(ptr) {
    var str = "";
    while (1) {
        var ch = HEAP8[ptr++ >> 0];
        if (!ch) return str;
        str += String.fromCharCode(ch)
    }
}
VimModule["AsciiToString"] = AsciiToString;

function stringToAscii(str, outPtr) {
    return writeAsciiToMemory(str, outPtr, false)
}
VimModule["stringToAscii"] = stringToAscii;

function UTF8ArrayToString(u8Array, idx) {
    var u0, u1, u2, u3, u4, u5;
    var str = "";
    while (1) {
        u0 = u8Array[idx++];
        if (!u0) return str;
        if (!(u0 & 128)) {
            str += String.fromCharCode(u0);
            continue
        }
        u1 = u8Array[idx++] & 63;
        if ((u0 & 224) == 192) {
            str += String.fromCharCode((u0 & 31) << 6 | u1);
            continue
        }
        u2 = u8Array[idx++] & 63;
        if ((u0 & 240) == 224) {
            u0 = (u0 & 15) << 12 | u1 << 6 | u2
        } else {
            u3 = u8Array[idx++] & 63;
            if ((u0 & 248) == 240) {
                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3
            } else {
                u4 = u8Array[idx++] & 63;
                if ((u0 & 252) == 248) {
                    u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4
                } else {
                    u5 = u8Array[idx++] & 63;
                    u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5
                }
            }
        }
        if (u0 < 65536) {
            str += String.fromCharCode(u0)
        } else {
            var ch = u0 - 65536;
            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)
        }
    }
}
VimModule["UTF8ArrayToString"] = UTF8ArrayToString;

function UTF8ToString(ptr) {
    return UTF8ArrayToString(HEAPU8, ptr)
}
VimModule["UTF8ToString"] = UTF8ToString;

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0)) return 0;
    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1;
    for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127) {
            if (outIdx >= endIdx) break;
            outU8Array[outIdx++] = u
        } else if (u <= 2047) {
            if (outIdx + 1 >= endIdx) break;
            outU8Array[outIdx++] = 192 | u >> 6;
            outU8Array[outIdx++] = 128 | u & 63
        } else if (u <= 65535) {
            if (outIdx + 2 >= endIdx) break;
            outU8Array[outIdx++] = 224 | u >> 12;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63
        } else if (u <= 2097151) {
            if (outIdx + 3 >= endIdx) break;
            outU8Array[outIdx++] = 240 | u >> 18;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63
        } else if (u <= 67108863) {
            if (outIdx + 4 >= endIdx) break;
            outU8Array[outIdx++] = 248 | u >> 24;
            outU8Array[outIdx++] = 128 | u >> 18 & 63;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63
        } else {
            if (outIdx + 5 >= endIdx) break;
            outU8Array[outIdx++] = 252 | u >> 30;
            outU8Array[outIdx++] = 128 | u >> 24 & 63;
            outU8Array[outIdx++] = 128 | u >> 18 & 63;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63
        }
    }
    outU8Array[outIdx] = 0;
    return outIdx - startIdx
}
VimModule["stringToUTF8Array"] = stringToUTF8Array;

function stringToUTF8(str, outPtr, maxBytesToWrite) {
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite)
}
VimModule["stringToUTF8"] = stringToUTF8;

function lengthBytesUTF8(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127) {
            ++len
        } else if (u <= 2047) {
            len += 2
        } else if (u <= 65535) {
            len += 3
        } else if (u <= 2097151) {
            len += 4
        } else if (u <= 67108863) {
            len += 5
        } else {
            len += 6
        }
    }
    return len
}
VimModule["lengthBytesUTF8"] = lengthBytesUTF8;

function UTF16ToString(ptr) {
    var i = 0;
    var str = "";
    while (1) {
        var codeUnit = HEAP16[ptr + i * 2 >> 1];
        if (codeUnit == 0) return str;
        ++i;
        str += String.fromCharCode(codeUnit)
    }
}
VimModule["UTF16ToString"] = UTF16ToString;

function stringToUTF16(str, outPtr, maxBytesToWrite) {
    if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 2147483647
    }
    if (maxBytesToWrite < 2) return 0;
    maxBytesToWrite -= 2;
    var startPtr = outPtr;
    var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
    for (var i = 0; i < numCharsToWrite; ++i) {
        var codeUnit = str.charCodeAt(i);
        HEAP16[outPtr >> 1] = codeUnit;
        outPtr += 2
    }
    HEAP16[outPtr >> 1] = 0;
    return outPtr - startPtr
}
VimModule["stringToUTF16"] = stringToUTF16;

function lengthBytesUTF16(str) {
    return str.length * 2
}
VimModule["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
    var i = 0;
    var str = "";
    while (1) {
        var utf32 = HEAP32[ptr + i * 4 >> 2];
        if (utf32 == 0) return str;
        ++i;
        if (utf32 >= 65536) {
            var ch = utf32 - 65536;
            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)
        } else {
            str += String.fromCharCode(utf32)
        }
    }
}
VimModule["UTF32ToString"] = UTF32ToString;

function stringToUTF32(str, outPtr, maxBytesToWrite) {
    if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 2147483647
    }
    if (maxBytesToWrite < 4) return 0;
    var startPtr = outPtr;
    var endPtr = startPtr + maxBytesToWrite - 4;
    for (var i = 0; i < str.length; ++i) {
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 55296 && codeUnit <= 57343) {
            var trailSurrogate = str.charCodeAt(++i);
            codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023
        }
        HEAP32[outPtr >> 2] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break
    }
    HEAP32[outPtr >> 2] = 0;
    return outPtr - startPtr
}
VimModule["stringToUTF32"] = stringToUTF32;

function lengthBytesUTF32(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 55296 && codeUnit <= 57343) ++i;
        len += 4
    }
    return len
}
VimModule["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
    var hasLibcxxabi = !!VimModule["___cxa_demangle"];
    if (hasLibcxxabi) {
        try {
            var buf = _malloc(func.length);
            writeStringToMemory(func.substr(1), buf);
            var status = _malloc(4);
            var ret = VimModule["___cxa_demangle"](buf, 0, 0, status);
            if (getValue(status, "i32") === 0 && ret) {
                return Pointer_stringify(ret)
            }
        } catch (e) {} finally {
            if (buf) _free(buf);
            if (status) _free(status);
            if (ret) _free(ret)
        }
    }
    var i = 3;
    var basicTypes = {
        "v": "void",
        "b": "bool",
        "c": "char",
        "s": "short",
        "i": "int",
        "l": "long",
        "f": "float",
        "d": "double",
        "w": "wchar_t",
        "a": "signed char",
        "h": "unsigned char",
        "t": "unsigned short",
        "j": "unsigned int",
        "m": "unsigned long",
        "x": "long long",
        "y": "unsigned long long",
        "z": "..."
    };
    var subs = [];
    var first = true;

    function dump(x) {
        if (x) VimModule.print(x);
        VimModule.print(func);
        var pre = "";
        for (var a = 0; a < i; a++) pre += " ";
        VimModule.print(pre + "^")
    }

    function parseNested() {
        i++;
        if (func[i] === "K") i++;
        var parts = [];
        while (func[i] !== "E") {
            if (func[i] === "S") {
                i++;
                var next = func.indexOf("_", i);
                var num = func.substring(i, next) || 0;
                parts.push(subs[num] || "?");
                i = next + 1;
                continue
            }
            if (func[i] === "C") {
                parts.push(parts[parts.length - 1]);
                i += 2;
                continue
            }
            var size = parseInt(func.substr(i));
            var pre = size.toString().length;
            if (!size || !pre) {
                i--;
                break
            }
            var curr = func.substr(i + pre, size);
            parts.push(curr);
            subs.push(curr);
            i += pre + size
        }
        i++;
        return parts
    }

    function parse(rawList, limit, allowVoid) {
        limit = limit || Infinity;
        var ret = "",
            list = [];

        function flushList() {
            return "(" + list.join(", ") + ")"
        }
        var name;
        if (func[i] === "N") {
            name = parseNested().join("::");
            limit--;
            if (limit === 0) return rawList ? [name] : name
        } else {
            if (func[i] === "K" || first && func[i] === "L") i++;
            var size = parseInt(func.substr(i));
            if (size) {
                var pre = size.toString().length;
                name = func.substr(i + pre, size);
                i += pre + size
            }
        }
        first = false;
        if (func[i] === "I") {
            i++;
            var iList = parse(true);
            var iRet = parse(true, 1, true);
            ret += iRet[0] + " " + name + "<" + iList.join(", ") + ">"
        } else {
            ret = name
        }
        paramLoop: while (i < func.length && limit-- > 0) {
            var c = func[i++];
            if (c in basicTypes) {
                list.push(basicTypes[c])
            } else {
                switch (c) {
                    case "P":
                        list.push(parse(true, 1, true)[0] + "*");
                        break;
                    case "R":
                        list.push(parse(true, 1, true)[0] + "&");
                        break;
                    case "L": {
                        i++;
                        var end = func.indexOf("E", i);
                        var size = end - i;
                        list.push(func.substr(i, size));
                        i += size + 2;
                        break
                    };
                    case "A": {
                        var size = parseInt(func.substr(i));
                        i += size.toString().length;
                        if (func[i] !== "_") throw "?";
                        i++;
                        list.push(parse(true, 1, true)[0] + " [" + size + "]");
                        break
                    };
                    case "E":
                        break paramLoop;
                    default:
                        ret += "?" + c;
                        break paramLoop
                }
            }
        }
        if (!allowVoid && list.length === 1 && list[0] === "void") list = [];
        if (rawList) {
            if (ret) {
                list.push(ret + "?")
            }
            return list
        } else {
            return ret + flushList()
        }
    }
    var parsed = func;
    try {
        if (func == "Object._main" || func == "_main") {
            return "main()"
        }
        if (typeof func === "number") func = Pointer_stringify(func);
        if (func[0] !== "_") return func;
        if (func[1] !== "_") return func;
        if (func[2] !== "Z") return func;
        switch (func[3]) {
            case "n":
                return "operator new()";
            case "d":
                return "operator delete()"
        }
        parsed = parse()
    } catch (e) {
        parsed += "?"
    }
    if (parsed.indexOf("?") >= 0 && !hasLibcxxabi) {
        Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling")
    }
    return parsed
}

function demangleAll(text) {
    return text.replace(/__Z[\w\d_]+/g, (function(x) {
        var y = demangle(x);
        return x === y ? x : x + " [" + y + "]"
    }))
}

function jsStackTrace() {
    var err = new Error;
    if (!err.stack) {
        try {
            throw new Error(0)
        } catch (e) {
            err = e
        }
        if (!err.stack) {
            return "(no stack trace available)"
        }
    }
    return err.stack.toString()
}

function stackTrace() {
    return demangleAll(jsStackTrace())
}
VimModule["stackTrace"] = stackTrace;
var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
    return x + 4095 & -4096
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0,
    STATICTOP = 0,
    staticSealed = false;
var STACK_BASE = 0,
    STACKTOP = 0,
    STACK_MAX = 0;
var DYNAMIC_BASE = 0,
    DYNAMICTOP = 0;

function enlargeMemory() {
    abort("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set VimModule.TOTAL_MEMORY before the program runs.")
}
var TOTAL_STACK = VimModule["TOTAL_STACK"] || 5242880;
var TOTAL_MEMORY = VimModule["TOTAL_MEMORY"] || 16777216;
var FAST_MEMORY = VimModule["FAST_MEMORY"] || 2097152;
var totalMemory = 64 * 1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
    if (totalMemory < 16 * 1024 * 1024) {
        totalMemory *= 2
    } else {
        totalMemory += 16 * 1024 * 1024
    }
}
if (totalMemory !== TOTAL_MEMORY) {
    VimModule.printErr("increasing TOTAL_MEMORY to " + totalMemory + " to be compliant with the asm.js spec (and given that TOTAL_STACK=" + TOTAL_STACK + ")");
    TOTAL_MEMORY = totalMemory
}
assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "JS engine does not provide full typed array support");
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");
VimModule["HEAP"] = HEAP;
VimModule["buffer"] = buffer;
VimModule["HEAP8"] = HEAP8;
VimModule["HEAP16"] = HEAP16;
VimModule["HEAP32"] = HEAP32;
VimModule["HEAPU8"] = HEAPU8;
VimModule["HEAPU16"] = HEAPU16;
VimModule["HEAPU32"] = HEAPU32;
VimModule["HEAPF32"] = HEAPF32;
VimModule["HEAPF64"] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == "function") {
            callback();
            continue
        }
        var func = callback.func;
        if (typeof func === "number") {
            if (callback.arg === undefined) {
                Runtime.dynCall("v", func)
            } else {
                Runtime.dynCall("vi", func, [callback.arg])
            }
        } else {
            func(callback.arg === undefined ? null : callback.arg)
        }
    }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
    if (VimModule["preRun"]) {
        if (typeof VimModule["preRun"] == "function") VimModule["preRun"] = [VimModule["preRun"]];
        while (VimModule["preRun"].length) {
            addOnPreRun(VimModule["preRun"].shift())
        }
        addOnPreRun(() => {
            ENV["USER"] = "root";
            ENV["HOME"] = "/root";
            ENV["PWD"] = "/root";
            ENV["_"] = "/bin/vim";
            try {
                VimModule["FS_createPath"]("/", "root", true, true);
            } catch (e) {}
            FS.currentPath = "/root";
        });
    }
    callRuntimeCallbacks(__ATPRERUN__)
}

function ensureInitRuntime() {
    if (runtimeInitialized) return;
    runtimeInitialized = true;
    callRuntimeCallbacks(__ATINIT__)
}

function preMain() {
    callRuntimeCallbacks(__ATMAIN__)
}

function exitRuntime() {
    callRuntimeCallbacks(__ATEXIT__);
    runtimeExited = true
}

function postRun() {
    if (VimModule["postRun"]) {
        if (typeof VimModule["postRun"] == "function") VimModule["postRun"] = [VimModule["postRun"]];
        while (VimModule["postRun"].length) {
            addOnPostRun(VimModule["postRun"].shift())
        }
    }
    callRuntimeCallbacks(__ATPOSTRUN__)
}

function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb)
}
VimModule["addOnPreRun"] = VimModule.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
    __ATINIT__.unshift(cb)
}
VimModule["addOnInit"] = VimModule.addOnInit = addOnInit;

function addOnPreMain(cb) {
    __ATMAIN__.unshift(cb)
}
VimModule["addOnPreMain"] = VimModule.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
    __ATEXIT__.unshift(cb)
}
VimModule["addOnExit"] = VimModule.addOnExit = addOnExit;

function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb)
}
VimModule["addOnPostRun"] = VimModule.addOnPostRun = addOnPostRun;

function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array
}
VimModule["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
        var chr = array[i];
        if (chr > 255) {
            chr &= 255
        }
        ret.push(String.fromCharCode(chr))
    }
    return ret.join("")
}
VimModule["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
    var array = intArrayFromString(string, dontAddNull);
    var i = 0;
    while (i < array.length) {
        var chr = array[i];
        HEAP8[buffer + i >> 0] = chr;
        i = i + 1
    }
}
VimModule["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
    for (var i = 0; i < array.length; i++) {
        HEAP8[buffer++ >> 0] = array[i]
    }
}
VimModule["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
    for (var i = 0; i < str.length; ++i) {
        HEAP8[buffer++ >> 0] = str.charCodeAt(i)
    }
    if (!dontAddNull) HEAP8[buffer >> 0] = 0
}
VimModule["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
    if (value >= 0) {
        return value
    }
    return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value
}

function reSign(value, bits, ignore) {
    if (value <= 0) {
        return value
    }
    var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
    if (value >= half && (bits <= 32 || value > half)) {
        value = -2 * half + value
    }
    return value
}
if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5) Math["imul"] = function imul(a, b) {
    var ah = a >>> 16;
    var al = a & 65535;
    var bh = b >>> 16;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16) | 0
};
Math.imul = Math["imul"];
if (!Math["clz32"]) Math["clz32"] = (function(x) {
    x = x >>> 0;
    for (var i = 0; i < 32; i++) {
        if (x & 1 << 31 - i) return i
    }
    return 32
});
Math.clz32 = Math["clz32"];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;

function addRunDependency(id) {
    runDependencies++;
    if (VimModule["monitorRunDependencies"]) {
        VimModule["monitorRunDependencies"](runDependencies)
    }
}
VimModule["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
    runDependencies--;
    if (VimModule["monitorRunDependencies"]) {
        VimModule["monitorRunDependencies"](runDependencies)
    }
    if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null
        }
        if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback()
        }
    }
}
VimModule["removeRunDependency"] = removeRunDependency;
VimModule["preloadedImages"] = {};
VimModule["preloadedAudios"] = {};
var memoryInitializer = null;
STATIC_BASE = 2048;
STATICTOP = STATIC_BASE + 2551960;
var EMTSTACKTOP = STATIC_BASE + 1503376,
    EMT_STACK_MAX = EMTSTACKTOP + 1048576;
__ATINIT__.push();
var memoryInitializer = "vim.js.mem";
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0, "tempDoublePtr % 8 == 0");

function copyTempFloat(ptr) {
    HEAP8[tempDoublePtr] = HEAP8[ptr];
    HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
    HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
    HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3]
}

function copyTempDouble(ptr) {
    HEAP8[tempDoublePtr] = HEAP8[ptr];
    HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
    HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
    HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
    HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];
    HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];
    HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];
    HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7]
}

function _mktemp(template) {
    if (!_mktemp.counter) _mktemp.counter = 0;
    var c = (_mktemp.counter++).toString();
    var rep = "XXXXXX";
    while (c.length < rep.length) c = "0" + c;
    writeArrayToMemory(intArrayFromString(c), template + Pointer_stringify(template).indexOf(rep));
    return template
}
var vimjs = {
    is_firefox: false,
    is_chrome: false,
    container_node: null,
    canvas_node: null,
    font_test_node: null,
    canvas_ctx: null,
    devicePixelRatio: 0,
    char_width: 1,
    char_height: 1,
    window_width: 0,
    window_height: 0,
    font: "12px monospace",
    fg_color: "#fff",
    bg_color: "#000",
    sp_color: "#f00",
    gui_web_handle_key: null,
    input_available: null,
    special_keys: [],
    special_keys_namemap: {},
    color_map: {},
    ctrl_pressed: false,
    handle_key: (function(charCode, keyCode, e) {
        var modifiers = 0;
        if (charCode && e.shiftKey) modifiers |= 2;
        if (e.ctrlKey) modifiers |= 4;
        if (e.altKey) modifiers |= 8;
        if (e.metaKey) modifiers |= 16;
        var handled = false;
        if (charCode == 0) {
            var special = vimjs.special_keys[keyCode];
            if (special !== undefined) {
                vimjs.gui_web_handle_key(charCode || keyCode, modifiers, special.charCodeAt(0), special.charCodeAt(1));
                handled = true
            }
        }
        if (!handled) vimjs.gui_web_handle_key(charCode || keyCode, modifiers, 0, 0)
    }),
    get_color_string: (function(color) {
        var bgr = [];
        for (var i = 0; i < 3; ++i) {
            bgr.push(color & 255);
            color >>= 8
        }
        return "rgb(" + bgr[2] + "," + bgr[1] + "," + bgr[0] + ")"
    }),
    invert_canvas: (function(x, y, w, h) {
        var ctx = vimjs.canvas_ctx;
        if (!ctx) return;
        var img = ctx.getImageData(x, y, w, h);
        var data = img.data;
        for (var i = 0, l = data.length; i < l;) {
            data[i] = 255 - data[i];
            ++i;
            data[i] = 255 - data[i];
            ++i;
            data[i] = 255 - data[i];
            i += 2
        }
        ctx.putImageData(img, x, y)
    }),
    __dummy__: null
};

function _vimjs_resize(width, height) {
    if (!vimjs.container_node) return;
    var container_node = vimjs.container_node;
    container_node.style.width = width / vimjs.devicePixelRatio + container_node.offsetWidth - container_node.clientWidth + "px";
    container_node.style.height = height / vimjs.devicePixelRatio + container_node.offsetHeight - container_node.clientHeight + "px";
    if (!vimjs.canvas_node) return;
    var canvas_node = vimjs.canvas_node;
    canvas_node.width = width;
    canvas_node.height = height
}
var ERRNO_CODES = {
    EPERM: 1,
    ENOENT: 2,
    ESRCH: 3,
    EINTR: 4,
    EIO: 5,
    ENXIO: 6,
    E2BIG: 7,
    ENOEXEC: 8,
    EBADF: 9,
    ECHILD: 10,
    EAGAIN: 11,
    EWOULDBLOCK: 11,
    ENOMEM: 12,
    EACCES: 13,
    EFAULT: 14,
    ENOTBLK: 15,
    EBUSY: 16,
    EEXIST: 17,
    EXDEV: 18,
    ENODEV: 19,
    ENOTDIR: 20,
    EISDIR: 21,
    EINVAL: 22,
    ENFILE: 23,
    EMFILE: 24,
    ENOTTY: 25,
    ETXTBSY: 26,
    EFBIG: 27,
    ENOSPC: 28,
    ESPIPE: 29,
    EROFS: 30,
    EMLINK: 31,
    EPIPE: 32,
    EDOM: 33,
    ERANGE: 34,
    ENOMSG: 42,
    EIDRM: 43,
    ECHRNG: 44,
    EL2NSYNC: 45,
    EL3HLT: 46,
    EL3RST: 47,
    ELNRNG: 48,
    EUNATCH: 49,
    ENOCSI: 50,
    EL2HLT: 51,
    EDEADLK: 35,
    ENOLCK: 37,
    EBADE: 52,
    EBADR: 53,
    EXFULL: 54,
    ENOANO: 55,
    EBADRQC: 56,
    EBADSLT: 57,
    EDEADLOCK: 35,
    EBFONT: 59,
    ENOSTR: 60,
    ENODATA: 61,
    ETIME: 62,
    ENOSR: 63,
    ENONET: 64,
    ENOPKG: 65,
    EREMOTE: 66,
    ENOLINK: 67,
    EADV: 68,
    ESRMNT: 69,
    ECOMM: 70,
    EPROTO: 71,
    EMULTIHOP: 72,
    EDOTDOT: 73,
    EBADMSG: 74,
    ENOTUNIQ: 76,
    EBADFD: 77,
    EREMCHG: 78,
    ELIBACC: 79,
    ELIBBAD: 80,
    ELIBSCN: 81,
    ELIBMAX: 82,
    ELIBEXEC: 83,
    ENOSYS: 38,
    ENOTEMPTY: 39,
    ENAMETOOLONG: 36,
    ELOOP: 40,
    EOPNOTSUPP: 95,
    EPFNOSUPPORT: 96,
    ECONNRESET: 104,
    ENOBUFS: 105,
    EAFNOSUPPORT: 97,
    EPROTOTYPE: 91,
    ENOTSOCK: 88,
    ENOPROTOOPT: 92,
    ESHUTDOWN: 108,
    ECONNREFUSED: 111,
    EADDRINUSE: 98,
    ECONNABORTED: 103,
    ENETUNREACH: 101,
    ENETDOWN: 100,
    ETIMEDOUT: 110,
    EHOSTDOWN: 112,
    EHOSTUNREACH: 113,
    EINPROGRESS: 115,
    EALREADY: 114,
    EDESTADDRREQ: 89,
    EMSGSIZE: 90,
    EPROTONOSUPPORT: 93,
    ESOCKTNOSUPPORT: 94,
    EADDRNOTAVAIL: 99,
    ENETRESET: 102,
    EISCONN: 106,
    ENOTCONN: 107,
    ETOOMANYREFS: 109,
    EUSERS: 87,
    EDQUOT: 122,
    ESTALE: 116,
    ENOTSUP: 95,
    ENOMEDIUM: 123,
    EILSEQ: 84,
    EOVERFLOW: 75,
    ECANCELED: 125,
    ENOTRECOVERABLE: 131,
    EOWNERDEAD: 130,
    ESTRPIPE: 86
};
var ERRNO_MESSAGES = {
    0: "Success",
    1: "Not super-user",
    2: "No such file or directory",
    3: "No such process",
    4: "Interrupted system call",
    5: "I/O error",
    6: "No such device or address",
    7: "Arg list too long",
    8: "Exec format error",
    9: "Bad file number",
    10: "No children",
    11: "No more processes",
    12: "Not enough core",
    13: "Permission denied",
    14: "Bad address",
    15: "Block device required",
    16: "Mount device busy",
    17: "File exists",
    18: "Cross-device link",
    19: "No such device",
    20: "Not a directory",
    21: "Is a directory",
    22: "Invalid argument",
    23: "Too many open files in system",
    24: "Too many open files",
    25: "Not a typewriter",
    26: "Text file busy",
    27: "File too large",
    28: "No space left on device",
    29: "Illegal seek",
    30: "Read only file system",
    31: "Too many links",
    32: "Broken pipe",
    33: "Math arg out of domain of func",
    34: "Math result not representable",
    35: "File locking deadlock error",
    36: "File or path name too long",
    37: "No record locks available",
    38: "Function not implemented",
    39: "Directory not empty",
    40: "Too many symbolic links",
    42: "No message of desired type",
    43: "Identifier removed",
    44: "Channel number out of range",
    45: "Level 2 not synchronized",
    46: "Level 3 halted",
    47: "Level 3 reset",
    48: "Link number out of range",
    49: "Protocol driver not attached",
    50: "No CSI structure available",
    51: "Level 2 halted",
    52: "Invalid exchange",
    53: "Invalid request descriptor",
    54: "Exchange full",
    55: "No anode",
    56: "Invalid request code",
    57: "Invalid slot",
    59: "Bad font file fmt",
    60: "Device not a stream",
    61: "No data (for no delay io)",
    62: "Timer expired",
    63: "Out of streams resources",
    64: "Machine is not on the network",
    65: "Package not installed",
    66: "The object is remote",
    67: "The link has been severed",
    68: "Advertise error",
    69: "Srmount error",
    70: "Communication error on send",
    71: "Protocol error",
    72: "Multihop attempted",
    73: "Cross mount point (not really error)",
    74: "Trying to read unreadable message",
    75: "Value too large for defined data type",
    76: "Given log. name not unique",
    77: "f.d. invalid for this operation",
    78: "Remote address changed",
    79: "Can   access a needed shared lib",
    80: "Accessing a corrupted shared lib",
    81: ".lib section in a.out corrupted",
    82: "Attempting to link in too many libs",
    83: "Attempting to exec a shared library",
    84: "Illegal byte sequence",
    86: "Streams pipe error",
    87: "Too many users",
    88: "Socket operation on non-socket",
    89: "Destination address required",
    90: "Message too long",
    91: "Protocol wrong type for socket",
    92: "Protocol not available",
    93: "Unknown protocol",
    94: "Socket type not supported",
    95: "Not supported",
    96: "Protocol family not supported",
    97: "Address family not supported by protocol family",
    98: "Address already in use",
    99: "Address not available",
    100: "Network interface is not configured",
    101: "Network is unreachable",
    102: "Connection reset by network",
    103: "Connection aborted",
    104: "Connection reset by peer",
    105: "No buffer space available",
    106: "Socket is already connected",
    107: "Socket is not connected",
    108: "Can't send after socket shutdown",
    109: "Too many references",
    110: "Connection timed out",
    111: "Connection refused",
    112: "Host is down",
    113: "Host is unreachable",
    114: "Socket already connected",
    115: "Connection already in progress",
    116: "Stale file handle",
    122: "Quota exceeded",
    123: "No medium (in tape drive)",
    125: "Operation canceled",
    130: "Previous owner died",
    131: "State not recoverable"
};
var ___errno_state = 0;

function ___setErrNo(value) {
    HEAP32[___errno_state >> 2] = value;
    return value
}
var PATH = {
    splitPath: (function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1)
    }),
    normalizeArray: (function(parts, allowAboveRoot) {
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === ".") {
                parts.splice(i, 1)
            } else if (last === "..") {
                parts.splice(i, 1);
                up++
            } else if (up) {
                parts.splice(i, 1);
                up--
            }
        }
        if (allowAboveRoot) {
            for (; up--; up) {
                parts.unshift("..")
            }
        }
        return parts
    }),
    normalize: (function(path) {
        var isAbsolute = path.charAt(0) === "/",
            trailingSlash = path.substr(-1) === "/";
        path = PATH.normalizeArray(path.split("/").filter((function(p) {
            return !!p
        })), !isAbsolute).join("/");
        if (!path && !isAbsolute) {
            path = "."
        }
        if (path && trailingSlash) {
            path += "/"
        }
        return (isAbsolute ? "/" : "") + path
    }),
    dirname: (function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
            return "."
        }
        if (dir) {
            dir = dir.substr(0, dir.length - 1)
        }
        return root + dir
    }),
    basename: (function(path) {
        if (path === "/") return "/";
        var lastSlash = path.lastIndexOf("/");
        if (lastSlash === -1) return path;
        return path.substr(lastSlash + 1)
    }),
    extname: (function(path) {
        return PATH.splitPath(path)[3]
    }),
    join: (function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join("/"))
    }),
    join2: (function(l, r) {
        return PATH.normalize(l + "/" + r)
    }),
    resolve: (function() {
        var resolvedPath = "",
            resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = i >= 0 ? arguments[i] : FS.cwd();
            if (typeof path !== "string") {
                throw new TypeError("Arguments to path.resolve must be strings")
            } else if (!path) {
                return ""
            }
            resolvedPath = path + "/" + resolvedPath;
            resolvedAbsolute = path.charAt(0) === "/"
        }
        resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter((function(p) {
            return !!p
        })), !resolvedAbsolute).join("/");
        return (resolvedAbsolute ? "/" : "") + resolvedPath || "."
    }),
    relative: (function(from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);

        function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
                if (arr[start] !== "") break
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
                if (arr[end] !== "") break
            }
            if (start > end) return [];
            return arr.slice(start, end - start + 1)
        }
        var fromParts = trim(from.split("/"));
        var toParts = trim(to.split("/"));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break
            }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push("..")
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join("/")
    })
};
var TTY = {
    ttys: [],
    init: (function() {}),
    shutdown: (function() {}),
    register: (function(dev, ops) {
        TTY.ttys[dev] = {
            input: [],
            output: [],
            ops: ops
        };
        FS.registerDevice(dev, TTY.stream_ops)
    }),
    stream_ops: {
        open: (function(stream) {
            var tty = TTY.ttys[stream.node.rdev];
            if (!tty) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
            }
            stream.tty = tty;
            stream.seekable = false
        }),
        close: (function(stream) {
            stream.tty.ops.flush(stream.tty)
        }),
        flush: (function(stream) {
            stream.tty.ops.flush(stream.tty)
        }),
        read: (function(stream, buffer, offset, length, pos) {
            if (!stream.tty || !stream.tty.ops.get_char) {
                throw new FS.ErrnoError(ERRNO_CODES.ENXIO)
            }
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
                var result;
                try {
                    result = stream.tty.ops.get_char(stream.tty)
                } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO)
                }
                if (result === undefined && bytesRead === 0) {
                    throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
                }
                if (result === null || result === undefined) break;
                bytesRead++;
                buffer[offset + i] = result
            }
            if (bytesRead) {
                stream.node.timestamp = Date.now()
            }
            return bytesRead
        }),
        write: (function(stream, buffer, offset, length, pos) {
            if (!stream.tty || !stream.tty.ops.put_char) {
                throw new FS.ErrnoError(ERRNO_CODES.ENXIO)
            }
            for (var i = 0; i < length; i++) {
                try {
                    stream.tty.ops.put_char(stream.tty, buffer[offset + i])
                } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO)
                }
            }
            if (length) {
                stream.node.timestamp = Date.now()
            }
            return i
        })
    },
    default_tty_ops: {
        get_char: (function(tty) {
            if (!tty.input.length) {
                var result = null;
                if (typeof window != "undefined" && typeof window.prompt == "function") {
                    result = window.prompt("Input: ");
                    if (result !== null) {
                        result += "\n"
                    }
                } else if (typeof readline == "function") {
                    result = readline();
                    if (result !== null) {
                        result += "\n"
                    }
                }
                if (!result) {
                    return null
                }
                tty.input = intArrayFromString(result, true)
            }
            return tty.input.shift()
        }),
        put_char: (function(tty, val) {
            if (val === null || val === 10) {
                VimModule["print"](UTF8ArrayToString(tty.output, 0));
                tty.output = []
            } else {
                if (val != 0) tty.output.push(val)
            }
        }),
        flush: (function(tty) {
            if (tty.output && tty.output.length > 0) {
                VimModule["print"](UTF8ArrayToString(tty.output, 0));
                tty.output = []
            }
        })
    },
    default_tty1_ops: {
        put_char: (function(tty, val) {
            if (val === null || val === 10) {
                VimModule["printErr"](UTF8ArrayToString(tty.output, 0));
                tty.output = []
            } else {
                if (val != 0) tty.output.push(val)
            }
        }),
        flush: (function(tty) {
            if (tty.output && tty.output.length > 0) {
                VimModule["printErr"](UTF8ArrayToString(tty.output, 0));
                tty.output = []
            }
        })
    }
};
var MEMFS = {
    ops_table: null,
    mount: (function(mount) {
        return MEMFS.createNode(null, "/", 16384 | 511, 0)
    }),
    createNode: (function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (!MEMFS.ops_table) {
            MEMFS.ops_table = {
                dir: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek
                    }
                },
                file: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap
                    }
                },
                link: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink
                    },
                    stream: {}
                },
                chrdev: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: FS.chrdev_stream_ops
                }
            }
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
            node.node_ops = MEMFS.ops_table.dir.node;
            node.stream_ops = MEMFS.ops_table.dir.stream;
            node.contents = {}
        } else if (FS.isFile(node.mode)) {
            node.node_ops = MEMFS.ops_table.file.node;
            node.stream_ops = MEMFS.ops_table.file.stream;
            node.usedBytes = 0;
            node.contents = null
        } else if (FS.isLink(node.mode)) {
            node.node_ops = MEMFS.ops_table.link.node;
            node.stream_ops = MEMFS.ops_table.link.stream
        } else if (FS.isChrdev(node.mode)) {
            node.node_ops = MEMFS.ops_table.chrdev.node;
            node.stream_ops = MEMFS.ops_table.chrdev.stream
        }
        node.timestamp = Date.now();
        if (parent) {
            parent.contents[name] = node
        }
        return node
    }),
    getFileDataAsRegularArray: (function(node) {
        if (node.contents && node.contents.subarray) {
            var arr = [];
            for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
            return arr
        }
        return node.contents
    }),
    getFileDataAsTypedArray: (function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
        return new Uint8Array(node.contents)
    }),
    expandFileStorage: (function(node, newCapacity) {
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
            node.contents = MEMFS.getFileDataAsRegularArray(node);
            node.usedBytes = node.contents.length
        }
        if (!node.contents || node.contents.subarray) {
            var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
            if (prevCapacity >= newCapacity) return;
            var CAPACITY_DOUBLING_MAX = 1024 * 1024;
            newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);
            if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
            var oldContents = node.contents;
            node.contents = new Uint8Array(newCapacity);
            if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
            return
        }
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0)
    }),
    resizeFileStorage: (function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
            node.contents = null;
            node.usedBytes = 0;
            return
        }
        if (!node.contents || node.contents.subarray) {
            var oldContents = node.contents;
            node.contents = new Uint8Array(new ArrayBuffer(newSize));
            if (oldContents) {
                node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)))
            }
            node.usedBytes = newSize;
            return
        }
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else
            while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize
    }),
    node_ops: {
        getattr: (function(node) {
            var attr = {};
            attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
            attr.ino = node.id;
            attr.mode = node.mode;
            attr.nlink = 1;
            attr.uid = 0;
            attr.gid = 0;
            attr.rdev = node.rdev;
            if (FS.isDir(node.mode)) {
                attr.size = 4096
            } else if (FS.isFile(node.mode)) {
                attr.size = node.usedBytes
            } else if (FS.isLink(node.mode)) {
                attr.size = node.link.length
            } else {
                attr.size = 0
            }
            attr.atime = new Date(node.timestamp);
            attr.mtime = new Date(node.timestamp);
            attr.ctime = new Date(node.timestamp);
            attr.blksize = 4096;
            attr.blocks = Math.ceil(attr.size / attr.blksize);
            return attr
        }),
        setattr: (function(node, attr) {
            if (attr.mode !== undefined) {
                node.mode = attr.mode
            }
            if (attr.timestamp !== undefined) {
                node.timestamp = attr.timestamp
            }
            if (attr.size !== undefined) {
                MEMFS.resizeFileStorage(node, attr.size)
            }
        }),
        lookup: (function(parent, name) {
            throw FS.genericErrors[ERRNO_CODES.ENOENT]
        }),
        mknod: (function(parent, name, mode, dev) {
            return MEMFS.createNode(parent, name, mode, dev)
        }),
        rename: (function(old_node, new_dir, new_name) {
            if (FS.isDir(old_node.mode)) {
                var new_node;
                try {
                    new_node = FS.lookupNode(new_dir, new_name)
                } catch (e) {}
                if (new_node) {
                    for (var i in new_node.contents) {
                        throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
                    }
                }
            }
            delete old_node.parent.contents[old_node.name];
            old_node.name = new_name;
            new_dir.contents[new_name] = old_node;
            old_node.parent = new_dir
        }),
        unlink: (function(parent, name) {
            delete parent.contents[name]
        }),
        rmdir: (function(parent, name) {
            var node = FS.lookupNode(parent, name);
            for (var i in node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
            }
            delete parent.contents[name]
        }),
        readdir: (function(node) {
            var entries = [".", ".."];
            for (var key in node.contents) {
                if (!node.contents.hasOwnProperty(key)) {
                    continue
                }
                entries.push(key)
            }
            return entries
        }),
        symlink: (function(parent, newname, oldpath) {
            var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
            node.link = oldpath;
            return node
        }),
        readlink: (function(node) {
            if (!FS.isLink(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            return node.link
        })
    },
    stream_ops: {
        read: (function(stream, buffer, offset, length, position) {
            var contents = stream.node.contents;
            if (position >= stream.node.usedBytes) return 0;
            var size = Math.min(stream.node.usedBytes - position, length);
            assert(size >= 0, "size >= 0");
            if (size > 8 && contents.subarray) {
                buffer.set(contents.subarray(position, position + size), offset)
            } else {
                for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i]
            }
            return size
        }),
        write: (function(stream, buffer, offset, length, position, canOwn) {
            if (!length) return 0;
            var node = stream.node;
            node.timestamp = Date.now();
            if (buffer.subarray && (!node.contents || node.contents.subarray)) {
                const triggerFileUpdate = () => {
                  if (stream.path === VimModule.arguments[0]) {
                    VimModule["writeCallback"](node.contents);
                  }
                };
                if (canOwn) {
                    node.contents = buffer.subarray(offset, offset + length);
                    node.usedBytes = length;
                    triggerFileUpdate();
                    return length
                } else if (node.usedBytes === 0 && position === 0) {
                    node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
                    node.usedBytes = length;
                    triggerFileUpdate();
                    return length
                } else if (position + length <= node.usedBytes) {
                    node.contents.set(buffer.subarray(offset, offset + length), position);
                    triggerFileUpdate();
                    return length
                }
            }
            MEMFS.expandFileStorage(node, position + length);
            if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position);
            else
                for (var i = 0; i < length; i++) {
                    node.contents[position + i] = buffer[offset + i]
                }
            node.usedBytes = Math.max(node.usedBytes, position + length);
            return length
        }),
        llseek: (function(stream, offset, whence) {
            var position = offset;
            if (whence === 1) {
                position += stream.position
            } else if (whence === 2) {
                if (FS.isFile(stream.node.mode)) {
                    position += stream.node.usedBytes
                }
            }
            if (position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            return position
        }),
        allocate: (function(stream, offset, length) {
            MEMFS.expandFileStorage(stream.node, offset + length);
            stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length)
        }),
        mmap: (function(stream, buffer, offset, length, position, prot, flags) {
            if (!FS.isFile(stream.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
            }
            var ptr;
            var allocated;
            var contents = stream.node.contents;
            if (!(flags & 2) && (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
                allocated = false;
                ptr = contents.byteOffset
            } else {
                if (position > 0 || position + length < stream.node.usedBytes) {
                    if (contents.subarray) {
                        contents = contents.subarray(position, position + length)
                    } else {
                        contents = Array.prototype.slice.call(contents, position, position + length)
                    }
                }
                allocated = true;
                ptr = _malloc(length);
                if (!ptr) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOMEM)
                }
                buffer.set(contents, ptr)
            }
            return {
                ptr: ptr,
                allocated: allocated
            }
        })
    }
};
var _stdin = allocate(1, "i32*", ALLOC_STATIC);
var _stdout = allocate(1, "i32*", ALLOC_STATIC);
var _stderr = allocate(1, "i32*", ALLOC_STATIC);

function _fflush(stream) {}
var FS = {
    root: null,
    mounts: [],
    devices: [null],
    streams: [],
    nextInode: 1,
    nameTable: null,
    currentPath: "/",
    initialized: false,
    ignorePermissions: true,
    trackingDelegate: {},
    tracking: {
        openFlags: {
            READ: 1,
            WRITE: 2
        }
    },
    ErrnoError: null,
    genericErrors: {},
    handleFSError: (function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
        return ___setErrNo(e.errno)
    }),
    lookupPath: (function(path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
        if (!path) return {
            path: "",
            node: null
        };
        var defaults = {
            follow_mount: true,
            recurse_count: 0
        };
        for (var key in defaults) {
            if (opts[key] === undefined) {
                opts[key] = defaults[key]
            }
        }
        if (opts.recurse_count > 8) {
            throw new FS.ErrnoError(ERRNO_CODES.ELOOP)
        }
        var parts = PATH.normalizeArray(path.split("/").filter((function(p) {
            return !!p
        })), false);
        var current = FS.root;
        var current_path = "/";
        for (var i = 0; i < parts.length; i++) {
            var islast = i === parts.length - 1;
            if (islast && opts.parent) {
                break
            }
            current = FS.lookupNode(current, parts[i]);
            current_path = PATH.join2(current_path, parts[i]);
            if (FS.isMountpoint(current)) {
                if (!islast || islast && opts.follow_mount) {
                    current = current.mounted.root
                }
            }
            if (!islast || opts.follow) {
                var count = 0;
                while (FS.isLink(current.mode)) {
                    var link = FS.readlink(current_path);
                    current_path = PATH.resolve(PATH.dirname(current_path), link);
                    var lookup = FS.lookupPath(current_path, {
                        recurse_count: opts.recurse_count
                    });
                    current = lookup.node;
                    if (count++ > 40) {
                        throw new FS.ErrnoError(ERRNO_CODES.ELOOP)
                    }
                }
            }
        }
        return {
            path: current_path,
            node: current
        }
    }),
    getPath: (function(node) {
        var path;
        while (true) {
            if (FS.isRoot(node)) {
                var mount = node.mount.mountpoint;
                if (!path) return mount;
                return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path
            }
            path = path ? node.name + "/" + path : node.name;
            node = node.parent
        }
    }),
    hashName: (function(parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
            hash = (hash << 5) - hash + name.charCodeAt(i) | 0
        }
        return (parentid + hash >>> 0) % FS.nameTable.length
    }),
    hashAddNode: (function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node
    }),
    hashRemoveNode: (function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
            FS.nameTable[hash] = node.name_next
        } else {
            var current = FS.nameTable[hash];
            while (current) {
                if (current.name_next === node) {
                    current.name_next = node.name_next;
                    break
                }
                current = current.name_next
            }
        }
    }),
    lookupNode: (function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
            throw new FS.ErrnoError(err, parent)
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
            var nodeName = node.name;
            if (node.parent.id === parent.id && nodeName === name) {
                return node
            }
        }
        return FS.lookup(parent, name)
    }),
    createNode: (function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
            FS.FSNode = (function(parent, name, mode, rdev) {
                if (!parent) {
                    parent = this
                }
                this.parent = parent;
                this.mount = parent.mount;
                this.mounted = null;
                this.id = FS.nextInode++;
                this.name = name;
                this.mode = mode;
                this.node_ops = {};
                this.stream_ops = {};
                this.rdev = rdev
            });
            FS.FSNode.prototype = {};
            var readMode = 292 | 73;
            var writeMode = 146;
            Object.defineProperties(FS.FSNode.prototype, {
                read: {
                    get: (function() {
                        return (this.mode & readMode) === readMode
                    }),
                    set: (function(val) {
                        val ? this.mode |= readMode : this.mode &= ~readMode
                    })
                },
                write: {
                    get: (function() {
                        return (this.mode & writeMode) === writeMode
                    }),
                    set: (function(val) {
                        val ? this.mode |= writeMode : this.mode &= ~writeMode
                    })
                },
                isFolder: {
                    get: (function() {
                        return FS.isDir(this.mode)
                    })
                },
                isDevice: {
                    get: (function() {
                        return FS.isChrdev(this.mode)
                    })
                }
            })
        }
        var node = new FS.FSNode(parent, name, mode, rdev);
        FS.hashAddNode(node);
        return node
    }),
    destroyNode: (function(node) {
        FS.hashRemoveNode(node)
    }),
    isRoot: (function(node) {
        return node === node.parent
    }),
    isMountpoint: (function(node) {
        return !!node.mounted
    }),
    isFile: (function(mode) {
        return (mode & 61440) === 32768
    }),
    isDir: (function(mode) {
        return (mode & 61440) === 16384
    }),
    isLink: (function(mode) {
        return (mode & 61440) === 40960
    }),
    isChrdev: (function(mode) {
        return (mode & 61440) === 8192
    }),
    isBlkdev: (function(mode) {
        return (mode & 61440) === 24576
    }),
    isFIFO: (function(mode) {
        return (mode & 61440) === 4096
    }),
    isSocket: (function(mode) {
        return (mode & 49152) === 49152
    }),
    flagModes: {
        "r": 0,
        "rs": 1052672,
        "r+": 2,
        "w": 577,
        "wx": 705,
        "xw": 705,
        "w+": 578,
        "wx+": 706,
        "xw+": 706,
        "a": 1089,
        "ax": 1217,
        "xa": 1217,
        "a+": 1090,
        "ax+": 1218,
        "xa+": 1218
    },
    modeStringToFlags: (function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === "undefined") {
            throw new Error("Unknown file open mode: " + str)
        }
        return flags
    }),
    flagsToPermissionString: (function(flag) {
        var accmode = flag & 2097155;
        var perms = ["r", "w", "rw"][accmode];
        if (flag & 512) {
            perms += "w"
        }
        return perms
    }),
    nodePermissions: (function(node, perms) {
        if (FS.ignorePermissions) {
            return 0
        }
        if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
            return ERRNO_CODES.EACCES
        } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
            return ERRNO_CODES.EACCES
        } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
            return ERRNO_CODES.EACCES
        }
        return 0
    }),
    mayLookup: (function(dir) {
        var err = FS.nodePermissions(dir, "x");
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0
    }),
    mayCreate: (function(dir, name) {
        try {
            var node = FS.lookupNode(dir, name);
            return ERRNO_CODES.EEXIST
        } catch (e) {}
        return FS.nodePermissions(dir, "wx")
    }),
    mayDelete: (function(dir, name, isdir) {
        var node;
        try {
            node = FS.lookupNode(dir, name)
        } catch (e) {
            return e.errno
        }
        var err = FS.nodePermissions(dir, "wx");
        if (err) {
            return err
        }
        if (isdir) {
            if (!FS.isDir(node.mode)) {
                return ERRNO_CODES.ENOTDIR
            }
            if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                return ERRNO_CODES.EBUSY
            }
        } else {
            if (FS.isDir(node.mode)) {
                return ERRNO_CODES.EISDIR
            }
        }
        return 0
    }),
    mayOpen: (function(node, flags) {
        if (!node) {
            return ERRNO_CODES.ENOENT
        }
        if (FS.isLink(node.mode)) {
            return ERRNO_CODES.ELOOP
        } else if (FS.isDir(node.mode)) {
            if ((flags & 2097155) !== 0 || flags & 512) {
                return ERRNO_CODES.EISDIR
            }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags))
    }),
    MAX_OPEN_FDS: 4096,
    nextfd: (function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
            if (!FS.streams[fd]) {
                return fd
            }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE)
    }),
    getStream: (function(fd) {
        return FS.streams[fd]
    }),
    createStream: (function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
            FS.FSStream = (function() {});
            FS.FSStream.prototype = {};
            Object.defineProperties(FS.FSStream.prototype, {
                object: {
                    get: (function() {
                        return this.node
                    }),
                    set: (function(val) {
                        this.node = val
                    })
                },
                isRead: {
                    get: (function() {
                        return (this.flags & 2097155) !== 1
                    })
                },
                isWrite: {
                    get: (function() {
                        return (this.flags & 2097155) !== 0
                    })
                },
                isAppend: {
                    get: (function() {
                        return this.flags & 1024
                    })
                }
            })
        }
        var newStream = new FS.FSStream;
        for (var p in stream) {
            newStream[p] = stream[p]
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream
    }),
    closeStream: (function(fd) {
        FS.streams[fd] = null
    }),
    getStreamFromPtr: (function(ptr) {
        return FS.streams[ptr - 1]
    }),
    getPtrForStream: (function(stream) {
        return stream ? stream.fd + 1 : 0
    }),
    chrdev_stream_ops: {
        open: (function(stream) {
            var device = FS.getDevice(stream.node.rdev);
            stream.stream_ops = device.stream_ops;
            if (stream.stream_ops.open) {
                stream.stream_ops.open(stream)
            }
        }),
        llseek: (function() {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
        })
    },
    major: (function(dev) {
        return dev >> 8
    }),
    minor: (function(dev) {
        return dev & 255
    }),
    makedev: (function(ma, mi) {
        return ma << 8 | mi
    }),
    registerDevice: (function(dev, ops) {
        FS.devices[dev] = {
            stream_ops: ops
        }
    }),
    getDevice: (function(dev) {
        return FS.devices[dev]
    }),
    getMounts: (function(mount) {
        var mounts = [];
        var check = [mount];
        while (check.length) {
            var m = check.pop();
            mounts.push(m);
            check.push.apply(check, m.mounts)
        }
        return mounts
    }),
    syncfs: (function(populate, callback) {
        if (typeof populate === "function") {
            callback = populate;
            populate = false
        }
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;

        function done(err) {
            if (err) {
                if (!done.errored) {
                    done.errored = true;
                    return callback(err)
                }
                return
            }
            if (++completed >= mounts.length) {
                callback(null)
            }
        }
        mounts.forEach((function(mount) {
            if (!mount.type.syncfs) {
                return done(null)
            }
            mount.type.syncfs(mount, populate, done)
        }))
    }),
    mount: (function(type, opts, mountpoint) {
        var root = mountpoint === "/";
        var pseudo = !mountpoint;
        var node;
        if (root && FS.root) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        } else if (!root && !pseudo) {
            var lookup = FS.lookupPath(mountpoint, {
                follow_mount: false
            });
            mountpoint = lookup.path;
            node = lookup.node;
            if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
            }
            if (!FS.isDir(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
            }
        }
        var mount = {
            type: type,
            opts: opts,
            mountpoint: mountpoint,
            mounts: []
        };
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
        if (root) {
            FS.root = mountRoot
        } else if (node) {
            node.mounted = mount;
            if (node.mount) {
                node.mount.mounts.push(mount)
            }
        }
        return mountRoot
    }),
    unmount: (function(mountpoint) {
        var lookup = FS.lookupPath(mountpoint, {
            follow_mount: false
        });
        if (!FS.isMountpoint(lookup.node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
        Object.keys(FS.nameTable).forEach((function(hash) {
            var current = FS.nameTable[hash];
            while (current) {
                var next = current.name_next;
                if (mounts.indexOf(current.mount) !== -1) {
                    FS.destroyNode(current)
                }
                current = next
            }
        }));
        node.mounted = null;
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1, "idx !== -1");
        node.mount.mounts.splice(idx, 1)
    }),
    lookup: (function(parent, name) {
        return parent.node_ops.lookup(parent, name)
    }),
    mknod: (function(path, mode, dev) {
        var lookup = FS.lookupPath(path, {
            parent: true
        });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === "." || name === "..") {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
            throw new FS.ErrnoError(err)
        }
        if (!parent.node_ops.mknod) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        return parent.node_ops.mknod(parent, name, mode, dev)
    }),
    create: (function(path, mode) {
        mode = mode !== undefined ? mode : 438;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0)
    }),
    mkdir: (function(path, mode) {
        mode = mode !== undefined ? mode : 511;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0)
    }),
    mkdev: (function(path, mode, dev) {
        if (typeof dev === "undefined") {
            dev = mode;
            mode = 438
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev)
    }),
    symlink: (function(oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        var lookup = FS.lookupPath(newpath, {
            parent: true
        });
        var parent = lookup.node;
        if (!parent) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
            throw new FS.ErrnoError(err)
        }
        if (!parent.node_ops.symlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        return parent.node_ops.symlink(parent, newname, oldpath)
    }),
    rename: (function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        var lookup, old_dir, new_dir;
        try {
            lookup = FS.lookupPath(old_path, {
                parent: true
            });
            old_dir = lookup.node;
            lookup = FS.lookupPath(new_path, {
                parent: true
            });
            new_dir = lookup.node
        } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        if (old_dir.mount !== new_dir.mount) {
            throw new FS.ErrnoError(ERRNO_CODES.EXDEV)
        }
        var old_node = FS.lookupNode(old_dir, old_name);
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== ".") {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== ".") {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
        }
        var new_node;
        try {
            new_node = FS.lookupNode(new_dir, new_name)
        } catch (e) {}
        if (old_node === new_node) {
            return
        }
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
            throw new FS.ErrnoError(err)
        }
        err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
        if (err) {
            throw new FS.ErrnoError(err)
        }
        if (!old_dir.node_ops.rename) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        }
        if (new_dir !== old_dir) {
            err = FS.nodePermissions(old_dir, "w");
            if (err) {
                throw new FS.ErrnoError(err)
            }
        }
        try {
            if (FS.trackingDelegate["willMovePath"]) {
                FS.trackingDelegate["willMovePath"](old_path, new_path)
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message)
        }
        FS.hashRemoveNode(old_node);
        try {
            old_dir.node_ops.rename(old_node, new_dir, new_name)
        } catch (e) {
            throw e
        } finally {
            FS.hashAddNode(old_node)
        }
        try {
            if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path)
        } catch (e) {
            console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message)
        }
    }),
    rmdir: (function(path) {
        var lookup = FS.lookupPath(path, {
            parent: true
        });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
            throw new FS.ErrnoError(err)
        }
        if (!parent.node_ops.rmdir) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        }
        try {
            if (FS.trackingDelegate["willDeletePath"]) {
                FS.trackingDelegate["willDeletePath"](path)
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message)
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
            if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path)
        } catch (e) {
            console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message)
        }
    }),
    readdir: (function(path) {
        var lookup = FS.lookupPath(path, {
            follow: true
        });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
        }
        return node.node_ops.readdir(node)
    }),
    unlink: (function(path) {
        var lookup = FS.lookupPath(path, {
            parent: true
        });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
            if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
            throw new FS.ErrnoError(err)
        }
        if (!parent.node_ops.unlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        }
        try {
            if (FS.trackingDelegate["willDeletePath"]) {
                FS.trackingDelegate["willDeletePath"](path)
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message)
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
            if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path)
        } catch (e) {
            console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message)
        }
    }),
    readlink: (function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        if (!link.node_ops.readlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        return link.node_ops.readlink(link)
    }),
    stat: (function(path, dontFollow) {
        var lookup = FS.lookupPath(path, {
            follow: !dontFollow
        });
        var node = lookup.node;
        if (!node) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        if (!node.node_ops.getattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        return node.node_ops.getattr(node)
    }),
    lstat: (function(path) {
        return FS.stat(path, true)
    }),
    chmod: (function(path, mode, dontFollow) {
        var node;
        if (typeof path === "string") {
            var lookup = FS.lookupPath(path, {
                follow: !dontFollow
            });
            node = lookup.node
        } else {
            node = path
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        node.node_ops.setattr(node, {
            mode: mode & 4095 | node.mode & ~4095,
            timestamp: Date.now()
        })
    }),
    lchmod: (function(path, mode) {
        FS.chmod(path, mode, true)
    }),
    fchmod: (function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        FS.chmod(stream.node, mode)
    }),
    chown: (function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === "string") {
            var lookup = FS.lookupPath(path, {
                follow: !dontFollow
            });
            node = lookup.node
        } else {
            node = path
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        node.node_ops.setattr(node, {
            timestamp: Date.now()
        })
    }),
    lchown: (function(path, uid, gid) {
        FS.chown(path, uid, gid, true)
    }),
    fchown: (function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        FS.chown(stream.node, uid, gid)
    }),
    truncate: (function(path, len) {
        if (len < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var node;
        if (typeof path === "string") {
            var lookup = FS.lookupPath(path, {
                follow: true
            });
            node = lookup.node
        } else {
            node = path
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
        }
        if (!FS.isFile(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var err = FS.nodePermissions(node, "w");
        if (err) {
            throw new FS.ErrnoError(err)
        }
        node.node_ops.setattr(node, {
            size: len,
            timestamp: Date.now()
        })
    }),
    ftruncate: (function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        FS.truncate(stream.node, len)
    }),
    utime: (function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, {
            follow: true
        });
        var node = lookup.node;
        node.node_ops.setattr(node, {
            timestamp: Math.max(atime, mtime)
        })
    }),
    open: (function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === "undefined" ? 438 : mode;
        if (flags & 64) {
            mode = mode & 4095 | 32768
        } else {
            mode = 0
        }
        var node;
        if (typeof path === "object") {
            node = path
        } else {
            path = PATH.normalize(path);
            try {
                var lookup = FS.lookupPath(path, {
                    follow: !(flags & 131072)
                });
                node = lookup.node
            } catch (e) {}
        }
        var created = false;
        if (flags & 64) {
            if (node) {
                if (flags & 128) {
                    throw new FS.ErrnoError(ERRNO_CODES.EEXIST)
                }
            } else {
                node = FS.mknod(path, mode, 0);
                created = true
            }
        }
        if (!node) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        if (FS.isChrdev(node.mode)) {
            flags &= ~512
        }
        if (!created) {
            var err = FS.mayOpen(node, flags);
            if (err) {
                throw new FS.ErrnoError(err)
            }
        }
        if (flags & 512) {
            FS.truncate(node, 0)
        }
        flags &= ~(128 | 512);
        var stream = FS.createStream({
            node: node,
            path: FS.getPath(node),
            flags: flags,
            seekable: true,
            position: 0,
            stream_ops: node.stream_ops,
            ungotten: [],
            error: false
        }, fd_start, fd_end);
        if (stream.stream_ops.open) {
            stream.stream_ops.open(stream)
        }
        if (VimModule["logReadFiles"] && !(flags & 1)) {
            if (!FS.readFiles) FS.readFiles = {};
            if (!(path in FS.readFiles)) {
                FS.readFiles[path] = 1;
                VimModule["printErr"]("read file: " + path)
            }
        }
        try {
            if (FS.trackingDelegate["onOpenFile"]) {
                var trackingFlags = 0;
                if ((flags & 2097155) !== 1) {
                    trackingFlags |= FS.tracking.openFlags.READ
                }
                if ((flags & 2097155) !== 0) {
                    trackingFlags |= FS.tracking.openFlags.WRITE
                }
                FS.trackingDelegate["onOpenFile"](path, trackingFlags)
            }
        } catch (e) {
            console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message)
        }
        return stream
    }),
    close: (function(stream) {
        try {
            if (stream.stream_ops.close) {
                stream.stream_ops.close(stream)
            }
        } catch (e) {
            throw e
        } finally {
            FS.closeStream(stream.fd)
        }
    }),
    llseek: (function(stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position
    }),
    read: (function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
        }
        if (!stream.stream_ops.read) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var seeking = true;
        if (typeof position === "undefined") {
            position = stream.position;
            seeking = false
        } else if (!stream.seekable) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead
    }),
    write: (function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
        }
        if (!stream.stream_ops.write) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        if (stream.flags & 1024) {
            FS.llseek(stream, 0, 2)
        }
        var seeking = true;
        if (typeof position === "undefined") {
            position = stream.position;
            seeking = false
        } else if (!stream.seekable) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
            if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path)
        } catch (e) {
            console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message)
        }
        return bytesWritten
    }),
    allocate: (function(stream, offset, length) {
        if (offset < 0 || length <= 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
        }
        if (!stream.stream_ops.allocate) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)
        }
        stream.stream_ops.allocate(stream, offset, length)
    }),
    mmap: (function(stream, buffer, offset, length, position, prot, flags) {
        if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(ERRNO_CODES.EACCES)
        }
        if (!stream.stream_ops.mmap) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags)
    }),
    ioctl: (function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTTY)
        }
        return stream.stream_ops.ioctl(stream, cmd, arg)
    }),
    readFile: (function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || "r";
        opts.encoding = opts.encoding || "binary";
        if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
            throw new Error('Invalid encoding type "' + opts.encoding + '"')
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === "utf8") {
            ret = UTF8ArrayToString(buf, 0)
        } else if (opts.encoding === "binary") {
            ret = buf
        }
        FS.close(stream);
        return ret
    }),
    writeFile: (function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || "w";
        opts.encoding = opts.encoding || "utf8";
        if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
            throw new Error('Invalid encoding type "' + opts.encoding + '"')
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === "utf8") {
            var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
            var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
            FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn)
        } else if (opts.encoding === "binary") {
            FS.write(stream, data, 0, data.length, 0, opts.canOwn)
        }
        FS.close(stream)
    }),
    cwd: (function() {
        return FS.currentPath
    }),
    chdir: (function(path) {
        var lookup = FS.lookupPath(path, {
            follow: true
        });
        if (!FS.isDir(lookup.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
        }
        var err = FS.nodePermissions(lookup.node, "x");
        if (err) {
            throw new FS.ErrnoError(err)
        }
        FS.currentPath = lookup.path
    }),
    createDefaultDirectories: (function() {
        FS.mkdir("/tmp");
        FS.mkdir("/home");
        FS.mkdir("/home/web_user")
    }),
    createDefaultDevices: (function() {
        FS.mkdir("/dev");
        FS.registerDevice(FS.makedev(1, 3), {
            read: (function() {
                return 0
            }),
            write: (function() {
                return 0
            })
        });
        FS.mkdev("/dev/null", FS.makedev(1, 3));
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev("/dev/tty", FS.makedev(5, 0));
        FS.mkdev("/dev/tty1", FS.makedev(6, 0));
        var random_device;
        if (typeof crypto !== "undefined") {
            var randomBuffer = new Uint8Array(1);
            random_device = (function() {
                crypto.getRandomValues(randomBuffer);
                return randomBuffer[0]
            })
        } else {
            random_device = (function() {
                return Math.random() * 256 | 0
            })
        }
        FS.createDevice("/dev", "random", random_device);
        FS.createDevice("/dev", "urandom", random_device);
        FS.mkdir("/dev/shm");
        FS.mkdir("/dev/shm/tmp")
    }),
    createStandardStreams: (function() {
        if (VimModule["stdin"]) {
            FS.createDevice("/dev", "stdin", VimModule["stdin"])
        } else {
            FS.symlink("/dev/tty", "/dev/stdin")
        }
        if (VimModule["stdout"]) {
            FS.createDevice("/dev", "stdout", null, VimModule["stdout"])
        } else {
            FS.symlink("/dev/tty", "/dev/stdout")
        }
        if (VimModule["stderr"]) {
            FS.createDevice("/dev", "stderr", null, VimModule["stderr"])
        } else {
            FS.symlink("/dev/tty1", "/dev/stderr")
        }
        var stdin = FS.open("/dev/stdin", "r");
        HEAP32[_stdin >> 2] = FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
        var stdout = FS.open("/dev/stdout", "w");
        HEAP32[_stdout >> 2] = FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
        var stderr = FS.open("/dev/stderr", "w");
        HEAP32[_stderr >> 2] = FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")")
    }),
    ensureErrnoError: (function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
            this.node = node;
            this.setErrno = (function(errno) {
                this.errno = errno;
                for (var key in ERRNO_CODES) {
                    if (ERRNO_CODES[key] === errno) {
                        this.code = key;
                        break
                    }
                }
            });
            this.setErrno(errno);
            this.message = ERRNO_MESSAGES[errno]
        };
        FS.ErrnoError.prototype = new Error;
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        [ERRNO_CODES.ENOENT].forEach((function(code) {
            FS.genericErrors[code] = new FS.ErrnoError(code);
            FS.genericErrors[code].stack = "<generic error, no stack>"
        }))
    }),
    staticInit: (function() {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.mount(MEMFS, {}, "/");
        FS.createDefaultDirectories();
        FS.createDefaultDevices()
    }),
    init: (function(input, output, error) {
        assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
        FS.init.initialized = true;
        FS.ensureErrnoError();
        VimModule["stdin"] = input || VimModule["stdin"];
        VimModule["stdout"] = output || VimModule["stdout"];
        VimModule["stderr"] = error || VimModule["stderr"];
        FS.createStandardStreams()
    }),
    quit: (function() {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
            var stream = FS.streams[i];
            if (!stream) {
                continue
            }
            FS.close(stream)
        }
    }),
    getMode: (function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode
    }),
    joinPath: (function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == "/") path = path.substr(1);
        return path
    }),
    absolutePath: (function(relative, base) {
        return PATH.resolve(base, relative)
    }),
    standardizePath: (function(path) {
        return PATH.normalize(path)
    }),
    findObject: (function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
            return ret.object
        } else {
            ___setErrNo(ret.error);
            return null
        }
    }),
    analyzePath: (function(path, dontResolveLastLink) {
        try {
            var lookup = FS.lookupPath(path, {
                follow: !dontResolveLastLink
            });
            path = lookup.path
        } catch (e) {}
        var ret = {
            isRoot: false,
            exists: false,
            error: 0,
            name: null,
            path: null,
            object: null,
            parentExists: false,
            parentPath: null,
            parentObject: null
        };
        try {
            var lookup = FS.lookupPath(path, {
                parent: true
            });
            ret.parentExists = true;
            ret.parentPath = lookup.path;
            ret.parentObject = lookup.node;
            ret.name = PATH.basename(path);
            lookup = FS.lookupPath(path, {
                follow: !dontResolveLastLink
            });
            ret.exists = true;
            ret.path = lookup.path;
            ret.object = lookup.node;
            ret.name = lookup.node.name;
            ret.isRoot = lookup.path === "/"
        } catch (e) {
            ret.error = e.errno
        }
        return ret
    }),
    createFolder: (function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode)
    }),
    createPath: (function(parent, path, canRead, canWrite) {
        parent = typeof parent === "string" ? parent : FS.getPath(parent);
        var parts = path.split("/").reverse();
        while (parts.length) {
            var part = parts.pop();
            if (!part) continue;
            var current = PATH.join2(parent, part);
            try {
                FS.mkdir(current)
            } catch (e) {}
            parent = current
        }
        return current
    }),
    createFile: (function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode)
    }),
    createDataFile: (function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
            if (typeof data === "string") {
                var arr = new Array(data.length);
                for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
                data = arr
            }
            FS.chmod(node, mode | 146);
            var stream = FS.open(node, "w");
            FS.write(stream, data, 0, data.length, 0, canOwn);
            FS.close(stream);
            FS.chmod(node, mode)
        }
        return node
    }),
    createDevice: (function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        FS.registerDevice(dev, {
            open: (function(stream) {
                stream.seekable = false
            }),
            close: (function(stream) {
                if (output && output.buffer && output.buffer.length) {
                    output(10)
                }
            }),
            read: (function(stream, buffer, offset, length, pos) {
                var bytesRead = 0;
                for (var i = 0; i < length; i++) {
                    var result;
                    try {
                        result = input()
                    } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO)
                    }
                    if (result === undefined && bytesRead === 0) {
                        throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
                    }
                    if (result === null || result === undefined) break;
                    bytesRead++;
                    buffer[offset + i] = result
                }
                if (bytesRead) {
                    stream.node.timestamp = Date.now()
                }
                return bytesRead
            }),
            write: (function(stream, buffer, offset, length, pos) {
                for (var i = 0; i < length; i++) {
                    try {
                        output(buffer[offset + i])
                    } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO)
                    }
                }
                if (length) {
                    stream.node.timestamp = Date.now()
                }
                return i
            })
        });
        return FS.mkdev(path, mode, dev)
    }),
    createLink: (function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path)
    }),
    forceLoadFile: (function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== "undefined") {
            throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")
        } else if (VimModule["read"]) {
            try {
                obj.contents = intArrayFromString(VimModule["read"](obj.url), true);
                obj.usedBytes = obj.contents.length
            } catch (e) {
                success = false
            }
        } else {
            throw new Error("Cannot load without read() or XMLHttpRequest.")
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success
    }),
    createLazyFile: (function(parent, name, url, canRead, canWrite) {
        function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length - 1 || idx < 0) {
                return undefined
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = idx / this.chunkSize | 0;
            return this.getter(chunkNum)[chunkOffset]
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            var xhr = new XMLHttpRequest;
            xhr.open("HEAD", url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024 * 1024;
            if (!hasByteServing) chunkSize = datalength;
            var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
                var xhr = new XMLHttpRequest;
                xhr.open("GET", url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
                if (xhr.overrideMimeType) {
                    xhr.overrideMimeType("text/plain; charset=x-user-defined")
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                    return new Uint8Array(xhr.response || [])
                } else {
                    return intArrayFromString(xhr.responseText || "", true)
                }
            });
            var lazyArray = this;
            lazyArray.setDataGetter((function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum + 1) * chunkSize - 1;
                end = Math.min(end, datalength - 1);
                if (typeof lazyArray.chunks[chunkNum] === "undefined") {
                    lazyArray.chunks[chunkNum] = doXHR(start, end)
                }
                if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum]
            }));
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true
        };
        if (typeof XMLHttpRequest !== "undefined") {
            if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
            var lazyArray = new LazyUint8Array;
            Object.defineProperty(lazyArray, "length", {
                get: (function() {
                    if (!this.lengthKnown) {
                        this.cacheLength()
                    }
                    return this._length
                })
            });
            Object.defineProperty(lazyArray, "chunkSize", {
                get: (function() {
                    if (!this.lengthKnown) {
                        this.cacheLength()
                    }
                    return this._chunkSize
                })
            });
            var properties = {
                isDevice: false,
                contents: lazyArray
            }
        } else {
            var properties = {
                isDevice: false,
                url: url
            }
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        if (properties.contents) {
            node.contents = properties.contents
        } else if (properties.url) {
            node.contents = null;
            node.url = properties.url
        }
        Object.defineProperty(node, "usedBytes", {
            get: (function() {
                return this.contents.length
            })
        });
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((function(key) {
            var fn = node.stream_ops[key];
            stream_ops[key] = function forceLoadLazyFile() {
                if (!FS.forceLoadFile(node)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO)
                }
                return fn.apply(null, arguments)
            }
        }));
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
            if (!FS.forceLoadFile(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO)
            }
            var contents = stream.node.contents;
            if (position >= contents.length) return 0;
            var size = Math.min(contents.length - position, length);
            assert(size >= 0, "size >= 0");
            if (contents.slice) {
                for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents[position + i]
                }
            } else {
                for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents.get(position + i)
                }
            }
            return size
        };
        node.stream_ops = stream_ops;
        return node
    }),
    createPreloadedFile: (function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;

        function processData(byteArray) {
            function finish(byteArray) {
                if (!dontCreateFile) {
                    FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn)
                }
                if (onload) onload();
                removeRunDependency("cp " + fullname)
            }
            var handled = false;
            VimModule["preloadPlugins"].forEach((function(plugin) {
                if (handled) return;
                if (plugin["canHandle"](fullname)) {
                    plugin["handle"](byteArray, fullname, finish, (function() {
                        if (onerror) onerror();
                        removeRunDependency("cp " + fullname)
                    }));
                    handled = true
                }
            }));
            if (!handled) finish(byteArray)
        }
        addRunDependency("cp " + fullname);
        if (typeof url == "string") {
            Browser.asyncLoad(url, (function(byteArray) {
                processData(byteArray)
            }), onerror)
        } else {
            processData(url)
        }
    }),
    indexedDB: (function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB
    }),
    DB_NAME: (function() {
        return "EM_FS_" + window.location.pathname
    }),
    DB_VERSION: 20,
    DB_STORE_NAME: "FILE_DATA",
    saveFilesToDB: (function(paths, onload, onerror) {
        onload = onload || (function() {});
        onerror = onerror || (function() {});
        var indexedDB = FS.indexedDB();
        try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION)
        } catch (e) {
            return onerror(e)
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
            console.log("creating db");
            var db = openRequest.result;
            db.createObjectStore(FS.DB_STORE_NAME)
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0,
                fail = 0,
                total = paths.length;

            function finish() {
                if (fail == 0) onload();
                else onerror()
            }
            paths.forEach((function(path) {
                var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                putRequest.onsuccess = function putRequest_onsuccess() {
                    ok++;
                    if (ok + fail == total) finish()
                };
                putRequest.onerror = function putRequest_onerror() {
                    fail++;
                    if (ok + fail == total) finish()
                }
            }));
            transaction.onerror = onerror
        };
        openRequest.onerror = onerror
    }),
    loadFilesFromDB: (function(paths, onload, onerror) {
        onload = onload || (function() {});
        onerror = onerror || (function() {});
        var indexedDB = FS.indexedDB();
        try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION)
        } catch (e) {
            return onerror(e)
        }
        openRequest.onupgradeneeded = onerror;
        openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            try {
                var transaction = db.transaction([FS.DB_STORE_NAME], "readonly")
            } catch (e) {
                onerror(e);
                return
            }
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0,
                fail = 0,
                total = paths.length;

            function finish() {
                if (fail == 0) onload();
                else onerror()
            }
            paths.forEach((function(path) {
                var getRequest = files.get(path);
                getRequest.onsuccess = function getRequest_onsuccess() {
                    if (FS.analyzePath(path).exists) {
                        FS.unlink(path)
                    }
                    FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                    ok++;
                    if (ok + fail == total) finish()
                };
                getRequest.onerror = function getRequest_onerror() {
                    fail++;
                    if (ok + fail == total) finish()
                }
            }));
            transaction.onerror = onerror
        };
        openRequest.onerror = onerror
    })
};

function _lseek(fildes, offset, whence) {
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    try {
        return FS.llseek(stream, offset, whence)
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _fileno(stream) {
    stream = FS.getStreamFromPtr(stream);
    if (!stream) return -1;
    return stream.fd
}

function _fseek(stream, offset, whence) {
    var fd = _fileno(stream);
    var ret = _lseek(fd, offset, whence);
    if (ret == -1) {
        return -1
    }
    stream = FS.getStreamFromPtr(stream);
    stream.eof = false;
    return 0
}
VimModule["_i64Subtract"] = _i64Subtract;
VimModule["_i64Add"] = _i64Add;
var LOCALE = {
    curr: 0,
    check: (function(locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === "C" || locale === "POSIX" || !locale
    })
};

function _setlocale(category, locale) {
    if (LOCALE.check(locale)) {
        if (!_setlocale.ret) _setlocale.ret = allocate(intArrayFromString("C"), "i8", ALLOC_NORMAL);
        return _setlocale.ret
    }
    return 0
}

function _close(fildes) {
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    try {
        FS.close(stream);
        return 0
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _fsync(fildes) {
    var stream = FS.getStream(fildes);
    if (stream) {
        return 0
    } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
}

function _fclose(stream) {
    var fd = _fileno(stream);
    _fsync(fd);
    return _close(fd)
}

function _chmod(path, mode, dontResolveLastLink) {
    path = typeof path !== "string" ? Pointer_stringify(path) : path;
    try {
        FS.chmod(path, mode);
        return 0
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _sync() {}

function _uname(name) {
    var layout = {
        "sysname": 0,
        "nodename": 65,
        "domainname": 325,
        "machine": 260,
        "version": 195,
        "release": 130,
        "__size__": 390
    };

    function copyString(element, value) {
        var offset = layout[element];
        writeAsciiToMemory(value, name + offset)
    }
    if (name === 0) {
        return -1
    } else {
        copyString("sysname", "Emscripten");
        copyString("nodename", "emscripten");
        copyString("release", "1.0");
        copyString("version", "#1");
        copyString("machine", "x86-JS");
        return 0
    }
}

function _kill(pid, sig) {
    VimModule.printErr("Calling stub instead of kill()");
    ___setErrNo(ERRNO_CODES.EPERM);
    return -1
}

function _mkport() {
    throw "TODO"
}
var SOCKFS = {
    mount: (function(mount) {
        VimModule["websocket"] = VimModule["websocket"] && "object" === typeof VimModule["websocket"] ? VimModule["websocket"] : {};
        VimModule["websocket"]._callbacks = {};
        VimModule["websocket"]["on"] = (function(event, callback) {
            if ("function" === typeof callback) {
                this._callbacks[event] = callback
            }
            return this
        });
        VimModule["websocket"].emit = (function(event, param) {
            if ("function" === typeof this._callbacks[event]) {
                this._callbacks[event].call(this, param)
            }
        });
        return FS.createNode(null, "/", 16384 | 511, 0)
    }),
    createSocket: (function(family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
            assert(streaming == (protocol == 6), "streaming == (protocol == 6)")
        }
        var sock = {
            family: family,
            type: type,
            protocol: protocol,
            server: null,
            error: null,
            peers: {},
            pending: [],
            recv_queue: [],
            sock_ops: SOCKFS.websocket_sock_ops
        };
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        var stream = FS.createStream({
            path: name,
            node: node,
            flags: FS.modeStringToFlags("r+"),
            seekable: false,
            stream_ops: SOCKFS.stream_ops
        });
        sock.stream = stream;
        return sock
    }),
    getSocket: (function(fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
            return null
        }
        return stream.node.sock
    }),
    stream_ops: {
        poll: (function(stream) {
            var sock = stream.node.sock;
            return sock.sock_ops.poll(sock)
        }),
        ioctl: (function(stream, request, varargs) {
            var sock = stream.node.sock;
            return sock.sock_ops.ioctl(sock, request, varargs)
        }),
        read: (function(stream, buffer, offset, length, position) {
            var sock = stream.node.sock;
            var msg = sock.sock_ops.recvmsg(sock, length);
            if (!msg) {
                return 0
            }
            buffer.set(msg.buffer, offset);
            return msg.buffer.length
        }),
        write: (function(stream, buffer, offset, length, position) {
            var sock = stream.node.sock;
            return sock.sock_ops.sendmsg(sock, buffer, offset, length)
        }),
        close: (function(stream) {
            var sock = stream.node.sock;
            sock.sock_ops.close(sock)
        })
    },
    nextname: (function() {
        if (!SOCKFS.nextname.current) {
            SOCKFS.nextname.current = 0
        }
        return "socket[" + SOCKFS.nextname.current++ + "]"
    }),
    websocket_sock_ops: {
        createPeer: (function(sock, addr, port) {
            var ws;
            if (typeof addr === "object") {
                ws = addr;
                addr = null;
                port = null
            }
            if (ws) {
                if (ws._socket) {
                    addr = ws._socket.remoteAddress;
                    port = ws._socket.remotePort
                } else {
                    var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
                    if (!result) {
                        throw new Error("WebSocket URL must be in the format ws(s)://address:port")
                    }
                    addr = result[1];
                    port = parseInt(result[2], 10)
                }
            } else {
                try {
                    var runtimeConfig = VimModule["websocket"] && "object" === typeof VimModule["websocket"];
                    var url = "ws:#".replace("#", "//");
                    if (runtimeConfig) {
                        if ("string" === typeof VimModule["websocket"]["url"]) {
                            url = VimModule["websocket"]["url"]
                        }
                    }
                    if (url === "ws://" || url === "wss://") {
                        var parts = addr.split("/");
                        url = url + parts[0] + ":" + port + "/" + parts.slice(1).join("/")
                    }
                    var subProtocols = "binary";
                    if (runtimeConfig) {
                        if ("string" === typeof VimModule["websocket"]["subprotocol"]) {
                            subProtocols = VimModule["websocket"]["subprotocol"]
                        }
                    }
                    subProtocols = subProtocols.replace(/^ +| +$/g, "").split(/ *, */);
                    var opts = subProtocols;
                    var WebSocket = window["WebSocket"];
                    ws = new WebSocket(url, opts);
                    ws.binaryType = "arraybuffer"
                } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH)
                }
            }
            var peer = {
                addr: addr,
                port: port,
                socket: ws,
                dgram_send_queue: []
            };
            SOCKFS.websocket_sock_ops.addPeer(sock, peer);
            SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
            if (sock.type === 2 && typeof sock.sport !== "undefined") {
                peer.dgram_send_queue.push(new Uint8Array([255, 255, 255, 255, "p".charCodeAt(0), "o".charCodeAt(0), "r".charCodeAt(0), "t".charCodeAt(0), (sock.sport & 65280) >> 8, sock.sport & 255]))
            }
            return peer
        }),
        getPeer: (function(sock, addr, port) {
            return sock.peers[addr + ":" + port]
        }),
        addPeer: (function(sock, peer) {
            sock.peers[peer.addr + ":" + peer.port] = peer
        }),
        removePeer: (function(sock, peer) {
            delete sock.peers[peer.addr + ":" + peer.port]
        }),
        handlePeerEvents: (function(sock, peer) {
            var first = true;
            var handleOpen = (function() {
                VimModule["websocket"].emit("open", sock.stream.fd);
                try {
                    var queued = peer.dgram_send_queue.shift();
                    while (queued) {
                        peer.socket.send(queued);
                        queued = peer.dgram_send_queue.shift()
                    }
                } catch (e) {
                    peer.socket.close()
                }
            });

            function handleMessage(data) {
                assert(typeof data !== "string" && data.byteLength !== undefined, "typeof data !== \"string\" && data.byteLength !== undefined");
                data = new Uint8Array(data);
                var wasfirst = first;
                first = false;
                if (wasfirst && data.length === 10 && data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 && data[4] === "p".charCodeAt(0) && data[5] === "o".charCodeAt(0) && data[6] === "r".charCodeAt(0) && data[7] === "t".charCodeAt(0)) {
                    var newport = data[8] << 8 | data[9];
                    SOCKFS.websocket_sock_ops.removePeer(sock, peer);
                    peer.port = newport;
                    SOCKFS.websocket_sock_ops.addPeer(sock, peer);
                    return
                }
                sock.recv_queue.push({
                    addr: peer.addr,
                    port: peer.port,
                    data: data
                });
                VimModule["websocket"].emit("message", sock.stream.fd)
            }
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = (function() {
                VimModule["websocket"].emit("close", sock.stream.fd)
            });
            peer.socket.onmessage = function peer_socket_onmessage(event) {
                handleMessage(event.data)
            };
            peer.socket.onerror = (function(error) {
                sock.error = ERRNO_CODES.ECONNREFUSED;
                VimModule["websocket"].emit("error", [sock.stream.fd, sock.error, "ECONNREFUSED: Connection refused"])
            })
        }),
        poll: (function(sock) {
            if (sock.type === 1 && sock.server) {
                return sock.pending.length ? 64 | 1 : 0
            }
            var mask = 0;
            var dest = sock.type === 1 ? SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) : null;
            if (sock.recv_queue.length || !dest || dest && dest.socket.readyState === dest.socket.CLOSING || dest && dest.socket.readyState === dest.socket.CLOSED) {
                mask |= 64 | 1
            }
            if (!dest || dest && dest.socket.readyState === dest.socket.OPEN) {
                mask |= 4
            }
            if (dest && dest.socket.readyState === dest.socket.CLOSING || dest && dest.socket.readyState === dest.socket.CLOSED) {
                mask |= 16
            }
            return mask
        }),
        ioctl: (function(sock, request, arg) {
            switch (request) {
                case 21531:
                    var bytes = 0;
                    if (sock.recv_queue.length) {
                        bytes = sock.recv_queue[0].data.length
                    }
                    HEAP32[arg >> 2] = bytes;
                    return 0;
                default:
                    return ERRNO_CODES.EINVAL
            }
        }),
        close: (function(sock) {
            if (sock.server) {
                try {
                    sock.server.close()
                } catch (e) {}
                sock.server = null
            }
            var peers = Object.keys(sock.peers);
            for (var i = 0; i < peers.length; i++) {
                var peer = sock.peers[peers[i]];
                try {
                    peer.socket.close()
                } catch (e) {}
                SOCKFS.websocket_sock_ops.removePeer(sock, peer)
            }
            return 0
        }),
        bind: (function(sock, addr, port) {
            if (typeof sock.saddr !== "undefined" || typeof sock.sport !== "undefined") {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            sock.saddr = addr;
            sock.sport = port || _mkport();
            if (sock.type === 2) {
                if (sock.server) {
                    sock.server.close();
                    sock.server = null
                }
                try {
                    sock.sock_ops.listen(sock, 0)
                } catch (e) {
                    if (!(e instanceof FS.ErrnoError)) throw e;
                    if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e
                }
            }
        }),
        connect: (function(sock, addr, port) {
            if (sock.server) {
                throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)
            }
            if (typeof sock.daddr !== "undefined" && typeof sock.dport !== "undefined") {
                var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
                if (dest) {
                    if (dest.socket.readyState === dest.socket.CONNECTING) {
                        throw new FS.ErrnoError(ERRNO_CODES.EALREADY)
                    } else {
                        throw new FS.ErrnoError(ERRNO_CODES.EISCONN)
                    }
                }
            }
            var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
            sock.daddr = peer.addr;
            sock.dport = peer.port;
            throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS)
        }),
        listen: (function(sock, backlog) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)
        }),
        accept: (function(listensock) {
            if (!listensock.server) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            var newsock = listensock.pending.shift();
            newsock.stream.flags = listensock.stream.flags;
            return newsock
        }),
        getname: (function(sock, peer) {
            var addr, port;
            if (peer) {
                if (sock.daddr === undefined || sock.dport === undefined) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)
                }
                addr = sock.daddr;
                port = sock.dport
            } else {
                addr = sock.saddr || 0;
                port = sock.sport || 0
            }
            return {
                addr: addr,
                port: port
            }
        }),
        sendmsg: (function(sock, buffer, offset, length, addr, port) {
            if (sock.type === 2) {
                if (addr === undefined || port === undefined) {
                    addr = sock.daddr;
                    port = sock.dport
                }
                if (addr === undefined || port === undefined) {
                    throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ)
                }
            } else {
                addr = sock.daddr;
                port = sock.dport
            }
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
            if (sock.type === 1) {
                if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)
                } else if (dest.socket.readyState === dest.socket.CONNECTING) {
                    throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
                }
            }
            var data;
            if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
                data = buffer.slice(offset, offset + length)
            } else {
                data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length)
            }
            if (sock.type === 2) {
                if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
                    if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                        dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port)
                    }
                    dest.dgram_send_queue.push(data);
                    return length
                }
            }
            try {
                dest.socket.send(data);
                return length
            } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
        }),
        recvmsg: (function(sock, length) {
            if (sock.type === 1 && sock.server) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)
            }
            var queued = sock.recv_queue.shift();
            if (!queued) {
                if (sock.type === 1) {
                    var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
                    if (!dest) {
                        throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)
                    } else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                        return null
                    } else {
                        throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
                    }
                } else {
                    throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
                }
            }
            var queuedLength = queued.data.byteLength || queued.data.length;
            var queuedOffset = queued.data.byteOffset || 0;
            var queuedBuffer = queued.data.buffer || queued.data;
            var bytesRead = Math.min(length, queuedLength);
            var res = {
                buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
                addr: queued.addr,
                port: queued.port
            };
            if (sock.type === 1 && bytesRead < queuedLength) {
                var bytesRemaining = queuedLength - bytesRead;
                queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
                sock.recv_queue.unshift(queued)
            }
            return res
        })
    }
};

function _send(fd, buf, len, flags) {
    var sock = SOCKFS.getSocket(fd);
    if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    return _write(fd, buf, len)
}

function _pwrite(fildes, buf, nbyte, offset) {
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset)
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _write(fildes, buf, nbyte) {
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte)
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _fwrite(ptr, size, nitems, stream) {
    var bytesToWrite = nitems * size;
    if (bytesToWrite == 0) return 0;
    var fd = _fileno(stream);
    var bytesWritten = _write(fd, ptr, bytesToWrite);
    if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0
    } else {
        return bytesWritten / size | 0
    }
}
VimModule["_strlen"] = _strlen;

function __reallyNegative(x) {
    return x < 0 || x === 0 && 1 / x === -Infinity
}

function __formatString(format, varargs) {
    var textIndex = format;
    var argIndex = 0;

    function getNextArg(type) {
        var ret;
        if (type === "double") {
            ret = (HEAP32[tempDoublePtr >> 2] = HEAP32[varargs + argIndex >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[varargs + (argIndex + 4) >> 2], +HEAPF64[tempDoublePtr >> 3])
        } else if (type == "i64") {
            ret = [HEAP32[varargs + argIndex >> 2], HEAP32[varargs + (argIndex + 4) >> 2]]
        } else {
            type = "i32";
            ret = HEAP32[varargs + argIndex >> 2]
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret
    }
    var ret = [];
    var curr, next, currArg;
    while (1) {
        var startTextIndex = textIndex;
        curr = HEAP8[textIndex >> 0];
        if (curr === 0) break;
        next = HEAP8[textIndex + 1 >> 0];
        if (curr == 37) {
            var flagAlwaysSigned = false;
            var flagLeftAlign = false;
            var flagAlternative = false;
            var flagZeroPad = false;
            var flagPadSign = false;
            flagsLoop: while (1) {
                switch (next) {
                    case 43:
                        flagAlwaysSigned = true;
                        break;
                    case 45:
                        flagLeftAlign = true;
                        break;
                    case 35:
                        flagAlternative = true;
                        break;
                    case 48:
                        if (flagZeroPad) {
                            break flagsLoop
                        } else {
                            flagZeroPad = true;
                            break
                        };
                    case 32:
                        flagPadSign = true;
                        break;
                    default:
                        break flagsLoop
                }
                textIndex++;
                next = HEAP8[textIndex + 1 >> 0]
            }
            var width = 0;
            if (next == 42) {
                width = getNextArg("i32");
                textIndex++;
                next = HEAP8[textIndex + 1 >> 0]
            } else {
                while (next >= 48 && next <= 57) {
                    width = width * 10 + (next - 48);
                    textIndex++;
                    next = HEAP8[textIndex + 1 >> 0]
                }
            }
            var precisionSet = false,
                precision = -1;
            if (next == 46) {
                precision = 0;
                precisionSet = true;
                textIndex++;
                next = HEAP8[textIndex + 1 >> 0];
                if (next == 42) {
                    precision = getNextArg("i32");
                    textIndex++
                } else {
                    while (1) {
                        var precisionChr = HEAP8[textIndex + 1 >> 0];
                        if (precisionChr < 48 || precisionChr > 57) break;
                        precision = precision * 10 + (precisionChr - 48);
                        textIndex++
                    }
                }
                next = HEAP8[textIndex + 1 >> 0]
            }
            if (precision < 0) {
                precision = 6;
                precisionSet = false
            }
            var argSize;
            switch (String.fromCharCode(next)) {
                case "h":
                    var nextNext = HEAP8[textIndex + 2 >> 0];
                    if (nextNext == 104) {
                        textIndex++;
                        argSize = 1
                    } else {
                        argSize = 2
                    }
                    break;
                case "l":
                    var nextNext = HEAP8[textIndex + 2 >> 0];
                    if (nextNext == 108) {
                        textIndex++;
                        argSize = 8
                    } else {
                        argSize = 4
                    }
                    break;
                case "L":
                case "q":
                case "j":
                    argSize = 8;
                    break;
                case "z":
                case "t":
                case "I":
                    argSize = 4;
                    break;
                default:
                    argSize = null
            }
            if (argSize) textIndex++;
            next = HEAP8[textIndex + 1 >> 0];
            switch (String.fromCharCode(next)) {
                case "d":
                case "i":
                case "u":
                case "o":
                case "x":
                case "X":
                case "p": {
                    var signed = next == 100 || next == 105;
                    argSize = argSize || 4;
                    var currArg = getNextArg("i" + argSize * 8);
                    var origArg = currArg;
                    var argText;
                    if (argSize == 8) {
                        currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117)
                    }
                    if (argSize <= 4) {
                        var limit = Math.pow(256, argSize) - 1;
                        currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8)
                    }
                    var currAbsArg = Math.abs(currArg);
                    var prefix = "";
                    if (next == 100 || next == 105) {
                        if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null);
                        else argText = reSign(currArg, 8 * argSize, 1).toString(10)
                    } else if (next == 117) {
                        if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true);
                        else argText = unSign(currArg, 8 * argSize, 1).toString(10);
                        currArg = Math.abs(currArg)
                    } else if (next == 111) {
                        argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8)
                    } else if (next == 120 || next == 88) {
                        prefix = flagAlternative && currArg != 0 ? "0x" : "";
                        if (argSize == 8 && i64Math) {
                            if (origArg[1]) {
                                argText = (origArg[1] >>> 0).toString(16);
                                var lower = (origArg[0] >>> 0).toString(16);
                                while (lower.length < 8) lower = "0" + lower;
                                argText += lower
                            } else {
                                argText = (origArg[0] >>> 0).toString(16)
                            }
                        } else if (currArg < 0) {
                            currArg = -currArg;
                            argText = (currAbsArg - 1).toString(16);
                            var buffer = [];
                            for (var i = 0; i < argText.length; i++) {
                                buffer.push((15 - parseInt(argText[i], 16)).toString(16))
                            }
                            argText = buffer.join("");
                            while (argText.length < argSize * 2) argText = "f" + argText
                        } else {
                            argText = currAbsArg.toString(16)
                        }
                        if (next == 88) {
                            prefix = prefix.toUpperCase();
                            argText = argText.toUpperCase()
                        }
                    } else if (next == 112) {
                        if (currAbsArg === 0) {
                            argText = "(nil)"
                        } else {
                            prefix = "0x";
                            argText = currAbsArg.toString(16)
                        }
                    }
                    if (precisionSet) {
                        while (argText.length < precision) {
                            argText = "0" + argText
                        }
                    }
                    if (currArg >= 0) {
                        if (flagAlwaysSigned) {
                            prefix = "+" + prefix
                        } else if (flagPadSign) {
                            prefix = " " + prefix
                        }
                    }
                    if (argText.charAt(0) == "-") {
                        prefix = "-" + prefix;
                        argText = argText.substr(1)
                    }
                    while (prefix.length + argText.length < width) {
                        if (flagLeftAlign) {
                            argText += " "
                        } else {
                            if (flagZeroPad) {
                                argText = "0" + argText
                            } else {
                                prefix = " " + prefix
                            }
                        }
                    }
                    argText = prefix + argText;
                    argText.split("").forEach((function(chr) {
                        ret.push(chr.charCodeAt(0))
                    }));
                    break
                };
                case "f":
                case "F":
                case "e":
                case "E":
                case "g":
                case "G": {
                    var currArg = getNextArg("double");
                    var argText;
                    if (isNaN(currArg)) {
                        argText = "nan";
                        flagZeroPad = false
                    } else if (!isFinite(currArg)) {
                        argText = (currArg < 0 ? "-" : "") + "inf";
                        flagZeroPad = false
                    } else {
                        var isGeneral = false;
                        var effectivePrecision = Math.min(precision, 20);
                        if (next == 103 || next == 71) {
                            isGeneral = true;
                            precision = precision || 1;
                            var exponent = parseInt(currArg.toExponential(effectivePrecision).split("e")[1], 10);
                            if (precision > exponent && exponent >= -4) {
                                next = (next == 103 ? "f" : "F").charCodeAt(0);
                                precision -= exponent + 1
                            } else {
                                next = (next == 103 ? "e" : "E").charCodeAt(0);
                                precision--
                            }
                            effectivePrecision = Math.min(precision, 20)
                        }
                        if (next == 101 || next == 69) {
                            argText = currArg.toExponential(effectivePrecision);
                            if (/[eE][-+]\d$/.test(argText)) {
                                argText = argText.slice(0, -1) + "0" + argText.slice(-1)
                            }
                        } else if (next == 102 || next == 70) {
                            argText = currArg.toFixed(effectivePrecision);
                            if (currArg === 0 && __reallyNegative(currArg)) {
                                argText = "-" + argText
                            }
                        }
                        var parts = argText.split("e");
                        if (isGeneral && !flagAlternative) {
                            while (parts[0].length > 1 && parts[0].indexOf(".") != -1 && (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")) {
                                parts[0] = parts[0].slice(0, -1)
                            }
                        } else {
                            if (flagAlternative && argText.indexOf(".") == -1) parts[0] += ".";
                            while (precision > effectivePrecision++) parts[0] += "0"
                        }
                        argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");
                        if (next == 69) argText = argText.toUpperCase();
                        if (currArg >= 0) {
                            if (flagAlwaysSigned) {
                                argText = "+" + argText
                            } else if (flagPadSign) {
                                argText = " " + argText
                            }
                        }
                    }
                    while (argText.length < width) {
                        if (flagLeftAlign) {
                            argText += " "
                        } else {
                            if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
                                argText = argText[0] + "0" + argText.slice(1)
                            } else {
                                argText = (flagZeroPad ? "0" : " ") + argText
                            }
                        }
                    }
                    if (next < 97) argText = argText.toUpperCase();
                    argText.split("").forEach((function(chr) {
                        ret.push(chr.charCodeAt(0))
                    }));
                    break
                };
                case "s": {
                    var arg = getNextArg("i8*");
                    var argLength = arg ? _strlen(arg) : "(null)".length;
                    if (precisionSet) argLength = Math.min(argLength, precision);
                    if (!flagLeftAlign) {
                        while (argLength < width--) {
                            ret.push(32)
                        }
                    }
                    if (arg) {
                        for (var i = 0; i < argLength; i++) {
                            ret.push(HEAPU8[arg++ >> 0])
                        }
                    } else {
                        ret = ret.concat(intArrayFromString("(null)".substr(0, argLength), true))
                    }
                    if (flagLeftAlign) {
                        while (argLength < width--) {
                            ret.push(32)
                        }
                    }
                    break
                };
                case "c": {
                    if (flagLeftAlign) ret.push(getNextArg("i8"));
                    while (--width > 0) {
                        ret.push(32)
                    }
                    if (!flagLeftAlign) ret.push(getNextArg("i8"));
                    break
                };
                case "n": {
                    var ptr = getNextArg("i32*");
                    HEAP32[ptr >> 2] = ret.length;
                    break
                };
                case "%": {
                    ret.push(curr);
                    break
                };
                default: {
                    for (var i = startTextIndex; i < textIndex + 2; i++) {
                        ret.push(HEAP8[i >> 0])
                    }
                }
            }
            textIndex += 2
        } else {
            ret.push(curr);
            textIndex += 1
        }
    }
    return ret
}

function _fprintf(stream, format, varargs) {
    var result = __formatString(format, varargs);
    var stack = Runtime.stackSave();
    var ret = _fwrite(allocate(result, "i8", ALLOC_STACK), 1, result.length, stream);
    Runtime.stackRestore(stack);
    return ret
}

function _printf(format, varargs) {
    var stdout = HEAP32[_stdout >> 2];
    return _fprintf(stdout, format, varargs)
}
var ___DEFAULT_POLLMASK = 5;

function _poll(fds, nfds, timeout) {
    var nonzero = 0;
    for (var i = 0; i < nfds; i++) {
        var pollfd = fds + 8 * i;
        var fd = HEAP32[pollfd >> 2];
        var events = HEAP16[pollfd + 4 >> 1];
        var mask = 32;
        var stream = FS.getStream(fd);
        if (stream) {
            mask = ___DEFAULT_POLLMASK;
            if (stream.stream_ops.poll) {
                mask = stream.stream_ops.poll(stream)
            }
        }
        mask &= events | 8 | 16;
        if (mask) nonzero++;
        HEAP16[pollfd + 6 >> 1] = mask
    }
    return nonzero
}

function _open(path, oflag, varargs) {
    var mode = HEAP32[varargs >> 2];
    path = Pointer_stringify(path);
    try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _vimjs_draw_hollow_cursor(row, col) {
    var ctx = vimjs.canvas_ctx;
    if (!ctx) return;
    ctx.strokeStyle = vimjs.fg_color;
    var cw = vimjs.char_width;
    var ch = vimjs.char_height;
    ctx.strokeRect(col * cw + .5, row * ch + .5, cw - 1, ch - 1)
}
VimModule["_strncpy"] = _strncpy;

function _fputc(c, stream) {
    var chr = unSign(c & 255);
    HEAP8[_fputc.ret >> 0] = chr;
    var fd = _fileno(stream);
    var ret = _write(fd, _fputc.ret, 1);
    if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1
    } else {
        return chr
    }
}

function _unlink(path) {
    path = Pointer_stringify(path);
    try {
        FS.unlink(path);
        return 0
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _fdopen(fildes, mode) {
    mode = Pointer_stringify(mode);
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0
    }
    if (mode.indexOf("w") != -1 && !stream.isWrite || mode.indexOf("r") != -1 && !stream.isRead || mode.indexOf("a") != -1 && !stream.isAppend || mode.indexOf("+") != -1 && (!stream.isRead || !stream.isWrite)) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0
    } else {
        stream.error = false;
        stream.eof = false;
        return FS.getPtrForStream(stream)
    }
}

function _mknod(path, mode, dev) {
    path = Pointer_stringify(path);
    switch (mode & 61440) {
        case 32768:
        case 8192:
        case 24576:
        case 4096:
        case 49152:
            break;
        default:
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1
    }
    try {
        FS.mknod(path, mode, dev);
        return 0
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _mkdir(path, mode) {
    path = Pointer_stringify(path);
    path = PATH.normalize(path);
    if (path[path.length - 1] === "/") path = path.substr(0, path.length - 1);
    try {
        FS.mkdir(path, mode, 0);
        return 0
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _ftell(stream) {
    stream = FS.getStreamFromPtr(stream);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1
    } else {
        return stream.position
    }
}

function _fputs(s, stream) {
    var fd = _fileno(stream);
    return _write(fd, s, _strlen(s))
}
var _environ = allocate(1, "i32*", ALLOC_STATIC);
var ___environ = _environ;

function ___buildEnvironment(env) {
    var MAX_ENV_VALUES = 64;
    var TOTAL_ENV_SIZE = 1024;
    var poolPtr;
    var envPtr;
    if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        ENV["USER"] = "web_user";
        ENV["PATH"] = "/";
        ENV["PWD"] = "/";
        ENV["HOME"] = "/home/web_user";
        ENV["LANG"] = "C";
        ENV["_"] = VimModule["thisProgram"];
        poolPtr = allocate(TOTAL_ENV_SIZE, "i8", ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4, "i8*", ALLOC_STATIC);
        HEAP32[envPtr >> 2] = poolPtr;
        HEAP32[_environ >> 2] = envPtr
    } else {
        envPtr = HEAP32[_environ >> 2];
        poolPtr = HEAP32[envPtr >> 2]
    }
    var strings = [];
    var totalSize = 0;
    for (var key in env) {
        if (typeof env[key] === "string") {
            var line = key + "=" + env[key];
            strings.push(line);
            totalSize += line.length
        }
    }
    if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error("Environment size exceeded TOTAL_ENV_SIZE!")
    }
    var ptrSize = 4;
    for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[envPtr + i * ptrSize >> 2] = poolPtr;
        poolPtr += line.length + 1
    }
    HEAP32[envPtr + strings.length * ptrSize >> 2] = 0
}
var ENV = {};

function _setenv(envname, envval, overwrite) {
    if (envname === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1
    }
    var name = Pointer_stringify(envname);
    var val = Pointer_stringify(envval);
    if (name === "" || name.indexOf("=") !== -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1
    }
    if (ENV.hasOwnProperty(name) && !overwrite) return 0;
    ENV[name] = val;
    ___buildEnvironment(ENV);
    return 0
}

function _vimjs_clear_block(row1, col1, row2, col2) {
    var ctx = vimjs.canvas_ctx;
    if (!ctx) return;
    ctx.fillStyle = vimjs.bg_color;
    var cw = vimjs.char_width;
    var ch = vimjs.char_height;
    ctx.fillRect(col1 * cw, row1 * ch, (col2 - col1 + 1) * cw, (row2 - row1 + 1) * ch)
}
var PROCINFO = {
    ppid: 1,
    pid: 42,
    sid: 42,
    pgid: 42
};

function _getpid() {
    return PROCINFO.pid
}

function _putc() {
    return _fputc.apply(null, arguments)
}

function _vimjs_call_shell(cmd, options) {
    cmd = Pointer_stringify(cmd);
    try {
        try {
            eval(cmd)
        } catch (e) {
            if (e instanceof SyntaxError) {
                try {
                    var content = FS.readFile(cmd.replace(/(^\s+|\s+$)/g, ""), {
                        encoding: "utf8"
                    })
                } catch (e1) {
                    throw e
                }
                eval(content)
            } else {
                throw e
            }
        }
    } catch (e) {
        if (e instanceof Error) {
            console.log(e.name + ": " + e.message)
        } else {
            console.log("Exception thrown: ", e)
        }
    }
}

function _fcntl(fildes, cmd, varargs, dup2) {
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    switch (cmd) {
        case 0:
            var arg = HEAP32[varargs >> 2];
            if (arg < 0) {
                ___setErrNo(ERRNO_CODES.EINVAL);
                return -1
            }
            var newStream;
            try {
                newStream = FS.open(stream.path, stream.flags, 0, arg)
            } catch (e) {
                FS.handleFSError(e);
                return -1
            }
            return newStream.fd;
        case 1:
        case 2:
            return 0;
        case 3:
            return stream.flags;
        case 4:
            var arg = HEAP32[varargs >> 2];
            stream.flags |= arg;
            return 0;
        case 12:
        case 12:
            var arg = HEAP32[varargs >> 2];
            var offset = 0;
            HEAP16[arg + offset >> 1] = 2;
            return 0;
        case 13:
        case 14:
        case 13:
        case 14:
            return 0;
        case 8:
        case 9:
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
        default:
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1
    }
}

function _dup(fildes) {
    return _fcntl(fildes, 0, allocate([0, 0, 0, 0], "i32", ALLOC_STACK))
}

function _emscripten_set_main_loop_timing(mode, value) {
    Browser.mainLoop.timingMode = mode;
    Browser.mainLoop.timingValue = value;
    if (!Browser.mainLoop.func) {
        return 1
    }
    if (mode == 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
            setTimeout(Browser.mainLoop.runner, value)
        };
        Browser.mainLoop.method = "timeout"
    } else if (mode == 1) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
            Browser.requestAnimationFrame(Browser.mainLoop.runner)
        };
        Browser.mainLoop.method = "rAF"
    }
    return 0
}

function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
    VimModule["noExitRuntime"] = true;
    assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
    Browser.mainLoop.func = func;
    Browser.mainLoop.arg = arg;
    var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
    Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
            var start = Date.now();
            var blocker = Browser.mainLoop.queue.shift();
            blocker.func(blocker.arg);
            if (Browser.mainLoop.remainingBlockers) {
                var remaining = Browser.mainLoop.remainingBlockers;
                var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
                if (blocker.counted) {
                    Browser.mainLoop.remainingBlockers = next
                } else {
                    next = next + .5;
                    Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9
                }
            }
            console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
            Browser.mainLoop.updateStatus();
            setTimeout(Browser.mainLoop.runner, 0);
            return
        }
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
            Browser.mainLoop.scheduler();
            return
        }
        if (Browser.mainLoop.method === "timeout" && VimModule.ctx) {
            VimModule.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
            Browser.mainLoop.method = ""
        }
        Browser.mainLoop.runIter((function() {
            if (typeof arg !== "undefined") {
                Runtime.dynCall("vi", func, [arg])
            } else {
                Runtime.dynCall("v", func)
            }
        }));
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
        if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
        Browser.mainLoop.scheduler()
    };
    if (fps && fps > 0) _emscripten_set_main_loop_timing(0, 1e3 / fps);
    else _emscripten_set_main_loop_timing(1, 1);
    Browser.mainLoop.scheduler();
    if (simulateInfiniteLoop) {
        throw "SimulateInfiniteLoop"
    }
}
var Browser = {
    mainLoop: {
        scheduler: null,
        method: "",
        currentlyRunningMainloop: 0,
        func: null,
        arg: 0,
        timingMode: 0,
        timingValue: 0,
        currentFrameNumber: 0,
        queue: [],
        pause: (function() {
            Browser.mainLoop.scheduler = null;
            Browser.mainLoop.currentlyRunningMainloop++
        }),
        resume: (function() {
            Browser.mainLoop.currentlyRunningMainloop++;
            var timingMode = Browser.mainLoop.timingMode;
            var timingValue = Browser.mainLoop.timingValue;
            var func = Browser.mainLoop.func;
            Browser.mainLoop.func = null;
            _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
            _emscripten_set_main_loop_timing(timingMode, timingValue)
        }),
        updateStatus: (function() {
            if (VimModule["setStatus"]) {
                var message = VimModule["statusMessage"] || "Please wait...";
                var remaining = Browser.mainLoop.remainingBlockers;
                var expected = Browser.mainLoop.expectedBlockers;
                if (remaining) {
                    if (remaining < expected) {
                        VimModule["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")")
                    } else {
                        VimModule["setStatus"](message)
                    }
                } else {
                    VimModule["setStatus"]("")
                }
            }
        }),
        runIter: (function(func) {
            if (ABORT) return;
            if (VimModule["preMainLoop"]) {
                var preRet = VimModule["preMainLoop"]();
                if (preRet === false) {
                    return
                }
            }
            try {
                func()
            } catch (e) {
                if (e instanceof ExitStatus) {
                    return
                } else {
                    if (e && typeof e === "object" && e.stack) VimModule.printErr("exception thrown: " + [e, e.stack]);
                    throw e
                }
            }
            if (VimModule["postMainLoop"]) VimModule["postMainLoop"]()
        })
    },
    isFullScreen: false,
    pointerLock: false,
    moduleContextCreatedCallbacks: [],
    workers: [],
    init: (function() {
        if (!VimModule["preloadPlugins"]) VimModule["preloadPlugins"] = [];
        if (Browser.initted) return;
        Browser.initted = true;
        try {
            new Blob;
            Browser.hasBlobConstructor = true
        } catch (e) {
            Browser.hasBlobConstructor = false;
            console.log("warning: no blob constructor, cannot create blobs with mimetypes")
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
        Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined;
        if (!VimModule.noImageDecoding && typeof Browser.URLObject === "undefined") {
            console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
            VimModule.noImageDecoding = true
        }
        var imagePlugin = {};
        imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
            return !VimModule.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name)
        };
        imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
            var b = null;
            if (Browser.hasBlobConstructor) {
                try {
                    b = new Blob([byteArray], {
                        type: Browser.getMimetype(name)
                    });
                    if (b.size !== byteArray.length) {
                        b = new Blob([(new Uint8Array(byteArray)).buffer], {
                            type: Browser.getMimetype(name)
                        })
                    }
                } catch (e) {
                    Runtime.warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder")
                }
            }
            if (!b) {
                var bb = new Browser.BlobBuilder;
                bb.append((new Uint8Array(byteArray)).buffer);
                b = bb.getBlob()
            }
            var url = Browser.URLObject.createObjectURL(b);
            var img = new Image;
            img.onload = function img_onload() {
                assert(img.complete, "Image " + name + " could not be decoded");
                var canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height;
                var ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0);
                VimModule["preloadedImages"][name] = canvas;
                Browser.URLObject.revokeObjectURL(url);
                if (onload) onload(byteArray)
            };
            img.onerror = function img_onerror(event) {
                console.log("Image " + url + " could not be decoded");
                if (onerror) onerror()
            };
            img.src = url
        };
        VimModule["preloadPlugins"].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
            return !VimModule.noAudioDecoding && name.substr(-4) in {
                ".ogg": 1,
                ".wav": 1,
                ".mp3": 1
            }
        };
        audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
            var done = false;

            function finish(audio) {
                if (done) return;
                done = true;
                VimModule["preloadedAudios"][name] = audio;
                if (onload) onload(byteArray)
            }

            function fail() {
                if (done) return;
                done = true;
                VimModule["preloadedAudios"][name] = new Audio;
                if (onerror) onerror()
            }
            if (Browser.hasBlobConstructor) {
                try {
                    var b = new Blob([byteArray], {
                        type: Browser.getMimetype(name)
                    })
                } catch (e) {
                    return fail()
                }
                var url = Browser.URLObject.createObjectURL(b);
                var audio = new Audio;
                audio.addEventListener("canplaythrough", (function() {
                    finish(audio)
                }), false);
                audio.onerror = function audio_onerror(event) {
                    if (done) return;
                    console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");

                    function encode64(data) {
                        var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                        var PAD = "=";
                        var ret = "";
                        var leftchar = 0;
                        var leftbits = 0;
                        for (var i = 0; i < data.length; i++) {
                            leftchar = leftchar << 8 | data[i];
                            leftbits += 8;
                            while (leftbits >= 6) {
                                var curr = leftchar >> leftbits - 6 & 63;
                                leftbits -= 6;
                                ret += BASE[curr]
                            }
                        }
                        if (leftbits == 2) {
                            ret += BASE[(leftchar & 3) << 4];
                            ret += PAD + PAD
                        } else if (leftbits == 4) {
                            ret += BASE[(leftchar & 15) << 2];
                            ret += PAD
                        }
                        return ret
                    }
                    audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
                    finish(audio)
                };
                audio.src = url;
                Browser.safeSetTimeout((function() {
                    finish(audio)
                }), 1e4)
            } else {
                return fail()
            }
        };
        VimModule["preloadPlugins"].push(audioPlugin);
        var canvas = VimModule["canvas"];

        function pointerLockChange() {
            Browser.pointerLock = document["pointerLockElement"] === canvas || document["mozPointerLockElement"] === canvas || document["webkitPointerLockElement"] === canvas || document["msPointerLockElement"] === canvas
        }
        if (canvas) {
            canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || (function() {});
            canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || (function() {});
            canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
            document.addEventListener("pointerlockchange", pointerLockChange, false);
            VimModule["globalEventListeners"].push(["pointerlockchange", pointerLockChange]);
            document.addEventListener("mozpointerlockchange", pointerLockChange, false);
            VimModule["globalEventListeners"].push(["mozpointerlockchange", pointerLockChange]);
            document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
            VimModule["globalEventListeners"].push(["webkitpointerlockchange", pointerLockChange]);
            document.addEventListener("mspointerlockchange", pointerLockChange, false);
            VimModule["globalEventListeners"].push(["mspointerlockchange", pointerLockChange]);
            if (VimModule["elementPointerLock"]) {
                canvas.addEventListener("click", (function(ev) {
                    if (!Browser.pointerLock && canvas.requestPointerLock) {
                        canvas.requestPointerLock();
                        ev.preventDefault()
                    }
                }), false)
            }
        }
    }),
    createContext: (function(canvas, useWebGL, setInVimModule, webGLContextAttributes) {
        if (useWebGL && VimModule.ctx && canvas == VimModule.canvas) return VimModule.ctx;
        var ctx;
        var contextHandle;
        if (useWebGL) {
            var contextAttributes = {
                antialias: false,
                alpha: false
            };
            if (webGLContextAttributes) {
                for (var attribute in webGLContextAttributes) {
                    contextAttributes[attribute] = webGLContextAttributes[attribute]
                }
            }
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
                ctx = GL.getContext(contextHandle).GLctx
            }
            canvas.style.backgroundColor = "black"
        } else {
            ctx = canvas.getContext("2d")
        }
        if (!ctx) return null;
        if (setInVimModule) {
            if (!useWebGL) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
            VimModule.ctx = ctx;
            if (useWebGL) GL.makeContextCurrent(contextHandle);
            VimModule.useWebGL = useWebGL;
            Browser.moduleContextCreatedCallbacks.forEach((function(callback) {
                callback()
            }));
            Browser.init()
        }
        return ctx
    }),
    destroyContext: (function(canvas, useWebGL, setInVimModule) {}),
    fullScreenHandlersInstalled: false,
    lockPointer: undefined,
    resizeCanvas: undefined,
    requestFullScreen: (function(lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === "undefined") Browser.vrDevice = null;
        var canvas = VimModule["canvas"];

        function fullScreenChange() {
            Browser.isFullScreen = false;
            var canvasContainer = canvas.parentNode;
            if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
                canvas.cancelFullScreen = document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["webkitCancelFullScreen"] || document["msExitFullscreen"] || document["exitFullscreen"] || (function() {});
                canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
                if (Browser.lockPointer) canvas.requestPointerLock();
                Browser.isFullScreen = true;
                if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize()
            } else {
                canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
                canvasContainer.parentNode.removeChild(canvasContainer);
                if (Browser.resizeCanvas) Browser.setWindowedCanvasSize()
            }
            if (VimModule["onFullScreen"]) VimModule["onFullScreen"](Browser.isFullScreen);
            Browser.updateCanvasDimensions(canvas)
        }
        if (!Browser.fullScreenHandlersInstalled) {
            Browser.fullScreenHandlersInstalled = true;
            document.addEventListener("fullscreenchange", fullScreenChange, false);
            VimModule["globalEventListeners"].push(["fullscreenchange", fullScreenChange]);
            document.addEventListener("mozfullscreenchange", fullScreenChange, false);
            VimModule["globalEventListeners"].push(["mozfullscreenchange", fullScreenChange]);
            document.addEventListener("webkitfullscreenchange", fullScreenChange, false);
            VimModule["globalEventListeners"].push(["webkitfullscreenchange", fullScreenChange]);
            document.addEventListener("MSFullscreenChange", fullScreenChange, false);
            VimModule["globalEventListeners"].push(["MSFullscreenChange", fullScreenChange]);
        }
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        canvasContainer.requestFullScreen = canvasContainer["requestFullScreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullScreen"] ? (function() {
            canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"])
        }) : null);
        if (vrDevice) {
            canvasContainer.requestFullScreen({
                vrDisplay: vrDevice
            })
        } else {
            canvasContainer.requestFullScreen()
        }
    }),
    nextRAF: 0,
    fakeRequestAnimationFrame: (function(func) {
        var now = Date.now();
        if (Browser.nextRAF === 0) {
            Browser.nextRAF = now + 1e3 / 60
        } else {
            while (now + 2 >= Browser.nextRAF) {
                Browser.nextRAF += 1e3 / 60
            }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay)
    }),
    requestAnimationFrame: function requestAnimationFrame(func) {
        if (typeof window === "undefined") {
            Browser.fakeRequestAnimationFrame(func)
        } else {
            if (!window.requestAnimationFrame) {
                window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || Browser.fakeRequestAnimationFrame
            }
            window.requestAnimationFrame(func)
        }
    },
    safeCallback: (function(func) {
        return (function() {
            if (!ABORT) return func.apply(null, arguments)
        })
    }),
    allowAsyncCallbacks: true,
    queuedAsyncCallbacks: [],
    pauseAsyncCallbacks: (function() {
        Browser.allowAsyncCallbacks = false
    }),
    resumeAsyncCallbacks: (function() {
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
            var callbacks = Browser.queuedAsyncCallbacks;
            Browser.queuedAsyncCallbacks = [];
            callbacks.forEach((function(func) {
                func()
            }))
        }
    }),
    safeRequestAnimationFrame: (function(func) {
        return Browser.requestAnimationFrame((function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
                func()
            } else {
                Browser.queuedAsyncCallbacks.push(func)
            }
        }))
    }),
    safeSetTimeout: (function(func, timeout) {
        VimModule["noExitRuntime"] = true;
        return setTimeout((function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
                func()
            } else {
                Browser.queuedAsyncCallbacks.push(func)
            }
        }), timeout)
    }),
    safeSetInterval: (function(func, timeout) {
        VimModule["noExitRuntime"] = true;
        return setInterval((function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
                func()
            }
        }), timeout)
    }),
    getMimetype: (function(name) {
        return {
            "jpg": "image/jpeg",
            "jpeg": "image/jpeg",
            "png": "image/png",
            "bmp": "image/bmp",
            "ogg": "audio/ogg",
            "wav": "audio/wav",
            "mp3": "audio/mpeg"
        } [name.substr(name.lastIndexOf(".") + 1)]
    }),
    getUserMedia: (function(func) {
        if (!window.getUserMedia) {
            window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"]
        }
        window.getUserMedia(func)
    }),
    getMovementX: (function(event) {
        return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0
    }),
    getMovementY: (function(event) {
        return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0
    }),
    getMouseWheelDelta: (function(event) {
        var delta = 0;
        switch (event.type) {
            case "DOMMouseScroll":
                delta = event.detail;
                break;
            case "mousewheel":
                delta = event.wheelDelta;
                break;
            case "wheel":
                delta = event["deltaY"];
                break;
            default:
                throw "unrecognized mouse wheel event: " + event.type
        }
        return delta
    }),
    mouseX: 0,
    mouseY: 0,
    mouseMovementX: 0,
    mouseMovementY: 0,
    touches: {},
    lastTouches: {},
    calculateMouseEvent: (function(event) {
        if (Browser.pointerLock) {
            if (event.type != "mousemove" && "mozMovementX" in event) {
                Browser.mouseMovementX = Browser.mouseMovementY = 0
            } else {
                Browser.mouseMovementX = Browser.getMovementX(event);
                Browser.mouseMovementY = Browser.getMovementY(event)
            }
            if (typeof SDL != "undefined") {
                Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
                Browser.mouseY = SDL.mouseY + Browser.mouseMovementY
            } else {
                Browser.mouseX += Browser.mouseMovementX;
                Browser.mouseY += Browser.mouseMovementY
            }
        } else {
            var rect = VimModule["canvas"].getBoundingClientRect();
            var cw = VimModule["canvas"].width;
            var ch = VimModule["canvas"].height;
            var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
            var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
            if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
                var touch = event.touch;
                if (touch === undefined) {
                    return
                }
                var adjustedX = touch.pageX - (scrollX + rect.left);
                var adjustedY = touch.pageY - (scrollY + rect.top);
                adjustedX = adjustedX * (cw / rect.width);
                adjustedY = adjustedY * (ch / rect.height);
                var coords = {
                    x: adjustedX,
                    y: adjustedY
                };
                if (event.type === "touchstart") {
                    Browser.lastTouches[touch.identifier] = coords;
                    Browser.touches[touch.identifier] = coords
                } else if (event.type === "touchend" || event.type === "touchmove") {
                    Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
                    Browser.touches[touch.identifier] = {
                        x: adjustedX,
                        y: adjustedY
                    }
                }
                return
            }
            var x = event.pageX - (scrollX + rect.left);
            var y = event.pageY - (scrollY + rect.top);
            x = x * (cw / rect.width);
            y = y * (ch / rect.height);
            Browser.mouseMovementX = x - Browser.mouseX;
            Browser.mouseMovementY = y - Browser.mouseY;
            Browser.mouseX = x;
            Browser.mouseY = y
        }
    }),
    xhrLoad: (function(url, onload, onerror) {
        var xhr = new XMLHttpRequest;
        xhr.open("GET", url, true);
        xhr.responseType = "arraybuffer";
        xhr.onload = function xhr_onload() {
            if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                onload(xhr.response)
            } else {
                onerror()
            }
        };
        xhr.onerror = onerror;
        xhr.send(null)
    }),
    asyncLoad: (function(url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, (function(arrayBuffer) {
            assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
            onload(new Uint8Array(arrayBuffer));
            if (!noRunDep) removeRunDependency("al " + url)
        }), (function(event) {
            if (onerror) {
                onerror()
            } else {
                throw 'Loading data file "' + url + '" failed.'
            }
        }));
        if (!noRunDep) addRunDependency("al " + url)
    }),
    resizeListeners: [],
    updateResizeListeners: (function() {
        var canvas = VimModule["canvas"];
        Browser.resizeListeners.forEach((function(listener) {
            listener(canvas.width, canvas.height)
        }))
    }),
    setCanvasSize: (function(width, height, noUpdates) {
        var canvas = VimModule["canvas"];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners()
    }),
    windowedWidth: 0,
    windowedHeight: 0,
    setFullScreenCanvasSize: (function() {
        if (typeof SDL != "undefined") {
            var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
            flags = flags | 8388608;
            HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags
        }
        Browser.updateResizeListeners()
    }),
    setWindowedCanvasSize: (function() {
        if (typeof SDL != "undefined") {
            var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
            flags = flags & ~8388608;
            HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags
        }
        Browser.updateResizeListeners()
    }),
    updateCanvasDimensions: (function(canvas, wNative, hNative) {
        if (wNative && hNative) {
            canvas.widthNative = wNative;
            canvas.heightNative = hNative
        } else {
            wNative = canvas.widthNative;
            hNative = canvas.heightNative
        }
        var w = wNative;
        var h = hNative;
        if (VimModule["forcedAspectRatio"] && VimModule["forcedAspectRatio"] > 0) {
            if (w / h < VimModule["forcedAspectRatio"]) {
                w = Math.round(h * VimModule["forcedAspectRatio"])
            } else {
                h = Math.round(w / VimModule["forcedAspectRatio"])
            }
        }
        if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
            var factor = Math.min(screen.width / w, screen.height / h);
            w = Math.round(w * factor);
            h = Math.round(h * factor)
        }
        if (Browser.resizeCanvas) {
            if (canvas.width != w) canvas.width = w;
            if (canvas.height != h) canvas.height = h;
            if (typeof canvas.style != "undefined") {
                canvas.style.removeProperty("width");
                canvas.style.removeProperty("height")
            }
        } else {
            if (canvas.width != wNative) canvas.width = wNative;
            if (canvas.height != hNative) canvas.height = hNative;
            if (typeof canvas.style != "undefined") {
                if (w != wNative || h != hNative) {
                    canvas.style.setProperty("width", w + "px", "important");
                    canvas.style.setProperty("height", h + "px", "important")
                } else {
                    canvas.style.removeProperty("width");
                    canvas.style.removeProperty("height")
                }
            }
        }
    }),
    wgetRequests: {},
    nextWgetRequestHandle: 0,
    getNextWgetRequestHandle: (function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle
    })
};

function _stat(path, buf, dontResolveLastLink) {
    path = typeof path !== "string" ? Pointer_stringify(path) : path;
    try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[buf >> 2] = stat.dev;
        HEAP32[buf + 4 >> 2] = 0;
        HEAP32[buf + 8 >> 2] = stat.ino;
        HEAP32[buf + 12 >> 2] = stat.mode;
        HEAP32[buf + 16 >> 2] = stat.nlink;
        HEAP32[buf + 20 >> 2] = stat.uid;
        HEAP32[buf + 24 >> 2] = stat.gid;
        HEAP32[buf + 28 >> 2] = stat.rdev;
        HEAP32[buf + 32 >> 2] = 0;
        HEAP32[buf + 36 >> 2] = stat.size;
        HEAP32[buf + 40 >> 2] = 4096;
        HEAP32[buf + 44 >> 2] = stat.blocks;
        HEAP32[buf + 48 >> 2] = stat.atime.getTime() / 1e3 | 0;
        HEAP32[buf + 52 >> 2] = 0;
        HEAP32[buf + 56 >> 2] = stat.mtime.getTime() / 1e3 | 0;
        HEAP32[buf + 60 >> 2] = 0;
        HEAP32[buf + 64 >> 2] = stat.ctime.getTime() / 1e3 | 0;
        HEAP32[buf + 68 >> 2] = 0;
        HEAP32[buf + 72 >> 2] = stat.ino;
        return 0
    } catch (e) {
        if (e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            e.setErrno(ERRNO_CODES.ENOTDIR)
        }
        FS.handleFSError(e);
        return -1
    }
}

function _fstat(fildes, buf) {
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    return _stat(stream.path, buf)
}
var ___tm_current = allocate(44, "i8", ALLOC_STATIC);
var ___tm_timezone = allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
var _tzname = allocate(8, "i32*", ALLOC_STATIC);
var _daylight = allocate(1, "i32*", ALLOC_STATIC);
var _timezone = allocate(1, "i32*", ALLOC_STATIC);

function _tzset() {
    if (_tzset.called) return;
    _tzset.called = true;
    HEAP32[_timezone >> 2] = -(new Date).getTimezoneOffset() * 60;
    var winter = new Date(2e3, 0, 1);
    var summer = new Date(2e3, 6, 1);
    HEAP32[_daylight >> 2] = Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());

    function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT"
    }
    var winterName = extractZone(winter);
    var summerName = extractZone(summer);
    var winterNamePtr = allocate(intArrayFromString(winterName), "i8", ALLOC_NORMAL);
    var summerNamePtr = allocate(intArrayFromString(summerName), "i8", ALLOC_NORMAL);
    if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        HEAP32[_tzname >> 2] = winterNamePtr;
        HEAP32[_tzname + 4 >> 2] = summerNamePtr
    } else {
        HEAP32[_tzname >> 2] = summerNamePtr;
        HEAP32[_tzname + 4 >> 2] = winterNamePtr
    }
}

function _localtime_r(time, tmPtr) {
    _tzset();
    var date = new Date(HEAP32[time >> 2] * 1e3);
    HEAP32[tmPtr >> 2] = date.getSeconds();
    HEAP32[tmPtr + 4 >> 2] = date.getMinutes();
    HEAP32[tmPtr + 8 >> 2] = date.getHours();
    HEAP32[tmPtr + 12 >> 2] = date.getDate();
    HEAP32[tmPtr + 16 >> 2] = date.getMonth();
    HEAP32[tmPtr + 20 >> 2] = date.getFullYear() - 1900;
    HEAP32[tmPtr + 24 >> 2] = date.getDay();
    var start = new Date(date.getFullYear(), 0, 1);
    var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
    HEAP32[tmPtr + 28 >> 2] = yday;
    HEAP32[tmPtr + 36 >> 2] = -(date.getTimezoneOffset() * 60);
    var summerOffset = (new Date(2e3, 6, 1)).getTimezoneOffset();
    var winterOffset = start.getTimezoneOffset();
    var dst = date.getTimezoneOffset() == Math.min(winterOffset, summerOffset) | 0;
    HEAP32[tmPtr + 32 >> 2] = dst;
    var zonePtr = HEAP32[_tzname + (dst ? Runtime.QUANTUM_SIZE : 0) >> 2];
    HEAP32[tmPtr + 40 >> 2] = zonePtr;
    return tmPtr
}

function _localtime(time) {
    return _localtime_r(time, ___tm_current)
}
VimModule["_bitshift64Lshr"] = _bitshift64Lshr;

function _recv(fd, buf, len, flags) {
    var sock = SOCKFS.getSocket(fd);
    if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    return _read(fd, buf, len)
}

function _pread(fildes, buf, nbyte, offset) {
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset)
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _read(fildes, buf, nbyte) {
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte)
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _fread(ptr, size, nitems, stream) {
    var bytesToRead = nitems * size;
    if (bytesToRead == 0) {
        return 0
    }
    var bytesRead = 0;
    var streamObj = FS.getStreamFromPtr(stream);
    if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0
    }
    while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[ptr++ >> 0] = streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++
    }
    var err = _read(streamObj.fd, ptr, bytesToRead);
    if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0
    }
    bytesRead += err;
    if (bytesRead < bytesToRead) streamObj.eof = true;
    return bytesRead / size | 0
}

function _isatty(fildes) {
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0
    }
    if (!stream.tty) {
        ___setErrNo(ERRNO_CODES.ENOTTY);
        return 0
    }
    return 1
}

function _ftello() {
    return _ftell.apply(null, arguments)
}
var _BDtoIHigh = true;

function _chown(path, owner, group, dontResolveLastLink) {
    if (typeof path !== "string") path = Pointer_stringify(path);
    try {
        FS.chown(path, owner, group);
        return 0
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _fchown(fildes, owner, group) {
    try {
        FS.fchown(fildes, owner, group);
        return 0
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _gettimeofday(ptr) {
    var now = Date.now();
    HEAP32[ptr >> 2] = now / 1e3 | 0;
    HEAP32[ptr + 4 >> 2] = now % 1e3 * 1e3 | 0;
    return 0
}

function _vimjs_draw_string(row, col, s, len, flags) {
    if (!(flags & 1)) {
        _vimjs_clear_block(row, col, row, col + len - 1)
    }
    var font = vimjs.font;
    if (flags & 2) font = "bold " + font;
    s = Pointer_stringify(s, len);
    var ctx = vimjs.canvas_ctx;
    if (!ctx) return;
    ctx.font = font;
    ctx.textBaseline = "bottom";
    ctx.fillStyle = vimjs.fg_color;
    var x = col * vimjs.char_width;
    var y = (row + 1) * vimjs.char_height;
    var w = len * vimjs.char_width;
    ctx.fillText(s, x, y, w);
    if (flags & 4) {
        ctx.strokeStyle = vimjs.fg_color;
        ctx.beginPath();
        ctx.moveTo(x, y - .5);
        ctx.lineTo(x + w, y - .5);
        ctx.stroke()
    }
    if (flags & 8) {
        var offs = [1.5, .5, .5, .5, 1.5, 2.5, 2.5, 2.5];
        ctx.strokeStyle = vimjs.sp_color;
        ctx.beginPath();
        ctx.moveTo(x, y - offs[x % 8]);
        for (var xx = x + 1, xx2 = x + w; xx < xx2; ++xx) ctx.lineTo(xx, y - offs[xx % 8]);
        ctx.stroke()
    }
    if (s === "E444: Cannot close last window") {
      VimModule["quitCallback"]();
    }
}

function _vimjs_check_font(font) {
    font = Pointer_stringify(font);
    if (!vimjs.font_test_node) return;
    var font_test_node = vimjs.font_test_node;
    font_test_node.innerHTML = "the quick brown fox jumps over the lazy dog";
    return ["serif", "sans-serif", "monospace"].some((function(base_font) {
        font_test_node.style.font = font + "," + base_font;
        font_test_node.style.fontSize = "64px";
        var w = font_test_node.clientWidth;
        var h = font_test_node.clientHeight;
        font_test_node.style.font = "64px " + base_font;
        return font_test_node.clientWidth != w || font_test_node.clientHeight != h
    }))
}

function _getuid() {
    return 0
}

function _vimjs_get_rgb(string) {
    string = Pointer_stringify(string);
    string = string.toLowerCase();
    var abbr = /^#([a-fA-F0-9]{3})$/;
    var hex = /^#([a-fA-F0-9]{6})$/;
    var rgb = [0, 0, 0];
    var match = string.match(abbr);
    if (match) {
        match = match[1];
        for (var i = 0; i < rgb.length; i++) {
            rgb[i] = parseInt(match[i] + match[i], 16)
        }
    } else if (match = string.match(hex)) {
        match = match[1];
        for (var i = 0; i < rgb.length; i++) {
            rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16)
        }
    } else {
        var builtin_rgb = vimjs.color_map[string];
        if (builtin_rgb) rgb = builtin_rgb
    }
    var ret = 0;
    for (var i = 0; i < rgb.length; i++) {
        ret = (ret << 8) + rgb[i]
    }
    return ret
}

function _getpwnam() {
    throw "getpwnam: TODO"
}

function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
    return dest
}
VimModule["_memcpy"] = _memcpy;

function _utime(path, times) {
    var time;
    if (times) {
        var offset = 4;
        time = HEAP32[times + offset >> 2];
        time *= 1e3
    } else {
        time = Date.now()
    }
    path = Pointer_stringify(path);
    try {
        FS.utime(path, time, time);
        return 0
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _chdir(path) {
    if (typeof path !== "string") path = Pointer_stringify(path);
    try {
        FS.chdir(path);
        return 0
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _vimjs_clear_all() {
    if (!vimjs.canvas_node) return;
    var canvas_node = vimjs.canvas_node;
    var ctx = vimjs.canvas_ctx;
    if (!ctx) return;
    ctx.fillStyle = vimjs.bg_color;
    ctx.fillRect(0, 0, canvas_node.width, canvas_node.height)
}
var ___tm_formatted = allocate(44, "i8", ALLOC_STATIC);

function _mktime(tmPtr) {
    _tzset();
    var date = new Date(HEAP32[tmPtr + 20 >> 2] + 1900, HEAP32[tmPtr + 16 >> 2], HEAP32[tmPtr + 12 >> 2], HEAP32[tmPtr + 8 >> 2], HEAP32[tmPtr + 4 >> 2], HEAP32[tmPtr >> 2], 0);
    var dst = HEAP32[tmPtr + 32 >> 2];
    var guessedOffset = date.getTimezoneOffset();
    var start = new Date(date.getFullYear(), 0, 1);
    var summerOffset = (new Date(2e3, 6, 1)).getTimezoneOffset();
    var winterOffset = start.getTimezoneOffset();
    var dstOffset = Math.min(winterOffset, summerOffset);
    if (dst < 0) {
        HEAP32[tmPtr + 32 >> 2] = Number(winterOffset != guessedOffset)
    } else if (dst > 0 != (winterOffset != guessedOffset)) {
        var summerOffset = (new Date(date.getFullYear(), 6, 1)).getTimezoneOffset();
        var trueOffset = dst > 0 ? summerOffset : winterOffset;
        date.setTime(date.getTime() + (trueOffset - guessedOffset) * 6e4)
    }
    HEAP32[tmPtr + 24 >> 2] = date.getDay();
    var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
    HEAP32[tmPtr + 28 >> 2] = yday;
    return date.getTime() / 1e3 | 0
}

function _asctime_r(tmPtr, buf) {
    var date = {
        tm_sec: HEAP32[tmPtr >> 2],
        tm_min: HEAP32[tmPtr + 4 >> 2],
        tm_hour: HEAP32[tmPtr + 8 >> 2],
        tm_mday: HEAP32[tmPtr + 12 >> 2],
        tm_mon: HEAP32[tmPtr + 16 >> 2],
        tm_year: HEAP32[tmPtr + 20 >> 2],
        tm_wday: HEAP32[tmPtr + 24 >> 2]
    };
    var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    var s = days[date.tm_wday] + " " + months[date.tm_mon] + (date.tm_mday < 10 ? "  " : " ") + date.tm_mday + (date.tm_hour < 10 ? " 0" : " ") + date.tm_hour + (date.tm_min < 10 ? ":0" : ":") + date.tm_min + (date.tm_sec < 10 ? ":0" : ":") + date.tm_sec + " " + (1900 + date.tm_year) + "\n";
    writeStringToMemory(s, buf);
    return buf
}

function _ctime_r(time, buf) {
    var stack = Runtime.stackSave();
    var rv = _asctime_r(_localtime_r(time, Runtime.stackAlloc(44)), buf);
    Runtime.stackRestore(stack);
    return rv
}

function _ctime(timer) {
    return _ctime_r(timer, ___tm_current)
}

function _vimjs_insert_lines(num_lines, row1, row2, col1, col2) {
    var ctx = vimjs.canvas_ctx;
    if (!ctx) return;
    var cw = vimjs.char_width;
    var ch = vimjs.char_height;
    var x = col1 * cw;
    var w = (col2 - col1 + 1) * cw;
    var h = (row2 - row1 - num_lines + 1) * ch;
    if (!vimjs.canvas_node) return;
    ctx.drawImage(vimjs.canvas_node, x, row1 * ch, w, h, x, (row1 + num_lines) * ch, w, h);
    _vimjs_clear_block(row1, col1, row1 + num_lines - 1, col2)
}

function _signal(sig, func) {
    VimModule.printErr("Calling stub instead of signal()");
    return 0
}
VimModule["_memmove"] = _memmove;

function ___errno_location() {
    return ___errno_state
}
var _BItoD = true;

function _opendir(dirname) {
    var path = Pointer_stringify(dirname);
    if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0
    }
    var node;
    try {
        var lookup = FS.lookupPath(path, {
            follow: true
        });
        node = lookup.node
    } catch (e) {
        FS.handleFSError(e);
        return 0
    }
    if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0
    }
    var fd = _open(dirname, 0, allocate([0, 0, 0, 0], "i32", ALLOC_STACK));
    return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd))
}

function _sbrk(bytes) {
    var self = _sbrk;
    if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP);
        self.called = true;
        assert(Runtime.dynamicAlloc, "Runtime.dynamicAlloc");
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = (function() {
            abort("cannot dynamically allocate, sbrk now has control")
        })
    }
    var ret = DYNAMICTOP;
    if (bytes != 0) self.alloc(bytes);
    return ret
}

function _getpwuid(uid) {
    return 0
}

function _vimjs_set_font(font) {
    vimjs.font = Pointer_stringify(font);
    try {
        var l = vimjs.font.split(/([\d]+)(?=in|[cem]m|ex|p[ctx])/);
        l[1] = parseFloat(l[1]) * vimjs.devicePixelRatio;
        vimjs.font = l.join("")
    } catch (e) {}
}

function _rename(old_path, new_path) {
    old_path = Pointer_stringify(old_path);
    new_path = Pointer_stringify(new_path);
    try {
        FS.rename(old_path, new_path);
        return 0
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function _mkdtemp(template) {
    template = _mktemp(template);
    return _mkdir(template, 448) === 0 ? template : 0
}

function _sysconf(name) {
    switch (name) {
        case 30:
            return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
            return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
            return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
            return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
            return 1024;
        case 31:
        case 42:
        case 72:
            return 32;
        case 87:
        case 26:
        case 33:
            return 2147483647;
        case 34:
        case 1:
            return 47839;
        case 38:
        case 36:
            return 99;
        case 43:
        case 37:
            return 2048;
        case 0:
            return 2097152;
        case 3:
            return 65536;
        case 28:
            return 32768;
        case 44:
            return 32767;
        case 75:
            return 16384;
        case 39:
            return 1e3;
        case 89:
            return 700;
        case 71:
            return 256;
        case 40:
            return 255;
        case 2:
            return 100;
        case 180:
            return 64;
        case 25:
            return 20;
        case 5:
            return 16;
        case 6:
            return 6;
        case 73:
            return 4;
        case 84: {
            if (typeof navigator === "object") return navigator["hardwareConcurrency"] || 1;
            return 1
        }
    }
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1
}
VimModule["_memset"] = _memset;
var _BDtoILow = true;
VimModule["_strcat"] = _strcat;

function _readdir_r(dirp, entry, result) {
    var stream = FS.getStreamFromPtr(dirp);
    if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF)
    }
    if (!stream.currReading) {
        try {
            stream.currReading = FS.readdir(stream.path)
        } catch (e) {
            return FS.handleFSError(e)
        }
    }
    if (stream.position < 0 || stream.position >= stream.currReading.length) {
        HEAP32[result >> 2] = 0;
        return 0
    }
    var id;
    var type;
    var name = stream.currReading[stream.position++];
    if (!name.indexOf(".")) {
        id = 1;
        type = 4
    } else {
        try {
            var child = FS.lookupNode(stream.node, name)
        } catch (e) {
            return _readdir_r(dirp, entry, result)
        }
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 : FS.isDir(child.mode) ? 4 : FS.isLink(child.mode) ? 10 : 8
    }
    HEAP32[entry >> 2] = id;
    HEAP32[entry + 4 >> 2] = stream.position;
    HEAP32[entry + 8 >> 2] = 268;
    for (var i = 0; i < name.length; i++) {
        HEAP8[entry + 11 + i >> 0] = name.charCodeAt(i)
    }
    HEAP8[entry + 11 + i >> 0] = 0;
    HEAP8[entry + 10 >> 0] = type;
    HEAP32[result >> 2] = entry;
    return 0
}

function _readdir(dirp) {
    var stream = FS.getStreamFromPtr(dirp);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0
    }
    if (!_readdir.entry) _readdir.entry = _malloc(268);
    if (!_readdir.result) _readdir.result = _malloc(4);
    var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
    if (err) {
        ___setErrNo(err);
        return 0
    }
    return HEAP32[_readdir.result >> 2]
}

function _strerror_r(errnum, strerrbuf, buflen) {
    if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
            return ___setErrNo(ERRNO_CODES.ERANGE)
        } else {
            var msg = ERRNO_MESSAGES[errnum];
            writeAsciiToMemory(msg, strerrbuf);
            return 0
        }
    } else {
        return ___setErrNo(ERRNO_CODES.EINVAL)
    }
}

function _strerror(errnum) {
    if (!_strerror.buffer) _strerror.buffer = _malloc(256);
    _strerror_r(errnum, _strerror.buffer, 256);
    return _strerror.buffer
}

function _vimjs_get_window_width() {
    return vimjs.window_width
}
VimModule["_bitshift64Shl"] = _bitshift64Shl;

function _vimjs_get_char_width() {
    return vimjs.char_width
}

function _abort() {
    VimModule["abort"]()
}
var EmterpreterAsync = {
    initted: false,
    state: 0,
    saveStack: "",
    yieldCallbacks: [],
    ensureInit: (function() {
        if (this.initted) return;
        this.initted = true
    }),
    setState: (function(s) {
        this.ensureInit();
        this.state = s;
        asm.setAsyncState(s)
    }),
    handle: (function(doAsyncOp, yieldDuring) {
        VimModule["noExitRuntime"] = true;
        if (EmterpreterAsync.state === 0) {
            var stack = new Int32Array(HEAP32.subarray(EMTSTACKTOP >> 2, asm.emtStackSave() >> 2));
            var stacktop = asm.stackSave();
            doAsyncOp(function resume() {
              if (EmterpreterAsync.state === 0) {
                EmterpreterAsync.setState(2);
                return;
              }
                assert(EmterpreterAsync.state === 1, "EmterpreterAsync.state === 1");
                HEAP32.set(stack, EMTSTACKTOP >> 2);
                EmterpreterAsync.setState(2);
                if (Browser.mainLoop.func) {
                    Browser.mainLoop.resume()
                }
                asm.emterpret(stack[0]);
                if (!yieldDuring && EmterpreterAsync.state === 0) {
                    Browser.resumeAsyncCallbacks()
                }
            });
            EmterpreterAsync.setState(1);
            if (Browser.mainLoop.func) {
                Browser.mainLoop.pause()
            }
            if (yieldDuring) {
                EmterpreterAsync.yieldCallbacks.forEach((function(func) {
                    func()
                }))
            } else {
                Browser.pauseAsyncCallbacks()
            }
        } else {
            assert(EmterpreterAsync.state === 2, "EmterpreterAsync.state === 2");
            EmterpreterAsync.setState(0)
        }
    })
};

function _emscripten_sleep(ms) {
    EmterpreterAsync.handle((function(resume) {
        setTimeout((function() {
            if (ABORT) return;
            resume()
        }), ms)
    }))
}

function _fgetc(stream) {
    var streamObj = FS.getStreamFromPtr(stream);
    if (!streamObj) return -1;
    if (streamObj.eof || streamObj.error) return -1;
    var ret = _fread(_fgetc.ret, 1, 1, stream);
    if (ret == 0) {
        return -1
    } else if (ret == -1) {
        streamObj.error = true;
        return -1
    } else {
        return HEAPU8[_fgetc.ret >> 0]
    }
}

function _fgets(s, n, stream) {
    var streamObj = FS.getStreamFromPtr(stream);
    if (!streamObj) return 0;
    if (streamObj.error || streamObj.eof) return 0;
    var byte_;
    for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
            if (streamObj.error || streamObj.eof && i == 0) return 0;
            else if (streamObj.eof) break
        }
        HEAP8[s + i >> 0] = byte_
    }
    HEAP8[s + i >> 0] = 0;
    return s
}

function _getgid() {
    return _getuid.apply(null, arguments)
}

function _vimjs_set_fg_color(color) {
    vimjs.fg_color = vimjs.get_color_string(color)
}

function _tcgetattr(fildes, termios_p) {
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    if (!stream.tty) {
        ___setErrNo(ERRNO_CODES.ENOTTY);
        return -1
    }
    return 0
}

function _fopen(filename, mode) {
    var flags;
    mode = Pointer_stringify(mode);
    if (mode[0] == "r") {
        if (mode.indexOf("+") != -1) {
            flags = 2
        } else {
            flags = 0
        }
    } else if (mode[0] == "w") {
        if (mode.indexOf("+") != -1) {
            flags = 2
        } else {
            flags = 1
        }
        flags |= 64;
        flags |= 512
    } else if (mode[0] == "a") {
        if (mode.indexOf("+") != -1) {
            flags = 2
        } else {
            flags = 1
        }
        flags |= 64;
        flags |= 1024
    } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0
    }
    var fd = _open(filename, flags, allocate([511, 0, 0, 0], "i32", ALLOC_STACK));
    return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd))
}

function _getc() {
    return _fgetc.apply(null, arguments)
}

function _access(path, amode) {
    path = Pointer_stringify(path);
    if (amode & ~7) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1
    }
    var node;
    try {
        var lookup = FS.lookupPath(path, {
            follow: true
        });
        node = lookup.node
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
    var perms = "";
    if (amode & 4) perms += "r";
    if (amode & 2) perms += "w";
    if (amode & 1) perms += "x";
    if (perms && FS.nodePermissions(node, perms)) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1
    }
    return 0
}

function _vimjs_haskey(name) {
    name = Pointer_stringify(name, 2);
    return name in vimjs.special_keys_namemap
}

function _vimjs_init_font(font) {
    if (typeof font !== "string") font = Pointer_stringify(font);
    if (!font) font = "12px monospace";
    if (!vimjs.font_test_node) return;
    var font_test_node = vimjs.font_test_node;
    font_test_node.style.font = font;
    font_test_node.innerHTML = "m";
    vimjs.char_height = Math.max(1, font_test_node.clientHeight * vimjs.devicePixelRatio);
    vimjs.char_width = Math.max(1, font_test_node.clientWidth * vimjs.devicePixelRatio)
}

function _vimjs_init() {
    vimjs.is_firefox = typeof InstallTrigger !== "undefined";
    vimjs.is_chrome = !!window.chrome;
    vimjs.gui_web_handle_key = VimModule["cwrap"]("gui_web_handle_key", null, ["number", "number", "number", "number"]);
    vimjs.input_available = VimModule["cwrap"]("input_available", "number", []);
    vimjs.font_test_node = document.getElementById("vimjs-font-test");
    if (!vimjs.font_test_node) return;
    var canvas_node = vimjs.canvas_node = document.getElementById("vimjs-canvas");
    if (!canvas_node) return;
    canvas_node.style.display = "block";
    vimjs.canvas_ctx = canvas_node.getContext("2d");
    if (!vimjs.canvas_ctx) return;
    var container_node = vimjs.container_node = document.getElementById("vimjs-container");
    if (!container_node) return;
    container_node.removeChild(canvas_node);
    container_node.innerHTML = "";
    container_node.appendChild(canvas_node);
    container_node.style.backgroundColor = "black";
    vimjs.devicePixelRatio = window.devicePixelRatio || 1;
    vimjs.window_width = container_node.clientWidth * vimjs.devicePixelRatio;
    vimjs.window_height = container_node.clientHeight * vimjs.devicePixelRatio;
    canvas_node.style.height = container_node.clientHeight + "px";
    canvas_node.style.width = container_node.clientWidth + "px";
    _vimjs_init_font("");
    vimjs.special_keys = [];
    vimjs.special_keys_namemap = {};
    var KeyEvent = window.KeyEvent;
    if (typeof KeyEvent == "undefined") {
        var KeyEvent = {
            DOM_VK_CANCEL: 3,
            DOM_VK_HELP: 6,
            DOM_VK_BACK_SPACE: 8,
            DOM_VK_TAB: 9,
            DOM_VK_CLEAR: 12,
            DOM_VK_RETURN: 13,
            DOM_VK_ENTER: 14,
            DOM_VK_SHIFT: 16,
            DOM_VK_CONTROL: 17,
            DOM_VK_ALT: 18,
            DOM_VK_PAUSE: 19,
            DOM_VK_CAPS_LOCK: 20,
            DOM_VK_ESCAPE: 27,
            DOM_VK_SPACE: 32,
            DOM_VK_PAGE_UP: 33,
            DOM_VK_PAGE_DOWN: 34,
            DOM_VK_END: 35,
            DOM_VK_HOME: 36,
            DOM_VK_LEFT: 37,
            DOM_VK_UP: 38,
            DOM_VK_RIGHT: 39,
            DOM_VK_DOWN: 40,
            DOM_VK_PRINTSCREEN: 44,
            DOM_VK_INSERT: 45,
            DOM_VK_DELETE: 46,
            DOM_VK_0: 48,
            DOM_VK_1: 49,
            DOM_VK_2: 50,
            DOM_VK_3: 51,
            DOM_VK_4: 52,
            DOM_VK_5: 53,
            DOM_VK_6: 54,
            DOM_VK_7: 55,
            DOM_VK_8: 56,
            DOM_VK_9: 57,
            DOM_VK_SEMICOLON: 59,
            DOM_VK_EQUALS: 61,
            DOM_VK_A: 65,
            DOM_VK_B: 66,
            DOM_VK_C: 67,
            DOM_VK_D: 68,
            DOM_VK_E: 69,
            DOM_VK_F: 70,
            DOM_VK_G: 71,
            DOM_VK_H: 72,
            DOM_VK_I: 73,
            DOM_VK_J: 74,
            DOM_VK_K: 75,
            DOM_VK_L: 76,
            DOM_VK_M: 77,
            DOM_VK_N: 78,
            DOM_VK_O: 79,
            DOM_VK_P: 80,
            DOM_VK_Q: 81,
            DOM_VK_R: 82,
            DOM_VK_S: 83,
            DOM_VK_T: 84,
            DOM_VK_U: 85,
            DOM_VK_V: 86,
            DOM_VK_W: 87,
            DOM_VK_X: 88,
            DOM_VK_Y: 89,
            DOM_VK_Z: 90,
            DOM_VK_CONTEXT_MENU: 93,
            DOM_VK_NUMPAD0: 96,
            DOM_VK_NUMPAD1: 97,
            DOM_VK_NUMPAD2: 98,
            DOM_VK_NUMPAD3: 99,
            DOM_VK_NUMPAD4: 100,
            DOM_VK_NUMPAD5: 101,
            DOM_VK_NUMPAD6: 102,
            DOM_VK_NUMPAD7: 103,
            DOM_VK_NUMPAD8: 104,
            DOM_VK_NUMPAD9: 105,
            DOM_VK_MULTIPLY: 106,
            DOM_VK_ADD: 107,
            DOM_VK_SEPARATOR: 108,
            DOM_VK_SUBTRACT: 109,
            DOM_VK_DECIMAL: 110,
            DOM_VK_DIVIDE: 111,
            DOM_VK_F1: 112,
            DOM_VK_F2: 113,
            DOM_VK_F3: 114,
            DOM_VK_F4: 115,
            DOM_VK_F5: 116,
            DOM_VK_F6: 117,
            DOM_VK_F7: 118,
            DOM_VK_F8: 119,
            DOM_VK_F9: 120,
            DOM_VK_F10: 121,
            DOM_VK_F11: 122,
            DOM_VK_F12: 123,
            DOM_VK_F13: 124,
            DOM_VK_F14: 125,
            DOM_VK_F15: 126,
            DOM_VK_F16: 127,
            DOM_VK_F17: 128,
            DOM_VK_F18: 129,
            DOM_VK_F19: 130,
            DOM_VK_F20: 131,
            DOM_VK_F21: 132,
            DOM_VK_F22: 133,
            DOM_VK_F23: 134,
            DOM_VK_F24: 135,
            DOM_VK_NUM_LOCK: 144,
            DOM_VK_SCROLL_LOCK: 145,
            DOM_VK_COMMA: 188,
            DOM_VK_PERIOD: 190,
            DOM_VK_SLASH: 191,
            DOM_VK_BACK_QUOTE: 192,
            DOM_VK_OPEN_BRACKET: 219,
            DOM_VK_BACK_SLASH: 220,
            DOM_VK_CLOSE_BRACKET: 221,
            DOM_VK_QUOTE: 222,
            DOM_VK_META: 224
        }
    } [
        [KeyEvent.DOM_VK_UP, "ku"],
        [KeyEvent.DOM_VK_DOWN, "kd"],
        [KeyEvent.DOM_VK_LEFT, "kl"],
        [KeyEvent.DOM_VK_RIGHT, "kr"],
        [KeyEvent.DOM_VK_F1, "k1"],
        [KeyEvent.DOM_VK_F2, "k2"],
        [KeyEvent.DOM_VK_F3, "k3"],
        [KeyEvent.DOM_VK_F4, "k4"],
        [KeyEvent.DOM_VK_F5, "k5"],
        [KeyEvent.DOM_VK_F6, "k6"],
        [KeyEvent.DOM_VK_F7, "k7"],
        [KeyEvent.DOM_VK_F8, "k8"],
        [KeyEvent.DOM_VK_F9, "k9"],
        [KeyEvent.DOM_VK_F10, "k;"],
        [KeyEvent.DOM_VK_F11, "F1"],
        [KeyEvent.DOM_VK_F12, "F2"],
        [KeyEvent.DOM_VK_F13, "F3"],
        [KeyEvent.DOM_VK_F14, "F4"],
        [KeyEvent.DOM_VK_F15, "F5"],
        [KeyEvent.DOM_VK_F16, "F6"],
        [KeyEvent.DOM_VK_F17, "F7"],
        [KeyEvent.DOM_VK_F18, "F8"],
        [KeyEvent.DOM_VK_F19, "F9"],
        [KeyEvent.DOM_VK_F20, "FA"],
        [KeyEvent.DOM_VK_F21, "FB"],
        [KeyEvent.DOM_VK_F22, "FC"],
        [KeyEvent.DOM_VK_F23, "FD"],
        [KeyEvent.DOM_VK_F24, "FE"],
        [KeyEvent.DOM_VK_PAUSE, "FB"],
        [KeyEvent.DOM_VK_HELP, "%1"],
        [KeyEvent.DOM_VK_BACK_SPACE, "kb"],
        [KeyEvent.DOM_VK_INSERT, "kI"],
        [KeyEvent.DOM_VK_DELETE, "kD"],
        [KeyEvent.DOM_VK_CLEAR, "kC"],
        [KeyEvent.DOM_VK_HOME, "kh"],
        [KeyEvent.DOM_VK_END, "@7"],
        [KeyEvent.DOM_VK_PAGE_UP, "kP"],
        [KeyEvent.DOM_VK_PAGE_DOWN, "kN"],
        [KeyEvent.DOM_VK_PRINT, "%9"]
    ].forEach((function(p) {
        vimjs.special_keys[p[0]] = p[1];
        vimjs.special_keys_namemap[p[1]] = p[0]
    }));
    vimjs.color_map = {
        aliceblue: [240, 248, 255],
        antiquewhite: [250, 235, 215],
        aqua: [0, 255, 255],
        aquamarine: [127, 255, 212],
        azure: [240, 255, 255],
        beige: [245, 245, 220],
        bisque: [255, 228, 196],
        black: [0, 0, 0],
        blanchedalmond: [255, 235, 205],
        blue: [0, 0, 255],
        blueviolet: [138, 43, 226],
        brown: [165, 42, 42],
        burlywood: [222, 184, 135],
        cadetblue: [95, 158, 160],
        chartreuse: [127, 255, 0],
        chocolate: [210, 105, 30],
        coral: [255, 127, 80],
        cornflowerblue: [100, 149, 237],
        cornsilk: [255, 248, 220],
        crimson: [220, 20, 60],
        cyan: [0, 255, 255],
        darkblue: [0, 0, 139],
        darkcyan: [0, 139, 139],
        darkgoldenrod: [184, 134, 11],
        darkgray: [169, 169, 169],
        darkgreen: [0, 100, 0],
        darkgrey: [169, 169, 169],
        darkkhaki: [189, 183, 107],
        darkmagenta: [139, 0, 139],
        darkolivegreen: [85, 107, 47],
        darkorange: [255, 140, 0],
        darkorchid: [153, 50, 204],
        darkred: [139, 0, 0],
        darksalmon: [233, 150, 122],
        darkseagreen: [143, 188, 143],
        darkslateblue: [72, 61, 139],
        darkslategray: [47, 79, 79],
        darkslategrey: [47, 79, 79],
        darkturquoise: [0, 206, 209],
        darkviolet: [148, 0, 211],
        darkyellow: [187, 187, 0],
        deeppink: [255, 20, 147],
        deepskyblue: [0, 191, 255],
        dimgray: [105, 105, 105],
        dimgrey: [105, 105, 105],
        dodgerblue: [30, 144, 255],
        firebrick: [178, 34, 34],
        floralwhite: [255, 250, 240],
        forestgreen: [34, 139, 34],
        fuchsia: [255, 0, 255],
        gainsboro: [220, 220, 220],
        ghostwhite: [248, 248, 255],
        gold: [255, 215, 0],
        goldenrod: [218, 165, 32],
        gray: [128, 128, 128],
        green: [0, 128, 0],
        greenyellow: [173, 255, 47],
        gray: [128, 128, 128],
        gray10: [26, 26, 26],
        gray20: [51, 51, 51],
        gray30: [77, 77, 77],
        gray40: [102, 102, 102],
        gray50: [127, 127, 127],
        gray60: [153, 153, 153],
        gray70: [179, 179, 179],
        gray80: [204, 204, 204],
        gray90: [229, 229, 229],
        grey: [128, 128, 128],
        grey10: [26, 26, 26],
        grey20: [51, 51, 51],
        grey30: [77, 77, 77],
        grey40: [102, 102, 102],
        grey50: [127, 127, 127],
        grey60: [153, 153, 153],
        grey70: [179, 179, 179],
        grey80: [204, 204, 204],
        grey90: [229, 229, 229],
        honeydew: [240, 255, 240],
        hotpink: [255, 105, 180],
        indianred: [205, 92, 92],
        indigo: [75, 0, 130],
        ivory: [255, 255, 240],
        khaki: [240, 230, 140],
        lavender: [230, 230, 250],
        lavenderblush: [255, 240, 245],
        lawngreen: [124, 252, 0],
        lemonchiffon: [255, 250, 205],
        lightred: [255, 187, 187],
        lightblue: [173, 216, 230],
        lightcoral: [240, 128, 128],
        lightcyan: [224, 255, 255],
        lightgoldenrodyellow: [250, 250, 210],
        lightgray: [211, 211, 211],
        lightgreen: [144, 238, 144],
        lightgrey: [211, 211, 211],
        lightmagenta: [255, 187, 255],
        lightpink: [255, 182, 193],
        lightsalmon: [255, 160, 122],
        lightseagreen: [32, 178, 170],
        lightskyblue: [135, 206, 250],
        lightslategray: [119, 136, 153],
        lightslategrey: [119, 136, 153],
        lightsteelblue: [176, 196, 222],
        lightyellow: [255, 255, 224],
        lime: [0, 255, 0],
        limegreen: [50, 205, 50],
        linen: [250, 240, 230],
        magenta: [255, 0, 255],
        maroon: [128, 0, 0],
        mediumaquamarine: [102, 205, 170],
        mediumblue: [0, 0, 205],
        mediumorchid: [186, 85, 211],
        mediumpurple: [147, 112, 219],
        mediumseagreen: [60, 179, 113],
        mediumslateblue: [123, 104, 238],
        mediumspringgreen: [0, 250, 154],
        mediumturquoise: [72, 209, 204],
        mediumvioletred: [199, 21, 133],
        midnightblue: [25, 25, 112],
        mintcream: [245, 255, 250],
        mistyrose: [255, 228, 225],
        moccasin: [255, 228, 181],
        navajowhite: [255, 222, 173],
        navy: [0, 0, 128],
        oldlace: [253, 245, 230],
        olive: [128, 128, 0],
        olivedrab: [107, 142, 35],
        orange: [255, 165, 0],
        orangered: [255, 69, 0],
        orchid: [218, 112, 214],
        palegoldenrod: [238, 232, 170],
        palegreen: [152, 251, 152],
        paleturquoise: [175, 238, 238],
        palevioletred: [219, 112, 147],
        papayawhip: [255, 239, 213],
        peachpuff: [255, 218, 185],
        peru: [205, 133, 63],
        pink: [255, 192, 203],
        plum: [221, 160, 221],
        powderblue: [176, 224, 230],
        purple: [128, 0, 128],
        red: [255, 0, 0],
        rosybrown: [188, 143, 143],
        royalblue: [65, 105, 225],
        saddlebrown: [139, 69, 19],
        salmon: [250, 128, 114],
        sandybrown: [244, 164, 96],
        seagreen: [46, 139, 87],
        seashell: [255, 245, 238],
        sienna: [160, 82, 45],
        silver: [192, 192, 192],
        skyblue: [135, 206, 235],
        slateblue: [106, 90, 205],
        slategray: [112, 128, 144],
        slategrey: [112, 128, 144],
        snow: [255, 250, 250],
        springgreen: [0, 255, 127],
        steelblue: [70, 130, 180],
        tan: [210, 180, 140],
        teal: [0, 128, 128],
        thistle: [216, 191, 216],
        tomato: [255, 99, 71],
        turquoise: [64, 224, 208],
        violet: [238, 130, 238],
        wheat: [245, 222, 179],
        white: [255, 255, 255],
        whitesmoke: [245, 245, 245],
        yellow: [255, 255, 0],
        yellowgreen: [154, 205, 50]
    };
    vimjs.lastMouseDownTarget = vimjs.canvas_node;
    var ignoreKeys = (function() {
        return vimjs.lastMouseDownTarget !== vimjs.canvas_node
    });
    const mousedownHandler = function(event) {
        if (!vimjs.canvas_node) return;
        if (vimjs.canvas_node.contains(event.target)) {
            vimjs.lastMouseDownTarget = vimjs.canvas_node
        } else {
            vimjs.lastMouseDownTarget = event.target
        }
    };
    document.addEventListener("mousedown", mousedownHandler, false);
    VimModule["globalEventListeners"].push(["mousedown", mousedownHandler]);
    const keypressHandler = function(e) {
        if (ignoreKeys()) return true;
        e.preventDefault();
        vimjs.handle_key(e.charCode, e.keyCode, e)
    };
    document.addEventListener("keypress", keypressHandler);
    VimModule["globalEventListeners"].push(["keypress", keypressHandler]);
    var keys_to_intercept_upon_keydown = {};
    [KeyEvent.DOM_VK_ESCAPE, KeyEvent.DOM_VK_TAB, KeyEvent.DOM_VK_BACK_SPACE, KeyEvent.DOM_VK_UP, KeyEvent.DOM_VK_DOWN, KeyEvent.DOM_VK_LEFT, KeyEvent.DOM_VK_RIGHT, KeyEvent.DOM_VK_DELETE, KeyEvent.DOM_VK_PAGE_UP, KeyEvent.DOM_VK_PAGE_DOWN].forEach((function(k) {
        keys_to_intercept_upon_keydown[k] = 1
    }));
    const baseKeyDownHandler = function(e) {
      if (ignoreKeys()) return true;
      if (e.keyCode in keys_to_intercept_upon_keydown) {
          e.preventDefault();
          vimjs.handle_key(0, e.keyCode, e)
      }
    };
    document.addEventListener("keydown", baseKeyDownHandler);
    VimModule["globalEventListeners"].push(["keydown", baseKeyDownHandler]);
    if (!vimjs.is_firefox) {
        const keydownHandler = function(e) {
          if (ignoreKeys()) return true;
          if (e.keyCode === KeyEvent.DOM_VK_CONTROL) vimjs.ctrl_pressed = true
        };
        document.addEventListener("keydown", keydownHandler);
        VimModule["globalEventListeners"].push(["keydown", keydownHandler]);
        const keyupHandler = function(e) {
          if (ignoreKeys()) return true;
          if (e.keyCode === KeyEvent.DOM_VK_CONTROL) vimjs.ctrl_pressed = false
        };
        document.addEventListener("keyup", keyupHandler);
        VimModule["globalEventListeners"].push(["keyup", keyupHandler]);
    }
}

function _vimjs_delete_lines(num_lines, row1, row2, col1, col2) {
    var ctx = vimjs.canvas_ctx;
    if (!ctx) return;
    var cw = vimjs.char_width;
    var ch = vimjs.char_height;
    var x = col1 * cw;
    var y = (row1 + num_lines) * ch;
    var w = (col2 - col1 + 1) * cw;
    var h = (row2 + 1) * ch - y;
    if (!vimjs.canvas_node) return;
    ctx.drawImage(vimjs.canvas_node, x, y, w, h, x, row1 * ch, w, h);
    _vimjs_clear_block(row2 - num_lines + 1, col1, row2, col2)
}

function __exit(status) {
    VimModule["exit"](status)
}

function _exit(status) {
    __exit(status)
}
var _emscripten_async_resume = undefined;

function _vimjs_flash(msec) {
    if (!vimjs.canvas_node) return;
    var canvas_node = vimjs.canvas_node;
    var w = canvas_node.width;
    var h = canvas_node.height;
    vimjs.invert_canvas(0, 0, w, h);
    setTimeout((function() {
        vimjs.invert_canvas(0, 0, w, h);
        asm["setAsync"]();
        _emscripten_async_resume()
    }), msec)
}

function _getrlimit(resource, rlp) {
    HEAP32[rlp >> 2] = -1;
    HEAP32[rlp + 4 >> 2] = -1;
    HEAP32[rlp + 8 >> 2] = -1;
    HEAP32[rlp + 12 >> 2] = -1;
    return 0
}

function _vimjs_set_sp_color(color) {
    vimjs.sp_color = vimjs.get_color_string(color)
}

function _vimjs_invert_rectangle(row, col, row_count, col_count) {
    var cw = vimjs.char_width;
    var ch = vimjs.char_height;
    vimjs.invert_canvas(col * cw, row * ch, col_count * cw, row_count * ch)
}

function _tcsetattr(fildes, optional_actions, termios_p) {
    var stream = FS.getStream(fildes);
    if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
    if (!stream.tty) {
        ___setErrNo(ERRNO_CODES.ENOTTY);
        return -1
    }
    return 0
}

function _vimjs_browse(buf, buf_size, saving, default_name, init_dir) {
    asm["setAsync"]();
    default_name = Pointer_stringify(default_name);
    if (default_name === "local" && window.FileReader) {
        if (saving) {
            setTimeout(_emscripten_async_resume, 1)
        }
    }
}

function _lstat(path, buf) {
    return _stat(path, buf, true)
}

function _vimjs_get_window_height() {
    return vimjs.window_height
}

function _vimjs_get_char_height() {
    return vimjs.char_height
}

function _time(ptr) {
    var ret = Date.now() / 1e3 | 0;
    if (ptr) {
        HEAP32[ptr >> 2] = ret
    }
    return ret
}

function _getcwd(buf, size) {
    if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0
    }
    var cwd = FS.cwd();
    if (size < cwd.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0
    } else {
        writeAsciiToMemory(cwd, buf);
        return buf
    }
}

function _closedir(dirp) {
    var fd = _fileno(dirp);
    var stream = FS.getStream(fd);
    if (stream.currReading) stream.currReading = null;
    return _close(fd)
}

function _readlink(path, buf, bufsize) {
    path = Pointer_stringify(path);
    var str;
    try {
        str = FS.readlink(path)
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
    str = str.slice(0, Math.max(0, bufsize - 1));
    writeStringToMemory(str, buf, true);
    return str.length
}

function _fchdir(fildes) {
    var stream = FS.getStream(fildes);
    if (stream) {
        return _chdir(stream.path)
    } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1
    }
}

function _getenv(name) {
    if (name === 0) return 0;
    name = Pointer_stringify(name);
    if (!ENV.hasOwnProperty(name)) return 0;
    if (_getenv.ret) _free(_getenv.ret);
    _getenv.ret = allocate(intArrayFromString(ENV[name]), "i8", ALLOC_NORMAL);
    return _getenv.ret
}

function _putchar(c) {
    return _fputc(c, HEAP32[_stdout >> 2])
}

function _vimjs_draw_part_cursor(row, col, width, height) {
    var ctx = vimjs.canvas_ctx;
    if (!ctx) return;
    ctx.fillStyle = vimjs.fg_color;
    var cw = vimjs.char_width;
    var ch = vimjs.char_height;
    ctx.fillRect(col * cw, (row + 1) * ch - height, width, height)
}
VimModule["_strcpy"] = _strcpy;

function _vimjs_is_valid_color(colorp) {
    var color = Pointer_stringify(colorp);
    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color) || color.toLowerCase() in vimjs.color_map
}

function _vimjs_set_bg_color(color) {
    vimjs.bg_color = vimjs.get_color_string(color)
}

function _vimjs_prepare_exit() {
    if (!!VimModule["VIMJS_ALLOW_EXIT"]) {
        VimModule["noExitRuntime"] = false;
        return 1
    } else {
        return 0
    }
}

function _rmdir(path) {
    path = Pointer_stringify(path);
    try {
        FS.rmdir(path);
        return 0
    } catch (e) {
        FS.handleFSError(e);
        return -1
    }
}

function __isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)
}

function __arraySum(array, index) {
    var sum = 0;
    for (var i = 0; i <= index; sum += array[i++]);
    return sum
}
var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function __addDays(date, days) {
    var newDate = new Date(date.getTime());
    while (days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
        if (days > daysInCurrentMonth - newDate.getDate()) {
            days -= daysInCurrentMonth - newDate.getDate() + 1;
            newDate.setDate(1);
            if (currentMonth < 11) {
                newDate.setMonth(currentMonth + 1)
            } else {
                newDate.setMonth(0);
                newDate.setFullYear(newDate.getFullYear() + 1)
            }
        } else {
            newDate.setDate(newDate.getDate() + days);
            return newDate
        }
    }
    return newDate
}

function _strftime(s, maxsize, format, tm) {
    var tm_zone = HEAP32[tm + 40 >> 2];
    var date = {
        tm_sec: HEAP32[tm >> 2],
        tm_min: HEAP32[tm + 4 >> 2],
        tm_hour: HEAP32[tm + 8 >> 2],
        tm_mday: HEAP32[tm + 12 >> 2],
        tm_mon: HEAP32[tm + 16 >> 2],
        tm_year: HEAP32[tm + 20 >> 2],
        tm_wday: HEAP32[tm + 24 >> 2],
        tm_yday: HEAP32[tm + 28 >> 2],
        tm_isdst: HEAP32[tm + 32 >> 2],
        tm_gmtoff: HEAP32[tm + 36 >> 2],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ""
    };
    var pattern = Pointer_stringify(format);
    var EXPANSION_RULES_1 = {
        "%c": "%a %b %d %H:%M:%S %Y",
        "%D": "%m/%d/%y",
        "%F": "%Y-%m-%d",
        "%h": "%b",
        "%r": "%I:%M:%S %p",
        "%R": "%H:%M",
        "%T": "%H:%M:%S",
        "%x": "%m/%d/%y",
        "%X": "%H:%M:%S"
    };
    for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule])
    }
    var WEEKDAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

    function leadingSomething(value, digits, character) {
        var str = typeof value === "number" ? value.toString() : value || "";
        while (str.length < digits) {
            str = character[0] + str
        }
        return str
    }

    function leadingNulls(value, digits) {
        return leadingSomething(value, digits, "0")
    }

    function compareByDay(date1, date2) {
        function sgn(value) {
            return value < 0 ? -1 : value > 0 ? 1 : 0
        }
        var compare;
        if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
            if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
                compare = sgn(date1.getDate() - date2.getDate())
            }
        }
        return compare
    }

    function getFirstWeekStartDate(janFourth) {
        switch (janFourth.getDay()) {
            case 0:
                return new Date(janFourth.getFullYear() - 1, 11, 29);
            case 1:
                return janFourth;
            case 2:
                return new Date(janFourth.getFullYear(), 0, 3);
            case 3:
                return new Date(janFourth.getFullYear(), 0, 2);
            case 4:
                return new Date(janFourth.getFullYear(), 0, 1);
            case 5:
                return new Date(janFourth.getFullYear() - 1, 11, 31);
            case 6:
                return new Date(janFourth.getFullYear() - 1, 11, 30)
        }
    }

    function getWeekBasedYear(date) {
        var thisDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
        var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
        var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
        var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
        var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
        if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
                return thisDate.getFullYear() + 1
            } else {
                return thisDate.getFullYear()
            }
        } else {
            return thisDate.getFullYear() - 1
        }
    }
    var EXPANSION_RULES_2 = {
        "%a": (function(date) {
            return WEEKDAYS[date.tm_wday].substring(0, 3)
        }),
        "%A": (function(date) {
            return WEEKDAYS[date.tm_wday]
        }),
        "%b": (function(date) {
            return MONTHS[date.tm_mon].substring(0, 3)
        }),
        "%B": (function(date) {
            return MONTHS[date.tm_mon]
        }),
        "%C": (function(date) {
            var year = date.tm_year + 1900;
            return leadingNulls(year / 100 | 0, 2)
        }),
        "%d": (function(date) {
            return leadingNulls(date.tm_mday, 2)
        }),
        "%e": (function(date) {
            return leadingSomething(date.tm_mday, 2, " ")
        }),
        "%g": (function(date) {
            return getWeekBasedYear(date).toString().substring(2)
        }),
        "%G": (function(date) {
            return getWeekBasedYear(date)
        }),
        "%H": (function(date) {
            return leadingNulls(date.tm_hour, 2)
        }),
        "%I": (function(date) {
            return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour - 12, 2)
        }),
        "%j": (function(date) {
            return leadingNulls(date.tm_mday + __arraySum(__isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon - 1), 3)
        }),
        "%m": (function(date) {
            return leadingNulls(date.tm_mon + 1, 2)
        }),
        "%M": (function(date) {
            return leadingNulls(date.tm_min, 2)
        }),
        "%n": (function() {
            return "\n"
        }),
        "%p": (function(date) {
            if (date.tm_hour > 0 && date.tm_hour < 13) {
                return "AM"
            } else {
                return "PM"
            }
        }),
        "%S": (function(date) {
            return leadingNulls(date.tm_sec, 2)
        }),
        "%t": (function() {
            return "\t"
        }),
        "%u": (function(date) {
            var day = new Date(date.tm_year + 1900, date.tm_mon + 1, date.tm_mday, 0, 0, 0, 0);
            return day.getDay() || 7
        }),
        "%U": (function(date) {
            var janFirst = new Date(date.tm_year + 1900, 0, 1);
            var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
            var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
            if (compareByDay(firstSunday, endDate) < 0) {
                var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
                var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
                var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
                return leadingNulls(Math.ceil(days / 7), 2)
            }
            return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00"
        }),
        "%V": (function(date) {
            var janFourthThisYear = new Date(date.tm_year + 1900, 0, 4);
            var janFourthNextYear = new Date(date.tm_year + 1901, 0, 4);
            var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
            var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
            var endDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
            if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
                return "53"
            }
            if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
                return "01"
            }
            var daysDifference;
            if (firstWeekStartThisYear.getFullYear() < date.tm_year + 1900) {
                daysDifference = date.tm_yday + 32 - firstWeekStartThisYear.getDate()
            } else {
                daysDifference = date.tm_yday + 1 - firstWeekStartThisYear.getDate()
            }
            return leadingNulls(Math.ceil(daysDifference / 7), 2)
        }),
        "%w": (function(date) {
            var day = new Date(date.tm_year + 1900, date.tm_mon + 1, date.tm_mday, 0, 0, 0, 0);
            return day.getDay()
        }),
        "%W": (function(date) {
            var janFirst = new Date(date.tm_year, 0, 1);
            var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
            var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
            if (compareByDay(firstMonday, endDate) < 0) {
                var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
                var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
                var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
                return leadingNulls(Math.ceil(days / 7), 2)
            }
            return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00"
        }),
        "%y": (function(date) {
            return (date.tm_year + 1900).toString().substring(2)
        }),
        "%Y": (function(date) {
            return date.tm_year + 1900
        }),
        "%z": (function(date) {
            var off = date.tm_gmtoff;
            var ahead = off >= 0;
            off = Math.abs(off) / 60;
            off = off / 60 * 100 + off % 60;
            return (ahead ? "+" : "-") + String("0000" + off).slice(-4)
        }),
        "%Z": (function(date) {
            return date.tm_zone
        }),
        "%%": (function() {
            return "%"
        })
    };
    for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
            pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date))
        }
    }
    var bytes = intArrayFromString(pattern, false);
    if (bytes.length > maxsize) {
        return 0
    }
    writeArrayToMemory(bytes, s);
    return bytes.length - 1
}
FS.staticInit();
__ATINIT__.unshift({
    func: (function() {
        if (!VimModule["noFSInit"] && !FS.init.initialized) FS.init()
    })
});
__ATMAIN__.push({
    func: (function() {
        FS.ignorePermissions = false
    })
});
__ATEXIT__.push({
    func: (function() {
        FS.quit()
    })
});
VimModule["FS_createFolder"] = FS.createFolder;
VimModule["FS_createPath"] = FS.createPath;
VimModule["FS_createDataFile"] = FS.createDataFile;
VimModule["FS_createPreloadedFile"] = FS.createPreloadedFile;
VimModule["FS_createLazyFile"] = FS.createLazyFile;
VimModule["FS_createLink"] = FS.createLink;
VimModule["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4);
HEAP32[___errno_state >> 2] = 0;
__ATINIT__.unshift({
    func: (function() {
        TTY.init()
    })
});
__ATEXIT__.push({
    func: (function() {
        TTY.shutdown()
    })
});
__ATINIT__.push({
    func: (function() {
        SOCKFS.root = FS.mount(SOCKFS, {}, null)
    })
});
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
VimModule["requestFullScreen"] = function VimModule_requestFullScreen(lockPointer, resizeCanvas, vrDevice) {
    Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice)
};
VimModule["requestAnimationFrame"] = function VimModule_requestAnimationFrame(func) {
    Browser.requestAnimationFrame(func)
};
VimModule["setCanvasSize"] = function VimModule_setCanvasSize(width, height, noUpdates) {
    Browser.setCanvasSize(width, height, noUpdates)
};
VimModule["pauseMainLoop"] = function VimModule_pauseMainLoop() {
    Browser.mainLoop.pause()
};
VimModule["resumeMainLoop"] = function VimModule_resumeMainLoop() {
    Browser.mainLoop.resume()
};
VimModule["getUserMedia"] = function VimModule_getUserMedia() {
    Browser.getUserMedia()
};
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true;
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
var cttz_i8 = allocate([8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0], "i8", ALLOC_DYNAMIC);

function invoke_iiii(index, a1, a2, a3) {
    try {
        return VimModule["dynCall_iiii"](index, a1, a2, a3)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        asm["setThrew"](1, 0)
    }
}

function invoke_i(index) {
    try {
        return VimModule["dynCall_i"](index)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        asm["setThrew"](1, 0)
    }
}

function invoke_vi(index, a1) {
    try {
        VimModule["dynCall_vi"](index, a1)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        asm["setThrew"](1, 0)
    }
}

function invoke_vii(index, a1, a2) {
    try {
        VimModule["dynCall_vii"](index, a1, a2)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        asm["setThrew"](1, 0)
    }
}

function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
    try {
        return VimModule["dynCall_iiiiiii"](index, a1, a2, a3, a4, a5, a6)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        asm["setThrew"](1, 0)
    }
}

function invoke_ii(index, a1) {
    try {
        return VimModule["dynCall_ii"](index, a1)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        asm["setThrew"](1, 0)
    }
}

function invoke_iii(index, a1, a2) {
    try {
        return VimModule["dynCall_iii"](index, a1, a2)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        asm["setThrew"](1, 0)
    }
}
VimModule.asmGlobalArg = {
    "Math": Math,
    "Int8Array": Int8Array,
    "Int16Array": Int16Array,
    "Int32Array": Int32Array,
    "Uint8Array": Uint8Array,
    "Uint16Array": Uint16Array,
    "Uint32Array": Uint32Array,
    "Float32Array": Float32Array,
    "Float64Array": Float64Array,
    "NaN": NaN,
    "Infinity": Infinity
};
VimModule.asmLibraryArg = {
    "abort": abort,
    "assert": assert,
    "invoke_iiii": invoke_iiii,
    "invoke_i": invoke_i,
    "invoke_vi": invoke_vi,
    "invoke_vii": invoke_vii,
    "invoke_iiiiiii": invoke_iiiiiii,
    "invoke_ii": invoke_ii,
    "invoke_iii": invoke_iii,
    "_fread": _fread,
    "_fstat": _fstat,
    "_vimjs_check_font": _vimjs_check_font,
    "__isLeapYear": __isLeapYear,
    "__addDays": __addDays,
    "_fsync": _fsync,
    "_signal": _signal,
    "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing,
    "_uname": _uname,
    "_sbrk": _sbrk,
    "_emscripten_memcpy_big": _emscripten_memcpy_big,
    "_tcgetattr": _tcgetattr,
    "_sysconf": _sysconf,
    "_utime": _utime,
    "_vimjs_clear_block": _vimjs_clear_block,
    "_close": _close,
    "_putc": _putc,
    "_vimjs_set_fg_color": _vimjs_set_fg_color,
    "_readdir": _readdir,
    "_ftell": _ftell,
    "_isatty": _isatty,
    "_write": _write,
    "_mkdtemp": _mkdtemp,
    "_getrlimit": _getrlimit,
    "_emscripten_sleep": _emscripten_sleep,
    "_vimjs_prepare_exit": _vimjs_prepare_exit,
    "_lseek": _lseek,
    "_mknod": _mknod,
    "_mkdir": _mkdir,
    "_closedir": _closedir,
    "_ctime_r": _ctime_r,
    "_getuid": _getuid,
    "_send": _send,
    "_vimjs_get_window_height": _vimjs_get_window_height,
    "_ctime": _ctime,
    "_vimjs_is_valid_color": _vimjs_is_valid_color,
    "_vimjs_get_rgb": _vimjs_get_rgb,
    "_setlocale": _setlocale,
    "_chmod": _chmod,
    "_chown": _chown,
    "_fcntl": _fcntl,
    "_vimjs_draw_part_cursor": _vimjs_draw_part_cursor,
    "_lstat": _lstat,
    "_opendir": _opendir,
    "_strerror_r": _strerror_r,
    "___setErrNo": ___setErrNo,
    "_getpid": _getpid,
    "_vimjs_call_shell": _vimjs_call_shell,
    "_vimjs_set_bg_color": _vimjs_set_bg_color,
    "_unlink": _unlink,
    "_mktime": _mktime,
    "_vimjs_draw_string": _vimjs_draw_string,
    "_vimjs_browse": _vimjs_browse,
    "_putchar": _putchar,
    "_kill": _kill,
    "_printf": _printf,
    "_poll": _poll,
    "_localtime": _localtime,
    "_mkport": _mkport,
    "_stat": _stat,
    "_getpwnam": _getpwnam,
    "_read": _read,
    "_fwrite": _fwrite,
    "_time": _time,
    "_fprintf": _fprintf,
    "_gettimeofday": _gettimeofday,
    "_chdir": _chdir,
    "_exit": _exit,
    "_rename": _rename,
    "_readdir_r": _readdir_r,
    "_vimjs_get_window_width": _vimjs_get_window_width,
    "_getcwd": _getcwd,
    "_fchdir": _fchdir,
    "_vimjs_insert_lines": _vimjs_insert_lines,
    "_vimjs_init": _vimjs_init,
    "_access": _access,
    "_vimjs_clear_all": _vimjs_clear_all,
    "_rmdir": _rmdir,
    "___buildEnvironment": ___buildEnvironment,
    "_dup": _dup,
    "_pwrite": _pwrite,
    "_localtime_r": _localtime_r,
    "_tzset": _tzset,
    "_open": _open,
    "_readlink": _readlink,
    "_strftime": _strftime,
    "_sync": _sync,
    "_fdopen": _fdopen,
    "_fseek": _fseek,
    "_asctime_r": _asctime_r,
    "_getenv": _getenv,
    "_fclose": _fclose,
    "_vimjs_flash": _vimjs_flash,
    "_vimjs_set_sp_color": _vimjs_set_sp_color,
    "_recv": _recv,
    "_ftello": _ftello,
    "_vimjs_beep": () => {},
    "_abort": _abort,
    "_vimjs_resize": _vimjs_resize,
    "_vimjs_draw_hollow_cursor": _vimjs_draw_hollow_cursor,
    "_fopen": _fopen,
    "_getgid": _getgid,
    "_vimjs_set_font": _vimjs_set_font,
    "_vimjs_get_char_width": _vimjs_get_char_width,
    "_fflush": _fflush,
    "__reallyNegative": __reallyNegative,
    "_vimjs_delete_lines": _vimjs_delete_lines,
    "_fileno": _fileno,
    "__exit": __exit,
    "_mktemp": _mktemp,
    "_vimjs_invert_rectangle": _vimjs_invert_rectangle,
    "_tcsetattr": _tcsetattr,
    "__arraySum": __arraySum,
    "__formatString": __formatString,
    "_fputs": _fputs,
    "_pread": _pread,
    "_fchown": _fchown,
    "_getc": _getc,
    "_emscripten_set_main_loop": _emscripten_set_main_loop,
    "___errno_location": ___errno_location,
    "_getpwuid": _getpwuid,
    "_fgetc": _fgetc,
    "_fputc": _fputc,
    "_strerror": _strerror,
    "_fgets": _fgets,
    "_vimjs_haskey": _vimjs_haskey,
    "_vimjs_get_char_height": _vimjs_get_char_height,
    "_setenv": _setenv,
    "_vimjs_init_font": _vimjs_init_font,
    "STACKTOP": STACKTOP,
    "STACK_MAX": STACK_MAX,
    "tempDoublePtr": tempDoublePtr,
    "ABORT": ABORT,
    "cttz_i8": cttz_i8,
    "_stderr": _stderr
};
VimModule.asmLibraryArg["EMTSTACKTOP"] = EMTSTACKTOP;
VimModule.asmLibraryArg["EMT_STACK_MAX"] = EMT_STACK_MAX; // EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
    "use asm";
    var a = new global.Int8Array(buffer);
    var b = new global.Int16Array(buffer);
    var c = new global.Int32Array(buffer);
    var d = new global.Uint8Array(buffer);
    var e = new global.Uint16Array(buffer);
    var f = new global.Uint32Array(buffer);
    var g = new global.Float32Array(buffer);
    var h = new global.Float64Array(buffer);
    var i = env.STACKTOP | 0;
    var j = env.STACK_MAX | 0;
    var k = env.tempDoublePtr | 0;
    var l = env.ABORT | 0;
    var m = env.cttz_i8 | 0;
    var n = env._stderr | 0;
    var o = 0;
    var p = 0;
    var q = 0;
    var r = 0;
    var s = global.NaN,
        t = global.Infinity;
    var u = 0,
        v = 0,
        w = 0,
        x = 0,
        y = 0.0,
        z = 0,
        A = 0,
        B = 0,
        C = 0.0;
    var D = 0;
    var E = 0;
    var F = 0;
    var G = 0;
    var H = 0;
    var I = 0;
    var J = 0;
    var K = 0;
    var L = 0;
    var M = 0;
    var N = global.Math.floor;
    var O = global.Math.abs;
    var P = global.Math.sqrt;
    var Q = global.Math.pow;
    var R = global.Math.cos;
    var S = global.Math.sin;
    var T = global.Math.tan;
    var U = global.Math.acos;
    var V = global.Math.asin;
    var W = global.Math.atan;
    var X = global.Math.atan2;
    var Y = global.Math.exp;
    var Z = global.Math.log;
    var _ = global.Math.ceil;
    var $ = global.Math.imul;
    var aa = global.Math.min;
    var ba = global.Math.clz32;
    var ca = env.abort;
    var da = env.assert;
    var ea = env.invoke_iiii;
    var fa = env.invoke_i;
    var ga = env.invoke_vi;
    var ha = env.invoke_vii;
    var ia = env.invoke_iiiiiii;
    var ja = env.invoke_ii;
    var ka = env.invoke_iii;
    var la = env._fread;
    var ma = env._fstat;
    var na = env._vimjs_check_font;
    var oa = env.__isLeapYear;
    var pa = env.__addDays;
    var qa = env._fsync;
    var ra = env._signal;
    var sa = env._emscripten_set_main_loop_timing;
    var ta = env._uname;
    var ua = env._sbrk;
    var va = env._emscripten_memcpy_big;
    var wa = env._tcgetattr;
    var xa = env._sysconf;
    var ya = env._utime;
    var za = env._vimjs_clear_block;
    var Aa = env._close;
    var Ba = env._putc;
    var Ca = env._vimjs_set_fg_color;
    var Da = env._readdir;
    var Ea = env._ftell;
    var Fa = env._isatty;
    var Ga = env._write;
    var Ha = env._mkdtemp;
    var Ia = env._getrlimit;
    var Ja = env._emscripten_sleep;
    var Ka = env._vimjs_prepare_exit;
    var La = env._lseek;
    var Ma = env._mknod;
    var Na = env._mkdir;
    var Oa = env._closedir;
    var Pa = env._ctime_r;
    var Qa = env._getuid;
    var Ra = env._send;
    var Sa = env._vimjs_get_window_height;
    var Ta = env._ctime;
    var Ua = env._vimjs_is_valid_color;
    var Va = env._vimjs_get_rgb;
    var Wa = env._setlocale;
    var Xa = env._chmod;
    var Ya = env._chown;
    var Za = env._fcntl;
    var _a = env._vimjs_draw_part_cursor;
    var $a = env._lstat;
    var ab = env._opendir;
    var bb = env._strerror_r;
    var cb = env.___setErrNo;
    var db = env._getpid;
    var eb = env._vimjs_call_shell;
    var fb = env._vimjs_set_bg_color;
    var gb = env._unlink;
    var hb = env._mktime;
    var ib = env._vimjs_draw_string;
    var jb = env._vimjs_browse;
    var kb = env._putchar;
    var lb = env._kill;
    var mb = env._printf;
    var nb = env._poll;
    var ob = env._localtime;
    var pb = env._mkport;
    var qb = env._stat;
    var rb = env._getpwnam;
    var sb = env._read;
    var tb = env._fwrite;
    var ub = env._time;
    var vb = env._fprintf;
    var wb = env._gettimeofday;
    var xb = env._chdir;
    var yb = env._exit;
    var zb = env._rename;
    var Ab = env._readdir_r;
    var Bb = env._vimjs_get_window_width;
    var Cb = env._getcwd;
    var Db = env._fchdir;
    var Eb = env._vimjs_insert_lines;
    var Fb = env._vimjs_init;
    var Gb = env._access;
    var Hb = env._vimjs_clear_all;
    var Ib = env._rmdir;
    var Jb = env.___buildEnvironment;
    var Kb = env._dup;
    var Lb = env._pwrite;
    var Mb = env._localtime_r;
    var Nb = env._tzset;
    var Ob = env._open;
    var Pb = env._readlink;
    var Qb = env._strftime;
    var Rb = env._sync;
    var Sb = env._fdopen;
    var Tb = env._fseek;
    var Ub = env._asctime_r;
    var Vb = env._getenv;
    var Wb = env._fclose;
    var Xb = env._vimjs_flash;
    var Yb = env._vimjs_set_sp_color;
    var Zb = env._recv;
    var _b = env._ftello;
    var $b = env._vimjs_beep;
    var ac = env._abort;
    var bc = env._vimjs_resize;
    var cc = env._vimjs_draw_hollow_cursor;
    var dc = env._fopen;
    var ec = env._getgid;
    var fc = env._vimjs_set_font;
    var gc = env._vimjs_get_char_width;
    var hc = env._fflush;
    var ic = env.__reallyNegative;
    var jc = env._vimjs_delete_lines;
    var kc = env._fileno;
    var lc = env.__exit;
    var mc = env._mktemp;
    var nc = env._vimjs_invert_rectangle;
    var oc = env._tcsetattr;
    var pc = env.__arraySum;
    var qc = env.__formatString;
    var rc = env._fputs;
    var sc = env._pread;
    var tc = env._fchown;
    var uc = env._getc;
    var vc = env._emscripten_set_main_loop;
    var wc = env.___errno_location;
    var xc = env._getpwuid;
    var yc = env._fgetc;
    var zc = env._fputc;
    var Ac = env._strerror;
    var Bc = env._fgets;
    var Cc = env._vimjs_haskey;
    var Dc = env._vimjs_get_char_height;
    var Ec = env._setenv;
    var Fc = env._vimjs_init_font;
    var Gc = 0.0;
    var Hc = 0;
    var Ic = env.EMTSTACKTOP | 0;
    var Jc = env.EMT_STACK_MAX | 0;
    // EMSCRIPTEN_START_FUNCS
    function Rc(f) {
        f = f | 0;
        var j = 0,
            l = 0,
            o = 0,
            p = 0,
            q = 0,
            r = 0.0;
        c[Ic >> 2] = f;
        if ((Hc | 0) == 1) Hc = 0;
        j = Ic + 8 | 0;
        o = e[f + 2 >> 1] | 0;
        Ic = Ic + (o + 1 << 3) | 0;
        if ((Hc | 0) != 2) {
            p = d[f + 1 >> 0] | 0;
            q = e[f + 6 >> 1] | 0;
            while ((p | 0) < (q | 0)) {
                h[j + (p << 3) >> 3] = 0.0;
                p = p + 1 | 0
            }
        } else {
            f = (c[j - 4 >> 2] | 0) - 8 | 0
        }
        f = f + 4 | 0;
        while (1) {
            f = f + 4 | 0;
            l = c[f >> 2] | 0;
            o = l >> 8 & 255;
            p = l >> 16 & 255;
            q = l >>> 24;
            switch (l & 255) {
                case 0:
                    c[j + (o << 3) >> 2] = c[j + (p << 3) >> 2] | 0;
                    break;
                case 1:
                    c[j + (o << 3) >> 2] = l >> 16;
                    break;
                case 2:
                    f = f + 4 | 0;
                    c[j + (o << 3) >> 2] = c[f >> 2] | 0;
                    break;
                case 3:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) + (c[j + (q << 3) >> 2] | 0) | 0;
                    break;
                case 4:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) - (c[j + (q << 3) >> 2] | 0) | 0;
                    break;
                case 5:
                    c[j + (o << 3) >> 2] = $(c[j + (p << 3) >> 2] | 0, c[j + (q << 3) >> 2] | 0) | 0;
                    break;
                case 6:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) / (c[j + (q << 3) >> 2] | 0) | 0;
                    break;
                case 7:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] >>> 0) / (c[j + (q << 3) >> 2] >>> 0) >>> 0;
                    break;
                case 8:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) % (c[j + (q << 3) >> 2] | 0) | 0;
                    break;
                case 9:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] >>> 0) % (c[j + (q << 3) >> 2] >>> 0) >>> 0;
                    break;
                case 11:
                    c[j + (o << 3) >> 2] = ~(c[j + (p << 3) >> 2] | 0);
                    break;
                case 13:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) == (c[j + (q << 3) >> 2] | 0) | 0;
                    break;
                case 14:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) != (c[j + (q << 3) >> 2] | 0) | 0;
                    break;
                case 15:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) < (c[j + (q << 3) >> 2] | 0) | 0;
                    break;
                case 16:
                    c[j + (o << 3) >> 2] = c[j + (p << 3) >> 2] >>> 0 < c[j + (q << 3) >> 2] >>> 0 | 0;
                    break;
                case 17:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) <= (c[j + (q << 3) >> 2] | 0) | 0;
                    break;
                case 18:
                    c[j + (o << 3) >> 2] = c[j + (p << 3) >> 2] >>> 0 <= c[j + (q << 3) >> 2] >>> 0 | 0;
                    break;
                case 19:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) & (c[j + (q << 3) >> 2] | 0);
                    break;
                case 20:
                    c[j + (o << 3) >> 2] = c[j + (p << 3) >> 2] | 0 | (c[j + (q << 3) >> 2] | 0);
                    break;
                case 21:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) ^ (c[j + (q << 3) >> 2] | 0);
                    break;
                case 22:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) << (c[j + (q << 3) >> 2] | 0);
                    break;
                case 24:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) >>> (c[j + (q << 3) >> 2] | 0);
                    break;
                case 25:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) + (l >> 24) | 0;
                    break;
                case 26:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) - (l >> 24) | 0;
                    break;
                case 27:
                    c[j + (o << 3) >> 2] = $(c[j + (p << 3) >> 2] | 0, l >> 24) | 0;
                    break;
                case 28:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) / (l >> 24) | 0;
                    break;
                case 29:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] >>> 0) / (q >>> 0) >>> 0;
                    break;
                case 30:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) % (l >> 24) | 0;
                    break;
                case 31:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] >>> 0) % (q >>> 0) >>> 0;
                    break;
                case 32:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) == l >> 24 | 0;
                    break;
                case 33:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) != l >> 24 | 0;
                    break;
                case 34:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) < l >> 24 | 0;
                    break;
                case 35:
                    c[j + (o << 3) >> 2] = c[j + (p << 3) >> 2] >>> 0 < q >>> 0 | 0;
                    break;
                case 36:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) <= l >> 24 | 0;
                    break;
                case 37:
                    c[j + (o << 3) >> 2] = c[j + (p << 3) >> 2] >>> 0 <= q >>> 0 | 0;
                    break;
                case 38:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) & l >> 24;
                    break;
                case 39:
                    c[j + (o << 3) >> 2] = c[j + (p << 3) >> 2] | 0 | l >> 24;
                    break;
                case 40:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) ^ l >> 24;
                    break;
                case 41:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) << q;
                    break;
                case 42:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) >> q;
                    break;
                case 43:
                    c[j + (o << 3) >> 2] = (c[j + (p << 3) >> 2] | 0) >>> q;
                    break;
                case 45:
                    if ((c[j + (p << 3) >> 2] | 0) == (c[j + (q << 3) >> 2] | 0)) {
                        f = f + 4 | 0
                    } else {
                        f = c[f + 4 >> 2] | 0;
                        f = f - 4 | 0;
                        continue
                    }
                    break;
                case 46:
                    if ((c[j + (p << 3) >> 2] | 0) != (c[j + (q << 3) >> 2] | 0)) {
                        f = f + 4 | 0
                    } else {
                        f = c[f + 4 >> 2] | 0;
                        f = f - 4 | 0;
                        continue
                    }
                    break;
                case 47:
                    if ((c[j + (p << 3) >> 2] | 0) < (c[j + (q << 3) >> 2] | 0)) {
                        f = f + 4 | 0
                    } else {
                        f = c[f + 4 >> 2] | 0;
                        f = f - 4 | 0;
                        continue
                    }
                    break;
                case 48:
                    if (c[j + (p << 3) >> 2] >>> 0 < c[j + (q << 3) >> 2] >>> 0) {
                        f = f + 4 | 0
                    } else {
                        f = c[f + 4 >> 2] | 0;
                        f = f - 4 | 0;
                        continue
                    }
                    break;
                case 49:
                    if ((c[j + (p << 3) >> 2] | 0) <= (c[j + (q << 3) >> 2] | 0)) {
                        f = f + 4 | 0
                    } else {
                        f = c[f + 4 >> 2] | 0;
                        f = f - 4 | 0;
                        continue
                    }
                    break;
                case 50:
                    if (c[j + (p << 3) >> 2] >>> 0 <= c[j + (q << 3) >> 2] >>> 0) {
                        f = f + 4 | 0
                    } else {
                        f = c[f + 4 >> 2] | 0;
                        f = f - 4 | 0;
                        continue
                    }
                    break;
                case 52:
                    if ((c[j + (p << 3) >> 2] | 0) == (c[j + (q << 3) >> 2] | 0)) {
                        f = c[f + 4 >> 2] | 0;
                        f = f - 4 | 0;
                        continue
                    } else {
                        f = f + 4 | 0
                    }
                    break;
                case 53:
                    if ((c[j + (p << 3) >> 2] | 0) != (c[j + (q << 3) >> 2] | 0)) {
                        f = c[f + 4 >> 2] | 0;
                        f = f - 4 | 0;
                        continue
                    } else {
                        f = f + 4 | 0
                    }
                    break;
                case 54:
                    if ((c[j + (p << 3) >> 2] | 0) < (c[j + (q << 3) >> 2] | 0)) {
                        f = c[f + 4 >> 2] | 0;
                        f = f - 4 | 0;
                        continue
                    } else {
                        f = f + 4 | 0
                    }
                    break;
                case 55:
                    if (c[j + (p << 3) >> 2] >>> 0 < c[j + (q << 3) >> 2] >>> 0) {
                        f = c[f + 4 >> 2] | 0;
                        f = f - 4 | 0;
                        continue
                    } else {
                        f = f + 4 | 0
                    }
                    break;
                case 56:
                    if ((c[j + (p << 3) >> 2] | 0) <= (c[j + (q << 3) >> 2] | 0)) {
                        f = c[f + 4 >> 2] | 0;
                        f = f - 4 | 0;
                        continue
                    } else {
                        f = f + 4 | 0
                    }
                    break;
                case 57:
                    if (c[j + (p << 3) >> 2] >>> 0 <= c[j + (q << 3) >> 2] >>> 0) {
                        f = c[f + 4 >> 2] | 0;
                        f = f - 4 | 0;
                        continue
                    } else {
                        f = f + 4 | 0
                    }
                    break;
                case 58:
                    h[j + (o << 3) >> 3] = +h[j + (p << 3) >> 3];
                    break;
                case 59:
                    h[j + (o << 3) >> 3] = +(l >> 16);
                    break;
                case 60:
                    f = f + 4 | 0;
                    h[j + (o << 3) >> 3] = +(c[f >> 2] | 0);
                    break;
                case 61:
                    f = f + 4 | 0;
                    h[j + (o << 3) >> 3] = +g[f >> 2];
                    break;
                case 62:
                    c[k >> 2] = c[f + 4 >> 2];
                    c[k + 4 >> 2] = c[f + 8 >> 2];
                    f = f + 8 | 0;
                    h[j + (o << 3) >> 3] = +h[k >> 3];
                    break;
                case 63:
                    h[j + (o << 3) >> 3] = +h[j + (p << 3) >> 3] + +h[j + (q << 3) >> 3];
                    break;
                case 64:
                    h[j + (o << 3) >> 3] = +h[j + (p << 3) >> 3] - +h[j + (q << 3) >> 3];
                    break;
                case 65:
                    h[j + (o << 3) >> 3] = +h[j + (p << 3) >> 3] * +h[j + (q << 3) >> 3];
                    break;
                case 68:
                    h[j + (o << 3) >> 3] = - +h[j + (p << 3) >> 3];
                    break;
                case 69:
                    c[j + (o << 3) >> 2] = +h[j + (p << 3) >> 3] == +h[j + (q << 3) >> 3] | 0;
                    break;
                case 70:
                    c[j + (o << 3) >> 2] = +h[j + (p << 3) >> 3] != +h[j + (q << 3) >> 3] | 0;
                    break;
                case 75:
                    c[j + (o << 3) >> 2] = ~~+h[j + (p << 3) >> 3];
                    break;
                case 76:
                    h[j + (o << 3) >> 3] = +(c[j + (p << 3) >> 2] | 0);
                    break;
                case 77:
                    h[j + (o << 3) >> 3] = +(c[j + (p << 3) >> 2] >>> 0);
                    break;
                case 78:
                    c[j + (o << 3) >> 2] = a[c[j + (p << 3) >> 2] >> 0];
                    break;
                case 79:
                    c[j + (o << 3) >> 2] = d[c[j + (p << 3) >> 2] >> 0];
                    break;
                case 80:
                    c[j + (o << 3) >> 2] = b[c[j + (p << 3) >> 2] >> 1];
                    break;
                case 81:
                    c[j + (o << 3) >> 2] = e[c[j + (p << 3) >> 2] >> 1];
                    break;
                case 82:
                    c[j + (o << 3) >> 2] = c[c[j + (p << 3) >> 2] >> 2];
                    break;
                case 83:
                    a[c[j + (o << 3) >> 2] >> 0] = c[j + (p << 3) >> 2] | 0;
                    break;
                case 84:
                    b[c[j + (o << 3) >> 2] >> 1] = c[j + (p << 3) >> 2] | 0;
                    break;
                case 85:
                    c[c[j + (o << 3) >> 2] >> 2] = c[j + (p << 3) >> 2] | 0;
                    break;
                case 86:
                    h[j + (o << 3) >> 3] = +h[c[j + (p << 3) >> 2] >> 3];
                    break;
                case 87:
                    h[c[j + (o << 3) >> 2] >> 3] = +h[j + (p << 3) >> 3];
                    break;
                case 90:
                    c[j + (o << 3) >> 2] = a[(c[j + (p << 3) >> 2] | 0) + (c[j + (q << 3) >> 2] | 0) >> 0];
                    break;
                case 91:
                    c[j + (o << 3) >> 2] = d[(c[j + (p << 3) >> 2] | 0) + (c[j + (q << 3) >> 2] | 0) >> 0];
                    break;
                case 92:
                    c[j + (o << 3) >> 2] = b[(c[j + (p << 3) >> 2] | 0) + (c[j + (q << 3) >> 2] | 0) >> 1];
                    break;
                case 93:
                    c[j + (o << 3) >> 2] = e[(c[j + (p << 3) >> 2] | 0) + (c[j + (q << 3) >> 2] | 0) >> 1];
                    break;
                case 94:
                    c[j + (o << 3) >> 2] = c[(c[j + (p << 3) >> 2] | 0) + (c[j + (q << 3) >> 2] | 0) >> 2];
                    break;
                case 95:
                    a[(c[j + (o << 3) >> 2] | 0) + (c[j + (p << 3) >> 2] | 0) >> 0] = c[j + (q << 3) >> 2] | 0;
                    break;
                case 96:
                    b[(c[j + (o << 3) >> 2] | 0) + (c[j + (p << 3) >> 2] | 0) >> 1] = c[j + (q << 3) >> 2] | 0;
                    break;
                case 97:
                    c[(c[j + (o << 3) >> 2] | 0) + (c[j + (p << 3) >> 2] | 0) >> 2] = c[j + (q << 3) >> 2] | 0;
                    break;
                case 102:
                    c[j + (o << 3) >> 2] = a[(c[j + (p << 3) >> 2] | 0) + (l >> 24) >> 0];
                    break;
                case 103:
                    c[j + (o << 3) >> 2] = d[(c[j + (p << 3) >> 2] | 0) + (l >> 24) >> 0];
                    break;
                case 104:
                    c[j + (o << 3) >> 2] = b[(c[j + (p << 3) >> 2] | 0) + (l >> 24) >> 1];
                    break;
                case 105:
                    c[j + (o << 3) >> 2] = e[(c[j + (p << 3) >> 2] | 0) + (l >> 24) >> 1];
                    break;
                case 106:
                    c[j + (o << 3) >> 2] = c[(c[j + (p << 3) >> 2] | 0) + (l >> 24) >> 2];
                    break;
                case 107:
                    a[(c[j + (o << 3) >> 2] | 0) + (p << 24 >> 24) >> 0] = c[j + (q << 3) >> 2] | 0;
                    break;
                case 108:
                    b[(c[j + (o << 3) >> 2] | 0) + (p << 24 >> 24) >> 1] = c[j + (q << 3) >> 2] | 0;
                    break;
                case 109:
                    c[(c[j + (o << 3) >> 2] | 0) + (p << 24 >> 24) >> 2] = c[j + (q << 3) >> 2] | 0;
                    break;
                case 116:
                    c[c[j + (o << 3) >> 2] >> 2] = c[c[j + (p << 3) >> 2] >> 2] | 0;
                    break;
                case 119:
                    f = f + (l >> 16 << 2) | 0;
                    f = f - 4 | 0;
                    continue;
                case 120:
                    if (c[j + (o << 3) >> 2] | 0) {
                        f = f + (l >> 16 << 2) | 0;
                        f = f - 4 | 0;
                        continue
                    }
                    break;
                case 121:
                    if (!(c[j + (o << 3) >> 2] | 0)) {
                        f = f + (l >> 16 << 2) | 0;
                        f = f - 4 | 0;
                        continue
                    }
                    break;
                case 125:
                    f = f + 4 | 0;
                    c[j + (o << 3) >> 2] = c[j + (p << 3) >> 2] | 0 ? c[j + (q << 3) >> 2] | 0 : c[j + ((d[f >> 0] | 0) << 3) >> 2] | 0;
                    break;
                case 127:
                    c[j + (o << 3) >> 2] = k;
                    break;
                case 128:
                    c[j + (o << 3) >> 2] = D;
                    break;
                case 129:
                    D = c[j + (o << 3) >> 2] | 0;
                    break;
                case 130:
                    switch (p | 0) {
                        case 0: {
                            c[j + (o << 3) >> 2] = n;
                            continue
                        }
                        case 1: {
                            c[j + (o << 3) >> 2] = m;
                            continue
                        }
                        default:
                    }
                    break;
                case 134:
                    q = d[(c[f + 4 >> 2] | 0) + 1 | 0] | 0;
                    p = 0;
                    if ((Hc | 0) != 2) {
                        while ((p | 0) < (q | 0)) {
                            c[Ic + (p << 3) + 8 >> 2] = c[j + (d[f + 8 + p >> 0] << 3) >> 2] | 0;
                            c[Ic + (p << 3) + 12 >> 2] = c[j + (d[f + 8 + p >> 0] << 3) + 4 >> 2] | 0;
                            p = p + 1 | 0
                        }
                    }
                    c[j - 4 >> 2] = f;
                    Rc(c[f + 4 >> 2] | 0);
                    if ((Hc | 0) == 1) {
                        Ic = j - 8 | 0;
                        return
                    }
                    c[j + (o << 3) >> 2] = c[Ic >> 2] | 0;
                    c[j + (o << 3) + 4 >> 2] = c[Ic + 4 >> 2] | 0;
                    f = f + (4 + q + 3 >> 2 << 2) | 0;
                    break;
                case 135:
                    switch (l >>> 16 | 0) {
                        case 0: {
                            c[j - 4 >> 2] = f;
                            q = Kg(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 1: {
                            c[j - 4 >> 2] = f;
                            q = Ql(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 2: {
                            c[j - 4 >> 2] = f;
                            q = uk(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 3: {
                            c[j - 4 >> 2] = f;
                            q = Kc[c[j + (d[f + 4 >> 0] << 3) >> 2] & 15](c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0, c[j + (d[f + 7 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 4: {
                            c[j - 4 >> 2] = f;
                            q = qi(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 5: {
                            c[j - 4 >> 2] = f;
                            Mc[c[j + (d[f + 4 >> 0] << 3) >> 2] & 255](c[j + (d[f + 5 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 6: {
                            c[j - 4 >> 2] = f;
                            q = wc() | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            continue
                        }
                        case 7: {
                            c[j - 4 >> 2] = f;
                            q = oh(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 8: {
                            c[j - 4 >> 2] = f;
                            q = Uj(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 9: {
                            c[j - 4 >> 2] = f;
                            q = Ac(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 10: {
                            c[j - 4 >> 2] = f;
                            q = ak(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 11: {
                            c[j - 4 >> 2] = f;
                            q = qb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 12: {
                            c[j - 4 >> 2] = f;
                            q = Gb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 13: {
                            c[j - 4 >> 2] = f;
                            q = $a(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 14: {
                            c[j - 4 >> 2] = f;
                            q = Ob(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 15: {
                            c[j - 4 >> 2] = f;
                            q = tc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 16: {
                            c[j - 4 >> 2] = f;
                            q = Aa(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 17: {
                            c[j - 4 >> 2] = f;
                            q = gb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 18: {
                            c[j - 4 >> 2] = f;
                            q = ya(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 19: {
                            c[j - 4 >> 2] = f;
                            q = Qa() | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            continue
                        }
                        case 20: {
                            c[j - 4 >> 2] = f;
                            q = ec() | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            continue
                        }
                        case 21: {
                            c[j - 4 >> 2] = f;
                            q = qa(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 22: {
                            c[j - 4 >> 2] = f;
                            q = Kj(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 23: {
                            c[j - 4 >> 2] = f;
                            q = ub(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 24: {
                            c[j - 4 >> 2] = f;
                            q = Wa(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 25: {
                            c[j - 4 >> 2] = f;
                            q = dc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 26: {
                            c[j - 4 >> 2] = f;
                            q = mb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 27: {
                            c[j - 4 >> 2] = f;
                            q = kb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 28: {
                            c[j - 4 >> 2] = f;
                            q = Kb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 29: {
                            c[j - 4 >> 2] = f;
                            q = La(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 30: {
                            c[j - 4 >> 2] = f;
                            q = Za(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 31: {
                            c[j - 4 >> 2] = f;
                            Nc[c[j + (d[f + 4 >> 0] << 3) >> 2] & 255](c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 32: {
                            c[j - 4 >> 2] = f;
                            q = wb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 33: {
                            c[j - 4 >> 2] = f;
                            q = Tb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 34: {
                            c[j - 4 >> 2] = f;
                            q = Ea(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 35: {
                            c[j - 4 >> 2] = f;
                            q = Wb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 36: {
                            c[j - 4 >> 2] = f;
                            q = la(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0, c[j + (d[f + 7 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 37: {
                            c[j - 4 >> 2] = f;
                            q = _b(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 38: {
                            c[j - 4 >> 2] = f;
                            q = ma(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 39: {
                            c[j - 4 >> 2] = f;
                            q = Ta(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 40: {
                            c[j - 4 >> 2] = f;
                            ac();
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            continue
                        }
                        case 41: {
                            c[j - 4 >> 2] = f;
                            q = Qc[c[j + (d[f + 4 >> 0] << 3) >> 2] & 15](c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 42: {
                            c[j - 4 >> 2] = f;
                            q = vb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 43: {
                            c[j - 4 >> 2] = f;
                            q = Ba(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 44: {
                            c[j - 4 >> 2] = f;
                            q = rc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 45: {
                            c[j - 4 >> 2] = f;
                            q = rb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 46: {
                            c[j - 4 >> 2] = f;
                            q = ab(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 47: {
                            c[j - 4 >> 2] = f;
                            q = Da(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 48: {
                            c[j - 4 >> 2] = f;
                            q = Oa(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 49: {
                            c[j - 4 >> 2] = f;
                            q = Pb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 50: {
                            c[j - 4 >> 2] = f;
                            q = Pc[c[j + (d[f + 4 >> 0] << 3) >> 2] & 3](c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 51: {
                            c[j - 4 >> 2] = f;
                            q = ba(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 52: {
                            c[j - 4 >> 2] = f;
                            q = oj(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 53: {
                            c[j - 4 >> 2] = f;
                            Zc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 54: {
                            c[j - 4 >> 2] = f;
                            q = Vb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 55: {
                            c[j - 4 >> 2] = f;
                            q = Ec(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 56: {
                            c[j - 4 >> 2] = f;
                            q = zb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 57: {
                            c[j - 4 >> 2] = f;
                            q = lb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 58: {
                            c[j - 4 >> 2] = f;
                            q = Db(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 59: {
                            c[j - 4 >> 2] = f;
                            q = Lc[c[j + (d[f + 4 >> 0] << 3) >> 2] & 3]() | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 60: {
                            c[j - 4 >> 2] = f;
                            q = zc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 61: {
                            c[j - 4 >> 2] = f;
                            q = Bc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 62: {
                            c[j - 4 >> 2] = f;
                            q = uc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 63: {
                            c[j - 4 >> 2] = f;
                            Rb();
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            continue
                        }
                        case 64: {
                            c[j - 4 >> 2] = f;
                            q = sb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 65: {
                            c[j - 4 >> 2] = f;
                            q = Fa(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 66: {
                            c[j - 4 >> 2] = f;
                            q = Ha(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 67: {
                            c[j - 4 >> 2] = f;
                            q = wa(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 68: {
                            c[j - 4 >> 2] = f;
                            q = oc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 69: {
                            c[j - 4 >> 2] = f;
                            q = tb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0, c[j + (d[f + 7 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 70: {
                            c[j - 4 >> 2] = f;
                            q = Ib(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 71: {
                            c[j - 4 >> 2] = f;
                            q = xa(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 72: {
                            c[j - 4 >> 2] = f;
                            q = Ia(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 73: {
                            c[j - 4 >> 2] = f;
                            q = hc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 74: {
                            c[j - 4 >> 2] = f;
                            Fc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 75: {
                            c[j - 4 >> 2] = f;
                            q = gc() | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            continue
                        }
                        case 76: {
                            c[j - 4 >> 2] = f;
                            q = Dc() | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            continue
                        }
                        case 77: {
                            c[j - 4 >> 2] = f;
                            q = Bb() | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            continue
                        }
                        case 78: {
                            c[j - 4 >> 2] = f;
                            q = Sa() | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            continue
                        }
                        case 79: {
                            c[j - 4 >> 2] = f;
                            q = ob(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 80: {
                            c[j - 4 >> 2] = f;
                            q = Qb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0, c[j + (d[f + 7 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 81: {
                            c[j - 4 >> 2] = f;
                            q = Tc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 82: {
                            c[j - 4 >> 2] = f;
                            Fb();
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            continue
                        }
                        case 83: {
                            c[j - 4 >> 2] = f;
                            q = Ga(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 84: {
                            c[j - 4 >> 2] = f;
                            q = db() | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            continue
                        }
                        case 85: {
                            c[j - 4 >> 2] = f;
                            q = Sb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 86: {
                            c[j - 4 >> 2] = f;
                            q = xc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 87: {
                            c[j - 4 >> 2] = f;
                            Ja(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 88: {
                            c[j - 4 >> 2] = f;
                            jb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0, c[j + (d[f + 7 >> 0] << 3) >> 2] | 0, c[j + (d[f + 8 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 8 | 0;
                            continue
                        }
                        case 89: {
                            c[j - 4 >> 2] = f;
                            q = nb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 90: {
                            c[j - 4 >> 2] = f;
                            q = Oc[c[j + (d[f + 4 >> 0] << 3) >> 2] & 3](c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0, c[j + (d[f + 7 >> 0] << 3) >> 2] | 0, c[j + (d[f + 8 >> 0] << 3) >> 2] | 0, c[j + (d[f + 9 >> 0] << 3) >> 2] | 0, c[j + (d[f + 10 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 8 | 0;
                            continue
                        }
                        case 91: {
                            c[j - 4 >> 2] = f;
                            q = ta(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 92: {
                            c[j - 4 >> 2] = f;
                            q = ra(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 93: {
                            c[j - 4 >> 2] = f;
                            q = xb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 94: {
                            c[j - 4 >> 2] = f;
                            q = Cb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 95: {
                            c[j - 4 >> 2] = f;
                            q = na(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 96: {
                            c[j - 4 >> 2] = f;
                            fb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 97: {
                            c[j - 4 >> 2] = f;
                            Eb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0, c[j + (d[f + 7 >> 0] << 3) >> 2] | 0, c[j + (d[f + 8 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 8 | 0;
                            continue
                        }
                        case 98: {
                            c[j - 4 >> 2] = f;
                            jc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0, c[j + (d[f + 7 >> 0] << 3) >> 2] | 0, c[j + (d[f + 8 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 8 | 0;
                            continue
                        }
                        case 99: {
                            c[j - 4 >> 2] = f;
                            Ca(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 100: {
                            c[j - 4 >> 2] = f;
                            _a(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0, c[j + (d[f + 7 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 101: {
                            c[j - 4 >> 2] = f;
                            za(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0, c[j + (d[f + 7 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 102: {
                            c[j - 4 >> 2] = f;
                            ib(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0, c[j + (d[f + 7 >> 0] << 3) >> 2] | 0, c[j + (d[f + 8 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 8 | 0;
                            continue
                        }
                        case 103: {
                            c[j - 4 >> 2] = f;
                            bc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 104: {
                            c[j - 4 >> 2] = f;
                            nc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0, c[j + (d[f + 6 >> 0] << 3) >> 2] | 0, c[j + (d[f + 7 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 105: {
                            c[j - 4 >> 2] = f;
                            q = Na(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 106: {
                            c[j - 4 >> 2] = f;
                            cc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 107: {
                            c[j - 4 >> 2] = f;
                            q = Ua(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 108: {
                            c[j - 4 >> 2] = f;
                            q = Va(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 109: {
                            c[j - 4 >> 2] = f;
                            q = Xa(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 110: {
                            c[j - 4 >> 2] = f;
                            q = eb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0, c[j + (d[f + 5 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 111: {
                            c[j - 4 >> 2] = f;
                            q = Ka() | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            continue
                        }
                        case 112: {
                            c[j - 4 >> 2] = f;
                            yb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 113: {
                            c[j - 4 >> 2] = f;
                            q = Cc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0) | 0;
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            } else c[j + (o << 3) >> 2] = q;
                            f = f + 4 | 0;
                            continue
                        }
                        case 114: {
                            c[j - 4 >> 2] = f;
                            Hb();
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            continue
                        }
                        case 115: {
                            c[j - 4 >> 2] = f;
                            ca(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 116: {
                            c[j - 4 >> 2] = f;
                            Yb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 117: {
                            c[j - 4 >> 2] = f;
                            fc(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 118: {
                            c[j - 4 >> 2] = f;
                            Xb(c[j + (d[f + 4 >> 0] << 3) >> 2] | 0);
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            f = f + 4 | 0;
                            continue
                        }
                        case 119: {
                            c[j - 4 >> 2] = f;
                            $b();
                            if ((Hc | 0) == 1) {
                                Ic = j - 8 | 0;
                                return
                            };
                            continue
                        }
                        default:
                    }
                    break;
                case 136:
                    c[j + (o << 3) >> 2] = i;
                    break;
                case 137:
                    i = c[j + (o << 3) >> 2] | 0;
                    break;
                case 138:
                    q = c[j + (q << 3) >> 2] | 0;
                    o = (c[j + (o << 3) >> 2] | 0) - (c[j + (p << 3) >> 2] | 0) >>> 0;
                    if (o >>> 0 >= q >>> 0) {
                        f = f + (q << 2) | 0;
                        continue
                    }
                    f = c[f + 4 + (o << 2) >> 2] | 0;
                    f = f - 4 | 0;
                    continue;
                case 139:
                    Ic = j - 8 | 0;
                    c[Ic >> 2] = c[j + (o << 3) >> 2] | 0;
                    c[Ic + 4 >> 2] = c[j + (o << 3) + 4 >> 2] | 0;
                    return;
                default:
            }
        }
    }

    function Sc() {
        if ((Hc | 0) != 2) {}
        Rc(220688);
        return c[Ic >> 2] | 0
    }

    function Tc(a) {
        a = a | 0;
        var b = 0,
            d = 0,
            e = 0,
            f = 0,
            g = 0,
            h = 0,
            j = 0,
            k = 0,
            l = 0,
            m = 0,
            n = 0,
            o = 0,
            p = 0,
            q = 0,
            r = 0,
            s = 0,
            t = 0,
            u = 0,
            v = 0,
            w = 0,
            x = 0,
            y = 0,
            z = 0,
            A = 0,
            B = 0,
            C = 0,
            D = 0,
            E = 0;
        E = i;
        do
            if (a >>> 0 < 245) {
                if (a >>> 0 < 11) p = 16;
                else p = a + 11 & -8;
                a = p >>> 3;
                l = c[32314] | 0;
                j = l >>> a;
                if (j & 3) {
                    e = (j & 1 ^ 1) + a | 0;
                    f = e << 1;
                    b = 129296 + (f << 2) | 0;
                    f = 129296 + (f + 2 << 2) | 0;
                    g = c[f >> 2] | 0;
                    h = g + 8 | 0;
                    j = c[h >> 2] | 0;
                    do
                        if ((b | 0) == (j | 0)) c[32314] = l & ~(1 << e);
                        else {
                            if (j >>> 0 < (c[32318] | 0) >>> 0) ac();
                            d = j + 12 | 0;
                            if ((c[d >> 2] | 0) == (g | 0)) {
                                c[d >> 2] = b;
                                c[f >> 2] = j;
                                break
                            } else ac()
                        } while (0);
                    x = e << 3;
                    c[g + 4 >> 2] = x | 3;
                    x = g + (x | 4) | 0;
                    c[x >> 2] = c[x >> 2] | 1;
                    x = h;
                    i = E;
                    return x | 0
                }
                b = c[32316] | 0;
                if (p >>> 0 > b >>> 0) {
                    if (j) {
                        f = 2 << a;
                        f = j << a & (f | 0 - f);
                        f = (f & 0 - f) + -1 | 0;
                        k = f >>> 12 & 16;
                        f = f >>> k;
                        e = f >>> 5 & 8;
                        f = f >>> e;
                        d = f >>> 2 & 4;
                        f = f >>> d;
                        g = f >>> 1 & 2;
                        f = f >>> g;
                        h = f >>> 1 & 1;
                        h = (e | k | d | g | h) + (f >>> h) | 0;
                        f = h << 1;
                        g = 129296 + (f << 2) | 0;
                        f = 129296 + (f + 2 << 2) | 0;
                        d = c[f >> 2] | 0;
                        k = d + 8 | 0;
                        e = c[k >> 2] | 0;
                        do
                            if ((g | 0) == (e | 0)) {
                                c[32314] = l & ~(1 << h);
                                m = b
                            } else {
                                if (e >>> 0 < (c[32318] | 0) >>> 0) ac();
                                j = e + 12 | 0;
                                if ((c[j >> 2] | 0) == (d | 0)) {
                                    c[j >> 2] = g;
                                    c[f >> 2] = e;
                                    m = c[32316] | 0;
                                    break
                                } else ac()
                            } while (0);
                        x = h << 3;
                        b = x - p | 0;
                        c[d + 4 >> 2] = p | 3;
                        a = d + p | 0;
                        c[d + (p | 4) >> 2] = b | 1;
                        c[d + x >> 2] = b;
                        if (m) {
                            e = c[32319] | 0;
                            g = m >>> 3;
                            j = g << 1;
                            f = 129296 + (j << 2) | 0;
                            h = c[32314] | 0;
                            g = 1 << g;
                            if (!(h & g)) {
                                c[32314] = h | g;
                                n = 129296 + (j + 2 << 2) | 0;
                                o = f
                            } else {
                                h = 129296 + (j + 2 << 2) | 0;
                                j = c[h >> 2] | 0;
                                if (j >>> 0 < (c[32318] | 0) >>> 0) ac();
                                else {
                                    n = h;
                                    o = j
                                }
                            }
                            c[n >> 2] = e;
                            c[o + 12 >> 2] = e;
                            c[e + 8 >> 2] = o;
                            c[e + 12 >> 2] = f
                        }
                        c[32316] = b;
                        c[32319] = a;
                        x = k;
                        i = E;
                        return x | 0
                    }
                    j = c[32315] | 0;
                    if (j) {
                        h = (j & 0 - j) + -1 | 0;
                        w = h >>> 12 & 16;
                        h = h >>> w;
                        v = h >>> 5 & 8;
                        h = h >>> v;
                        x = h >>> 2 & 4;
                        h = h >>> x;
                        j = h >>> 1 & 2;
                        h = h >>> j;
                        g = h >>> 1 & 1;
                        g = c[129560 + ((v | w | x | j | g) + (h >>> g) << 2) >> 2] | 0;
                        h = (c[g + 4 >> 2] & -8) - p | 0;
                        j = g;
                        while (1) {
                            d = c[j + 16 >> 2] | 0;
                            if (!d) {
                                d = c[j + 20 >> 2] | 0;
                                if (!d) {
                                    l = h;
                                    b = g;
                                    break
                                }
                            }
                            j = (c[d + 4 >> 2] & -8) - p | 0;
                            x = j >>> 0 < h >>> 0;
                            h = x ? j : h;
                            j = d;
                            g = x ? d : g
                        }
                        k = c[32318] | 0;
                        if (b >>> 0 < k >>> 0) ac();
                        m = b + p | 0;
                        if (b >>> 0 >= m >>> 0) ac();
                        a = c[b + 24 >> 2] | 0;
                        g = c[b + 12 >> 2] | 0;
                        do
                            if ((g | 0) == (b | 0)) {
                                h = b + 20 | 0;
                                j = c[h >> 2] | 0;
                                if (!j) {
                                    h = b + 16 | 0;
                                    j = c[h >> 2] | 0;
                                    if (!j) {
                                        e = 0;
                                        break
                                    }
                                }
                                while (1) {
                                    g = j + 20 | 0;
                                    f = c[g >> 2] | 0;
                                    if (f) {
                                        j = f;
                                        h = g;
                                        continue
                                    }
                                    g = j + 16 | 0;
                                    f = c[g >> 2] | 0;
                                    if (!f) break;
                                    else {
                                        j = f;
                                        h = g
                                    }
                                }
                                if (h >>> 0 < k >>> 0) ac();
                                else {
                                    c[h >> 2] = 0;
                                    e = j;
                                    break
                                }
                            } else {
                                f = c[b + 8 >> 2] | 0;
                                if (f >>> 0 < k >>> 0) ac();
                                j = f + 12 | 0;
                                if ((c[j >> 2] | 0) != (b | 0)) ac();
                                h = g + 8 | 0;
                                if ((c[h >> 2] | 0) == (b | 0)) {
                                    c[j >> 2] = g;
                                    c[h >> 2] = f;
                                    e = g;
                                    break
                                } else ac()
                            } while (0);
                        do
                            if (a) {
                                j = c[b + 28 >> 2] | 0;
                                h = 129560 + (j << 2) | 0;
                                if ((b | 0) == (c[h >> 2] | 0)) {
                                    c[h >> 2] = e;
                                    if (!e) {
                                        c[32315] = c[32315] & ~(1 << j);
                                        break
                                    }
                                } else {
                                    if (a >>> 0 < (c[32318] | 0) >>> 0) ac();
                                    j = a + 16 | 0;
                                    if ((c[j >> 2] | 0) == (b | 0)) c[j >> 2] = e;
                                    else c[a + 20 >> 2] = e;
                                    if (!e) break
                                }
                                h = c[32318] | 0;
                                if (e >>> 0 < h >>> 0) ac();
                                c[e + 24 >> 2] = a;
                                j = c[b + 16 >> 2] | 0;
                                do
                                    if (j)
                                        if (j >>> 0 < h >>> 0) ac();
                                        else {
                                            c[e + 16 >> 2] = j;
                                            c[j + 24 >> 2] = e;
                                            break
                                        } while (0);
                                j = c[b + 20 >> 2] | 0;
                                if (j)
                                    if (j >>> 0 < (c[32318] | 0) >>> 0) ac();
                                    else {
                                        c[e + 20 >> 2] = j;
                                        c[j + 24 >> 2] = e;
                                        break
                                    }
                            } while (0);
                        if (l >>> 0 < 16) {
                            x = l + p | 0;
                            c[b + 4 >> 2] = x | 3;
                            x = b + (x + 4) | 0;
                            c[x >> 2] = c[x >> 2] | 1
                        } else {
                            c[b + 4 >> 2] = p | 3;
                            c[b + (p | 4) >> 2] = l | 1;
                            c[b + (l + p) >> 2] = l;
                            d = c[32316] | 0;
                            if (d) {
                                e = c[32319] | 0;
                                g = d >>> 3;
                                j = g << 1;
                                f = 129296 + (j << 2) | 0;
                                h = c[32314] | 0;
                                g = 1 << g;
                                if (!(h & g)) {
                                    c[32314] = h | g;
                                    q = 129296 + (j + 2 << 2) | 0;
                                    r = f
                                } else {
                                    j = 129296 + (j + 2 << 2) | 0;
                                    h = c[j >> 2] | 0;
                                    if (h >>> 0 < (c[32318] | 0) >>> 0) ac();
                                    else {
                                        q = j;
                                        r = h
                                    }
                                }
                                c[q >> 2] = e;
                                c[r + 12 >> 2] = e;
                                c[e + 8 >> 2] = r;
                                c[e + 12 >> 2] = f
                            }
                            c[32316] = l;
                            c[32319] = m
                        }
                        x = b + 8 | 0;
                        i = E;
                        return x | 0
                    }
                }
            } else if (a >>> 0 > 4294967231) p = -1;
        else {
            a = a + 11 | 0;
            p = a & -8;
            d = c[32315] | 0;
            if (d) {
                h = 0 - p | 0;
                a = a >>> 8;
                if (!a) l = 0;
                else if (p >>> 0 > 16777215) l = 31;
                else {
                    q = (a + 1048320 | 0) >>> 16 & 8;
                    r = a << q;
                    o = (r + 520192 | 0) >>> 16 & 4;
                    r = r << o;
                    l = (r + 245760 | 0) >>> 16 & 2;
                    l = 14 - (o | q | l) + (r << l >>> 15) | 0;
                    l = p >>> (l + 7 | 0) & 1 | l << 1
                }
                g = c[129560 + (l << 2) >> 2] | 0;
                a: do
                    if (!g) {
                        a = 0;
                        j = 0
                    } else {
                        if ((l | 0) == 31) j = 0;
                        else j = 25 - (l >>> 1) | 0;
                        f = h;
                        a = 0;
                        e = p << j;
                        j = 0;
                        while (1) {
                            k = c[g + 4 >> 2] & -8;
                            h = k - p | 0;
                            if (h >>> 0 < f >>> 0)
                                if ((k | 0) == (p | 0)) {
                                    a = g;
                                    j = g;
                                    break a
                                } else j = g;
                            else h = f;
                            r = c[g + 20 >> 2] | 0;
                            g = c[g + (e >>> 31 << 2) + 16 >> 2] | 0;
                            a = (r | 0) == 0 | (r | 0) == (g | 0) ? a : r;
                            if (!g) break;
                            else {
                                f = h;
                                e = e << 1
                            }
                        }
                    }
                while (0);
                if ((a | 0) == 0 & (j | 0) == 0) {
                    a = 2 << l;
                    a = d & (a | 0 - a);
                    if (!a) break;
                    r = (a & 0 - a) + -1 | 0;
                    n = r >>> 12 & 16;
                    r = r >>> n;
                    m = r >>> 5 & 8;
                    r = r >>> m;
                    o = r >>> 2 & 4;
                    r = r >>> o;
                    q = r >>> 1 & 2;
                    r = r >>> q;
                    a = r >>> 1 & 1;
                    a = c[129560 + ((m | n | o | q | a) + (r >>> a) << 2) >> 2] | 0
                }
                if (!a) {
                    n = h;
                    m = j
                } else
                    while (1) {
                        r = (c[a + 4 >> 2] & -8) - p | 0;
                        g = r >>> 0 < h >>> 0;
                        h = g ? r : h;
                        j = g ? a : j;
                        g = c[a + 16 >> 2] | 0;
                        if (g) {
                            a = g;
                            continue
                        }
                        a = c[a + 20 >> 2] | 0;
                        if (!a) {
                            n = h;
                            m = j;
                            break
                        }
                    }
                if (m)
                    if (n >>> 0 < ((c[32316] | 0) - p | 0) >>> 0) {
                        k = c[32318] | 0;
                        if (m >>> 0 < k >>> 0) ac();
                        o = m + p | 0;
                        if (m >>> 0 >= o >>> 0) ac();
                        a = c[m + 24 >> 2] | 0;
                        g = c[m + 12 >> 2] | 0;
                        do
                            if ((g | 0) == (m | 0)) {
                                h = m + 20 | 0;
                                j = c[h >> 2] | 0;
                                if (!j) {
                                    h = m + 16 | 0;
                                    j = c[h >> 2] | 0;
                                    if (!j) {
                                        b = 0;
                                        break
                                    }
                                }
                                while (1) {
                                    g = j + 20 | 0;
                                    f = c[g >> 2] | 0;
                                    if (f) {
                                        j = f;
                                        h = g;
                                        continue
                                    }
                                    g = j + 16 | 0;
                                    f = c[g >> 2] | 0;
                                    if (!f) break;
                                    else {
                                        j = f;
                                        h = g
                                    }
                                }
                                if (h >>> 0 < k >>> 0) ac();
                                else {
                                    c[h >> 2] = 0;
                                    b = j;
                                    break
                                }
                            } else {
                                f = c[m + 8 >> 2] | 0;
                                if (f >>> 0 < k >>> 0) ac();
                                j = f + 12 | 0;
                                if ((c[j >> 2] | 0) != (m | 0)) ac();
                                h = g + 8 | 0;
                                if ((c[h >> 2] | 0) == (m | 0)) {
                                    c[j >> 2] = g;
                                    c[h >> 2] = f;
                                    b = g;
                                    break
                                } else ac()
                            } while (0);
                        do
                            if (a) {
                                j = c[m + 28 >> 2] | 0;
                                h = 129560 + (j << 2) | 0;
                                if ((m | 0) == (c[h >> 2] | 0)) {
                                    c[h >> 2] = b;
                                    if (!b) {
                                        c[32315] = c[32315] & ~(1 << j);
                                        break
                                    }
                                } else {
                                    if (a >>> 0 < (c[32318] | 0) >>> 0) ac();
                                    j = a + 16 | 0;
                                    if ((c[j >> 2] | 0) == (m | 0)) c[j >> 2] = b;
                                    else c[a + 20 >> 2] = b;
                                    if (!b) break
                                }
                                h = c[32318] | 0;
                                if (b >>> 0 < h >>> 0) ac();
                                c[b + 24 >> 2] = a;
                                j = c[m + 16 >> 2] | 0;
                                do
                                    if (j)
                                        if (j >>> 0 < h >>> 0) ac();
                                        else {
                                            c[b + 16 >> 2] = j;
                                            c[j + 24 >> 2] = b;
                                            break
                                        } while (0);
                                j = c[m + 20 >> 2] | 0;
                                if (j)
                                    if (j >>> 0 < (c[32318] | 0) >>> 0) ac();
                                    else {
                                        c[b + 20 >> 2] = j;
                                        c[j + 24 >> 2] = b;
                                        break
                                    }
                            } while (0);
                        b: do
                            if (n >>> 0 < 16) {
                                x = n + p | 0;
                                c[m + 4 >> 2] = x | 3;
                                x = m + (x + 4) | 0;
                                c[x >> 2] = c[x >> 2] | 1
                            } else {
                                c[m + 4 >> 2] = p | 3;
                                c[m + (p | 4) >> 2] = n | 1;
                                c[m + (n + p) >> 2] = n;
                                j = n >>> 3;
                                if (n >>> 0 < 256) {
                                    h = j << 1;
                                    f = 129296 + (h << 2) | 0;
                                    g = c[32314] | 0;
                                    j = 1 << j;
                                    do
                                        if (!(g & j)) {
                                            c[32314] = g | j;
                                            s = 129296 + (h + 2 << 2) | 0;
                                            t = f
                                        } else {
                                            j = 129296 + (h + 2 << 2) | 0;
                                            h = c[j >> 2] | 0;
                                            if (h >>> 0 >= (c[32318] | 0) >>> 0) {
                                                s = j;
                                                t = h;
                                                break
                                            }
                                            ac()
                                        } while (0);
                                    c[s >> 2] = o;
                                    c[t + 12 >> 2] = o;
                                    c[m + (p + 8) >> 2] = t;
                                    c[m + (p + 12) >> 2] = f;
                                    break
                                }
                                d = n >>> 8;
                                if (!d) f = 0;
                                else if (n >>> 0 > 16777215) f = 31;
                                else {
                                    w = (d + 1048320 | 0) >>> 16 & 8;
                                    x = d << w;
                                    v = (x + 520192 | 0) >>> 16 & 4;
                                    x = x << v;
                                    f = (x + 245760 | 0) >>> 16 & 2;
                                    f = 14 - (v | w | f) + (x << f >>> 15) | 0;
                                    f = n >>> (f + 7 | 0) & 1 | f << 1
                                }
                                j = 129560 + (f << 2) | 0;
                                c[m + (p + 28) >> 2] = f;
                                c[m + (p + 20) >> 2] = 0;
                                c[m + (p + 16) >> 2] = 0;
                                h = c[32315] | 0;
                                g = 1 << f;
                                if (!(h & g)) {
                                    c[32315] = h | g;
                                    c[j >> 2] = o;
                                    c[m + (p + 24) >> 2] = j;
                                    c[m + (p + 12) >> 2] = o;
                                    c[m + (p + 8) >> 2] = o;
                                    break
                                }
                                d = c[j >> 2] | 0;
                                if ((f | 0) == 31) b = 0;
                                else b = 25 - (f >>> 1) | 0;
                                c: do
                                    if ((c[d + 4 >> 2] & -8 | 0) == (n | 0)) u = d;
                                    else {
                                        h = n << b;
                                        while (1) {
                                            b = d + (h >>> 31 << 2) + 16 | 0;
                                            j = c[b >> 2] | 0;
                                            if (!j) break;
                                            if ((c[j + 4 >> 2] & -8 | 0) == (n | 0)) {
                                                u = j;
                                                break c
                                            } else {
                                                h = h << 1;
                                                d = j
                                            }
                                        }
                                        if (b >>> 0 < (c[32318] | 0) >>> 0) ac();
                                        else {
                                            c[b >> 2] = o;
                                            c[m + (p + 24) >> 2] = d;
                                            c[m + (p + 12) >> 2] = o;
                                            c[m + (p + 8) >> 2] = o;
                                            break b
                                        }
                                    }
                                while (0);
                                d = u + 8 | 0;
                                b = c[d >> 2] | 0;
                                x = c[32318] | 0;
                                if (u >>> 0 >= x >>> 0 & b >>> 0 >= x >>> 0) {
                                    c[b + 12 >> 2] = o;
                                    c[d >> 2] = o;
                                    c[m + (p + 8) >> 2] = b;
                                    c[m + (p + 12) >> 2] = u;
                                    c[m + (p + 24) >> 2] = 0;
                                    break
                                } else ac()
                            }
                        while (0);
                        x = m + 8 | 0;
                        i = E;
                        return x | 0
                    }
            }
        }
        while (0);
        j = c[32316] | 0;
        if (j >>> 0 >= p >>> 0) {
            b = j - p | 0;
            d = c[32319] | 0;
            if (b >>> 0 > 15) {
                c[32319] = d + p;
                c[32316] = b;
                c[d + (p + 4) >> 2] = b | 1;
                c[d + j >> 2] = b;
                c[d + 4 >> 2] = p | 3
            } else {
                c[32316] = 0;
                c[32319] = 0;
                c[d + 4 >> 2] = j | 3;
                x = d + (j + 4) | 0;
                c[x >> 2] = c[x >> 2] | 1
            }
            x = d + 8 | 0;
            i = E;
            return x | 0
        }
        j = c[32317] | 0;
        if (j >>> 0 > p >>> 0) {
            w = j - p | 0;
            c[32317] = w;
            x = c[32320] | 0;
            c[32320] = x + p;
            c[x + (p + 4) >> 2] = w | 1;
            c[x + 4 >> 2] = p | 3;
            x = x + 8 | 0;
            i = E;
            return x | 0
        }
        do
            if (!(c[32432] | 0)) {
                j = xa(30) | 0;
                if (!(j + -1 & j)) {
                    c[32434] = j;
                    c[32433] = j;
                    c[32435] = -1;
                    c[32436] = -1;
                    c[32437] = 0;
                    c[32425] = 0;
                    c[32432] = (ub(0) | 0) & -16 ^ 1431655768;
                    break
                } else ac()
            } while (0);
        m = p + 48 | 0;
        e = c[32434] | 0;
        b = p + 47 | 0;
        k = e + b | 0;
        e = 0 - e | 0;
        o = k & e;
        if (o >>> 0 <= p >>> 0) {
            x = 0;
            i = E;
            return x | 0
        }
        a = c[32424] | 0;
        if (a) {
            t = c[32422] | 0;
            u = t + o | 0;
            if (u >>> 0 <= t >>> 0 | u >>> 0 > a >>> 0) {
                x = 0;
                i = E;
                return x | 0
            }
        }
        d: do
            if (!(c[32425] & 4)) {
                a = c[32320] | 0;
                e: do
                    if (!a) v = 181;
                    else {
                        g = 129704 | 0;
                        while (1) {
                            j = c[g >> 2] | 0;
                            if (j >>> 0 <= a >>> 0) {
                                h = g + 4 | 0;
                                if ((j + (c[h >> 2] | 0) | 0) >>> 0 > a >>> 0) {
                                    f = g;
                                    a = g;
                                    break
                                }
                            }
                            g = c[g + 8 >> 2] | 0;
                            if (!g) {
                                v = 181;
                                break e
                            }
                        }
                        if (!a) v = 181;
                        else {
                            j = k - (c[32317] | 0) & e;
                            if (j >>> 0 < 2147483647) {
                                a = ua(j | 0) | 0;
                                if ((a | 0) == ((c[f >> 2] | 0) + (c[h >> 2] | 0) | 0)) v = 190;
                                else v = 191
                            } else j = 0
                        }
                    }
                while (0);
                do
                    if ((v | 0) == 181) {
                        a = ua(0) | 0;
                        if ((a | 0) == (-1 | 0)) j = 0;
                        else {
                            j = a;
                            h = c[32433] | 0;
                            g = h + -1 | 0;
                            if (!(g & j)) j = o;
                            else j = o - j + (g + j & 0 - h) | 0;
                            h = c[32422] | 0;
                            g = h + j | 0;
                            if (j >>> 0 > p >>> 0 & j >>> 0 < 2147483647) {
                                f = c[32424] | 0;
                                if (f)
                                    if (g >>> 0 <= h >>> 0 | g >>> 0 > f >>> 0) {
                                        j = 0;
                                        break
                                    } h = ua(j | 0) | 0;
                                if ((h | 0) == (a | 0)) v = 190;
                                else {
                                    a = h;
                                    v = 191
                                }
                            } else j = 0
                        }
                    } while (0);
                f: do
                    if ((v | 0) == 190) {
                        if ((a | 0) != (-1 | 0)) {
                            t = j;
                            v = 201;
                            break d
                        }
                    } else if ((v | 0) == 191) {
                    g = 0 - j | 0;
                    do
                        if ((a | 0) != (-1 | 0) & j >>> 0 < 2147483647 & m >>> 0 > j >>> 0) {
                            h = c[32434] | 0;
                            h = b - j + h & 0 - h;
                            if (h >>> 0 < 2147483647)
                                if ((ua(h | 0) | 0) == (-1 | 0)) {
                                    ua(g | 0) | 0;
                                    j = 0;
                                    break f
                                } else {
                                    j = h + j | 0;
                                    break
                                }
                        } while (0);
                    if ((a | 0) == (-1 | 0)) j = 0;
                    else {
                        t = j;
                        v = 201;
                        break d
                    }
                }
                while (0);
                c[32425] = c[32425] | 4;
                v = 198
            } else {
                j = 0;
                v = 198
            }
        while (0);
        if ((v | 0) == 198)
            if (o >>> 0 < 2147483647) {
                g = ua(o | 0) | 0;
                h = ua(0) | 0;
                if ((g | 0) != (-1 | 0) & (h | 0) != (-1 | 0) & g >>> 0 < h >>> 0) {
                    h = h - g | 0;
                    f = h >>> 0 > (p + 40 | 0) >>> 0;
                    if (f) {
                        a = g;
                        t = f ? h : j;
                        v = 201
                    }
                }
            } if ((v | 0) == 201) {
            j = (c[32422] | 0) + t | 0;
            c[32422] = j;
            if (j >>> 0 > (c[32423] | 0) >>> 0) c[32423] = j;
            o = c[32320] | 0;
            g: do
                if (!o) {
                    x = c[32318] | 0;
                    if ((x | 0) == 0 | a >>> 0 < x >>> 0) c[32318] = a;
                    c[32426] = a;
                    c[32427] = t;
                    c[32429] = 0;
                    c[32323] = c[32432];
                    c[32322] = -1;
                    d = 0;
                    do {
                        x = d << 1;
                        w = 129296 + (x << 2) | 0;
                        c[129296 + (x + 3 << 2) >> 2] = w;
                        c[129296 + (x + 2 << 2) >> 2] = w;
                        d = d + 1 | 0
                    } while ((d | 0) != 32);
                    d = a + 8 | 0;
                    if (!(d & 7)) d = 0;
                    else d = 0 - d & 7;
                    x = t + -40 - d | 0;
                    c[32320] = a + d;
                    c[32317] = x;
                    c[a + (d + 4) >> 2] = x | 1;
                    c[a + (t + -36) >> 2] = 40;
                    c[32321] = c[32436]
                } else {
                    h = 129704 | 0;
                    do {
                        j = c[h >> 2] | 0;
                        f = h + 4 | 0;
                        g = c[f >> 2] | 0;
                        if ((a | 0) == (j + g | 0)) {
                            v = 213;
                            break
                        }
                        h = c[h + 8 >> 2] | 0
                    } while ((h | 0) != 0);
                    if ((v | 0) == 213)
                        if (!(c[h + 12 >> 2] & 8))
                            if (o >>> 0 >= j >>> 0 & o >>> 0 < a >>> 0) {
                                c[f >> 2] = g + t;
                                b = (c[32317] | 0) + t | 0;
                                d = o + 8 | 0;
                                if (!(d & 7)) d = 0;
                                else d = 0 - d & 7;
                                x = b - d | 0;
                                c[32320] = o + d;
                                c[32317] = x;
                                c[o + (d + 4) >> 2] = x | 1;
                                c[o + (b + 4) >> 2] = 40;
                                c[32321] = c[32436];
                                break
                            } j = c[32318] | 0;
                    if (a >>> 0 < j >>> 0) {
                        c[32318] = a;
                        d = a
                    } else d = j;
                    j = a + t | 0;
                    g = 129704 | 0;
                    do {
                        if ((c[g >> 2] | 0) == (j | 0)) {
                            h = g;
                            j = g;
                            v = 223;
                            break
                        }
                        g = c[g + 8 >> 2] | 0
                    } while ((g | 0) != 0);
                    if ((v | 0) == 223)
                        if (!(c[j + 12 >> 2] & 8)) {
                            c[h >> 2] = a;
                            j = j + 4 | 0;
                            c[j >> 2] = (c[j >> 2] | 0) + t;
                            j = a + 8 | 0;
                            if (!(j & 7)) l = 0;
                            else l = 0 - j & 7;
                            j = a + (t + 8) | 0;
                            if (!(j & 7)) b = 0;
                            else b = 0 - j & 7;
                            j = a + (b + t) | 0;
                            r = l + p | 0;
                            q = a + r | 0;
                            k = j - (a + l) - p | 0;
                            c[a + (l + 4) >> 2] = p | 3;
                            h: do
                                if ((j | 0) == (o | 0)) {
                                    x = (c[32317] | 0) + k | 0;
                                    c[32317] = x;
                                    c[32320] = q;
                                    c[a + (r + 4) >> 2] = x | 1
                                } else {
                                    if ((j | 0) == (c[32319] | 0)) {
                                        x = (c[32316] | 0) + k | 0;
                                        c[32316] = x;
                                        c[32319] = q;
                                        c[a + (r + 4) >> 2] = x | 1;
                                        c[a + (x + r) >> 2] = x;
                                        break
                                    }
                                    o = t + 4 | 0;
                                    h = c[a + (o + b) >> 2] | 0;
                                    if ((h & 3 | 0) == 1) {
                                        n = h & -8;
                                        e = h >>> 3;
                                        i: do
                                            if (h >>> 0 < 256) {
                                                g = c[a + ((b | 8) + t) >> 2] | 0;
                                                f = c[a + (t + 12 + b) >> 2] | 0;
                                                h = 129296 + (e << 1 << 2) | 0;
                                                do
                                                    if ((g | 0) != (h | 0)) {
                                                        if (g >>> 0 < d >>> 0) ac();
                                                        if ((c[g + 12 >> 2] | 0) == (j | 0)) break;
                                                        ac()
                                                    } while (0);
                                                if ((f | 0) == (g | 0)) {
                                                    c[32314] = c[32314] & ~(1 << e);
                                                    break
                                                }
                                                do
                                                    if ((f | 0) == (h | 0)) w = f + 8 | 0;
                                                    else {
                                                        if (f >>> 0 < d >>> 0) ac();
                                                        h = f + 8 | 0;
                                                        if ((c[h >> 2] | 0) == (j | 0)) {
                                                            w = h;
                                                            break
                                                        }
                                                        ac()
                                                    } while (0);
                                                c[g + 12 >> 2] = f;
                                                c[w >> 2] = g
                                            } else {
                                                m = c[a + ((b | 24) + t) >> 2] | 0;
                                                f = c[a + (t + 12 + b) >> 2] | 0;
                                                do
                                                    if ((f | 0) == (j | 0)) {
                                                        f = b | 16;
                                                        g = a + (o + f) | 0;
                                                        h = c[g >> 2] | 0;
                                                        if (!h) {
                                                            g = a + (f + t) | 0;
                                                            h = c[g >> 2] | 0;
                                                            if (!h) {
                                                                A = 0;
                                                                break
                                                            }
                                                        }
                                                        while (1) {
                                                            f = h + 20 | 0;
                                                            e = c[f >> 2] | 0;
                                                            if (e) {
                                                                h = e;
                                                                g = f;
                                                                continue
                                                            }
                                                            f = h + 16 | 0;
                                                            e = c[f >> 2] | 0;
                                                            if (!e) break;
                                                            else {
                                                                h = e;
                                                                g = f
                                                            }
                                                        }
                                                        if (g >>> 0 < d >>> 0) ac();
                                                        else {
                                                            c[g >> 2] = 0;
                                                            A = h;
                                                            break
                                                        }
                                                    } else {
                                                        e = c[a + ((b | 8) + t) >> 2] | 0;
                                                        if (e >>> 0 < d >>> 0) ac();
                                                        h = e + 12 | 0;
                                                        if ((c[h >> 2] | 0) != (j | 0)) ac();
                                                        g = f + 8 | 0;
                                                        if ((c[g >> 2] | 0) == (j | 0)) {
                                                            c[h >> 2] = f;
                                                            c[g >> 2] = e;
                                                            A = f;
                                                            break
                                                        } else ac()
                                                    } while (0);
                                                if (!m) break;
                                                h = c[a + (t + 28 + b) >> 2] | 0;
                                                g = 129560 + (h << 2) | 0;
                                                do
                                                    if ((j | 0) == (c[g >> 2] | 0)) {
                                                        c[g >> 2] = A;
                                                        if (A) break;
                                                        c[32315] = c[32315] & ~(1 << h);
                                                        break i
                                                    } else {
                                                        if (m >>> 0 < (c[32318] | 0) >>> 0) ac();
                                                        h = m + 16 | 0;
                                                        if ((c[h >> 2] | 0) == (j | 0)) c[h >> 2] = A;
                                                        else c[m + 20 >> 2] = A;
                                                        if (!A) break i
                                                    } while (0);
                                                g = c[32318] | 0;
                                                if (A >>> 0 < g >>> 0) ac();
                                                c[A + 24 >> 2] = m;
                                                j = b | 16;
                                                h = c[a + (j + t) >> 2] | 0;
                                                do
                                                    if (h)
                                                        if (h >>> 0 < g >>> 0) ac();
                                                        else {
                                                            c[A + 16 >> 2] = h;
                                                            c[h + 24 >> 2] = A;
                                                            break
                                                        } while (0);
                                                j = c[a + (o + j) >> 2] | 0;
                                                if (!j) break;
                                                if (j >>> 0 < (c[32318] | 0) >>> 0) ac();
                                                else {
                                                    c[A + 20 >> 2] = j;
                                                    c[j + 24 >> 2] = A;
                                                    break
                                                }
                                            }
                                        while (0);
                                        j = a + ((n | b) + t) | 0;
                                        e = n + k | 0
                                    } else e = k;
                                    j = j + 4 | 0;
                                    c[j >> 2] = c[j >> 2] & -2;
                                    c[a + (r + 4) >> 2] = e | 1;
                                    c[a + (e + r) >> 2] = e;
                                    j = e >>> 3;
                                    if (e >>> 0 < 256) {
                                        h = j << 1;
                                        f = 129296 + (h << 2) | 0;
                                        g = c[32314] | 0;
                                        j = 1 << j;
                                        do
                                            if (!(g & j)) {
                                                c[32314] = g | j;
                                                B = 129296 + (h + 2 << 2) | 0;
                                                C = f
                                            } else {
                                                j = 129296 + (h + 2 << 2) | 0;
                                                h = c[j >> 2] | 0;
                                                if (h >>> 0 >= (c[32318] | 0) >>> 0) {
                                                    B = j;
                                                    C = h;
                                                    break
                                                }
                                                ac()
                                            } while (0);
                                        c[B >> 2] = q;
                                        c[C + 12 >> 2] = q;
                                        c[a + (r + 8) >> 2] = C;
                                        c[a + (r + 12) >> 2] = f;
                                        break
                                    }
                                    d = e >>> 8;
                                    do
                                        if (!d) f = 0;
                                        else {
                                            if (e >>> 0 > 16777215) {
                                                f = 31;
                                                break
                                            }
                                            w = (d + 1048320 | 0) >>> 16 & 8;
                                            x = d << w;
                                            v = (x + 520192 | 0) >>> 16 & 4;
                                            x = x << v;
                                            f = (x + 245760 | 0) >>> 16 & 2;
                                            f = 14 - (v | w | f) + (x << f >>> 15) | 0;
                                            f = e >>> (f + 7 | 0) & 1 | f << 1
                                        } while (0);
                                    j = 129560 + (f << 2) | 0;
                                    c[a + (r + 28) >> 2] = f;
                                    c[a + (r + 20) >> 2] = 0;
                                    c[a + (r + 16) >> 2] = 0;
                                    h = c[32315] | 0;
                                    g = 1 << f;
                                    if (!(h & g)) {
                                        c[32315] = h | g;
                                        c[j >> 2] = q;
                                        c[a + (r + 24) >> 2] = j;
                                        c[a + (r + 12) >> 2] = q;
                                        c[a + (r + 8) >> 2] = q;
                                        break
                                    }
                                    d = c[j >> 2] | 0;
                                    if ((f | 0) == 31) j = 0;
                                    else j = 25 - (f >>> 1) | 0;
                                    j: do
                                        if ((c[d + 4 >> 2] & -8 | 0) == (e | 0)) D = d;
                                        else {
                                            h = e << j;
                                            while (1) {
                                                b = d + (h >>> 31 << 2) + 16 | 0;
                                                j = c[b >> 2] | 0;
                                                if (!j) break;
                                                if ((c[j + 4 >> 2] & -8 | 0) == (e | 0)) {
                                                    D = j;
                                                    break j
                                                } else {
                                                    h = h << 1;
                                                    d = j
                                                }
                                            }
                                            if (b >>> 0 < (c[32318] | 0) >>> 0) ac();
                                            else {
                                                c[b >> 2] = q;
                                                c[a + (r + 24) >> 2] = d;
                                                c[a + (r + 12) >> 2] = q;
                                                c[a + (r + 8) >> 2] = q;
                                                break h
                                            }
                                        }
                                    while (0);
                                    d = D + 8 | 0;
                                    b = c[d >> 2] | 0;
                                    x = c[32318] | 0;
                                    if (D >>> 0 >= x >>> 0 & b >>> 0 >= x >>> 0) {
                                        c[b + 12 >> 2] = q;
                                        c[d >> 2] = q;
                                        c[a + (r + 8) >> 2] = b;
                                        c[a + (r + 12) >> 2] = D;
                                        c[a + (r + 24) >> 2] = 0;
                                        break
                                    } else ac()
                                }
                            while (0);
                            x = a + (l | 8) | 0;
                            i = E;
                            return x | 0
                        } h = 129704 | 0;
                    while (1) {
                        j = c[h >> 2] | 0;
                        if (j >>> 0 <= o >>> 0) {
                            g = c[h + 4 >> 2] | 0;
                            f = j + g | 0;
                            if (f >>> 0 > o >>> 0) break
                        }
                        h = c[h + 8 >> 2] | 0
                    }
                    h = j + (g + -39) | 0;
                    if (!(h & 7)) h = 0;
                    else h = 0 - h & 7;
                    g = j + (g + -47 + h) | 0;
                    g = g >>> 0 < (o + 16 | 0) >>> 0 ? o : g;
                    h = g + 8 | 0;
                    j = a + 8 | 0;
                    if (!(j & 7)) j = 0;
                    else j = 0 - j & 7;
                    w = t + -40 - j | 0;
                    c[32320] = a + j;
                    c[32317] = w;
                    c[a + (j + 4) >> 2] = w | 1;
                    c[a + (t + -36) >> 2] = 40;
                    c[32321] = c[32436];
                    c[g + 4 >> 2] = 27;
                    c[h + 0 >> 2] = c[32426];
                    c[h + 4 >> 2] = c[32427];
                    c[h + 8 >> 2] = c[32428];
                    c[h + 12 >> 2] = c[32429];
                    c[32426] = a;
                    c[32427] = t;
                    c[32429] = 0;
                    c[32428] = h;
                    j = g + 28 | 0;
                    c[j >> 2] = 7;
                    if ((g + 32 | 0) >>> 0 < f >>> 0)
                        do {
                            w = j;
                            j = j + 4 | 0;
                            c[j >> 2] = 7
                        } while ((w + 8 | 0) >>> 0 < f >>> 0);
                    if ((g | 0) != (o | 0)) {
                        a = g - o | 0;
                        j = o + (a + 4) | 0;
                        c[j >> 2] = c[j >> 2] & -2;
                        c[o + 4 >> 2] = a | 1;
                        c[o + a >> 2] = a;
                        j = a >>> 3;
                        if (a >>> 0 < 256) {
                            h = j << 1;
                            f = 129296 + (h << 2) | 0;
                            g = c[32314] | 0;
                            j = 1 << j;
                            do
                                if (!(g & j)) {
                                    c[32314] = g | j;
                                    x = 129296 + (h + 2 << 2) | 0;
                                    y = f
                                } else {
                                    d = 129296 + (h + 2 << 2) | 0;
                                    b = c[d >> 2] | 0;
                                    if (b >>> 0 >= (c[32318] | 0) >>> 0) {
                                        x = d;
                                        y = b;
                                        break
                                    }
                                    ac()
                                } while (0);
                            c[x >> 2] = o;
                            c[y + 12 >> 2] = o;
                            c[o + 8 >> 2] = y;
                            c[o + 12 >> 2] = f;
                            break
                        }
                        d = a >>> 8;
                        if (!d) j = 0;
                        else if (a >>> 0 > 16777215) j = 31;
                        else {
                            w = (d + 1048320 | 0) >>> 16 & 8;
                            x = d << w;
                            v = (x + 520192 | 0) >>> 16 & 4;
                            x = x << v;
                            j = (x + 245760 | 0) >>> 16 & 2;
                            j = 14 - (v | w | j) + (x << j >>> 15) | 0;
                            j = a >>> (j + 7 | 0) & 1 | j << 1
                        }
                        d = 129560 + (j << 2) | 0;
                        c[o + 28 >> 2] = j;
                        c[o + 20 >> 2] = 0;
                        c[o + 16 >> 2] = 0;
                        b = c[32315] | 0;
                        e = 1 << j;
                        if (!(b & e)) {
                            c[32315] = b | e;
                            c[d >> 2] = o;
                            c[o + 24 >> 2] = d;
                            c[o + 12 >> 2] = o;
                            c[o + 8 >> 2] = o;
                            break
                        }
                        d = c[d >> 2] | 0;
                        if ((j | 0) == 31) b = 0;
                        else b = 25 - (j >>> 1) | 0;
                        k: do
                            if ((c[d + 4 >> 2] & -8 | 0) == (a | 0)) z = d;
                            else {
                                j = a << b;
                                while (1) {
                                    b = d + (j >>> 31 << 2) + 16 | 0;
                                    e = c[b >> 2] | 0;
                                    if (!e) break;
                                    if ((c[e + 4 >> 2] & -8 | 0) == (a | 0)) {
                                        z = e;
                                        break k
                                    } else {
                                        j = j << 1;
                                        d = e
                                    }
                                }
                                if (b >>> 0 < (c[32318] | 0) >>> 0) ac();
                                else {
                                    c[b >> 2] = o;
                                    c[o + 24 >> 2] = d;
                                    c[o + 12 >> 2] = o;
                                    c[o + 8 >> 2] = o;
                                    break g
                                }
                            }
                        while (0);
                        d = z + 8 | 0;
                        b = c[d >> 2] | 0;
                        x = c[32318] | 0;
                        if (z >>> 0 >= x >>> 0 & b >>> 0 >= x >>> 0) {
                            c[b + 12 >> 2] = o;
                            c[d >> 2] = o;
                            c[o + 8 >> 2] = b;
                            c[o + 12 >> 2] = z;
                            c[o + 24 >> 2] = 0;
                            break
                        } else ac()
                    }
                }
            while (0);
            b = c[32317] | 0;
            if (b >>> 0 > p >>> 0) {
                w = b - p | 0;
                c[32317] = w;
                x = c[32320] | 0;
                c[32320] = x + p;
                c[x + (p + 4) >> 2] = w | 1;
                c[x + 4 >> 2] = p | 3;
                x = x + 8 | 0;
                i = E;
                return x | 0
            }
        }
        c[(wc() | 0) >> 2] = 12;
        x = 0;
        i = E;
        return x | 0
    }

    function Uc(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(359368);
        return c[Ic >> 2] | 0
    }

    function Vc(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(386980)
    }

    function Wc(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(394024)
    }

    function Xc(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(491184)
    }

    function Yc(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(524048)
    }

    function Zc(a) {
        a = a | 0;
        var b = 0,
            d = 0,
            e = 0,
            f = 0,
            g = 0,
            h = 0,
            j = 0,
            k = 0,
            l = 0,
            m = 0,
            n = 0,
            o = 0,
            p = 0,
            q = 0,
            r = 0,
            s = 0,
            t = 0,
            u = 0,
            v = 0,
            w = 0;
        w = i;
        if (!a) {
            i = w;
            return
        }
        g = a + -8 | 0;
        h = c[32318] | 0;
        if (g >>> 0 < h >>> 0) ac();
        f = c[a + -4 >> 2] | 0;
        e = f & 3;
        if ((e | 0) == 1) ac();
        p = f & -8;
        r = a + (p + -8) | 0;
        do
            if (!(f & 1)) {
                g = c[g >> 2] | 0;
                if (!e) {
                    i = w;
                    return
                }
                j = -8 - g | 0;
                m = a + j | 0;
                n = g + p | 0;
                if (m >>> 0 < h >>> 0) ac();
                if ((m | 0) == (c[32319] | 0)) {
                    g = a + (p + -4) | 0;
                    f = c[g >> 2] | 0;
                    if ((f & 3 | 0) != 3) {
                        v = m;
                        l = n;
                        break
                    }
                    c[32316] = n;
                    c[g >> 2] = f & -2;
                    c[a + (j + 4) >> 2] = n | 1;
                    c[r >> 2] = n;
                    i = w;
                    return
                }
                d = g >>> 3;
                if (g >>> 0 < 256) {
                    e = c[a + (j + 8) >> 2] | 0;
                    f = c[a + (j + 12) >> 2] | 0;
                    g = 129296 + (d << 1 << 2) | 0;
                    if ((e | 0) != (g | 0)) {
                        if (e >>> 0 < h >>> 0) ac();
                        if ((c[e + 12 >> 2] | 0) != (m | 0)) ac()
                    }
                    if ((f | 0) == (e | 0)) {
                        c[32314] = c[32314] & ~(1 << d);
                        v = m;
                        l = n;
                        break
                    }
                    if ((f | 0) == (g | 0)) b = f + 8 | 0;
                    else {
                        if (f >>> 0 < h >>> 0) ac();
                        g = f + 8 | 0;
                        if ((c[g >> 2] | 0) == (m | 0)) b = g;
                        else ac()
                    }
                    c[e + 12 >> 2] = f;
                    c[b >> 2] = e;
                    v = m;
                    l = n;
                    break
                }
                b = c[a + (j + 24) >> 2] | 0;
                e = c[a + (j + 12) >> 2] | 0;
                do
                    if ((e | 0) == (m | 0)) {
                        f = a + (j + 20) | 0;
                        g = c[f >> 2] | 0;
                        if (!g) {
                            f = a + (j + 16) | 0;
                            g = c[f >> 2] | 0;
                            if (!g) {
                                k = 0;
                                break
                            }
                        }
                        while (1) {
                            e = g + 20 | 0;
                            d = c[e >> 2] | 0;
                            if (d) {
                                g = d;
                                f = e;
                                continue
                            }
                            e = g + 16 | 0;
                            d = c[e >> 2] | 0;
                            if (!d) break;
                            else {
                                g = d;
                                f = e
                            }
                        }
                        if (f >>> 0 < h >>> 0) ac();
                        else {
                            c[f >> 2] = 0;
                            k = g;
                            break
                        }
                    } else {
                        d = c[a + (j + 8) >> 2] | 0;
                        if (d >>> 0 < h >>> 0) ac();
                        g = d + 12 | 0;
                        if ((c[g >> 2] | 0) != (m | 0)) ac();
                        f = e + 8 | 0;
                        if ((c[f >> 2] | 0) == (m | 0)) {
                            c[g >> 2] = e;
                            c[f >> 2] = d;
                            k = e;
                            break
                        } else ac()
                    } while (0);
                if (!b) {
                    v = m;
                    l = n
                } else {
                    g = c[a + (j + 28) >> 2] | 0;
                    f = 129560 + (g << 2) | 0;
                    if ((m | 0) == (c[f >> 2] | 0)) {
                        c[f >> 2] = k;
                        if (!k) {
                            c[32315] = c[32315] & ~(1 << g);
                            v = m;
                            l = n;
                            break
                        }
                    } else {
                        if (b >>> 0 < (c[32318] | 0) >>> 0) ac();
                        g = b + 16 | 0;
                        if ((c[g >> 2] | 0) == (m | 0)) c[g >> 2] = k;
                        else c[b + 20 >> 2] = k;
                        if (!k) {
                            v = m;
                            l = n;
                            break
                        }
                    }
                    f = c[32318] | 0;
                    if (k >>> 0 < f >>> 0) ac();
                    c[k + 24 >> 2] = b;
                    g = c[a + (j + 16) >> 2] | 0;
                    do
                        if (g)
                            if (g >>> 0 < f >>> 0) ac();
                            else {
                                c[k + 16 >> 2] = g;
                                c[g + 24 >> 2] = k;
                                break
                            } while (0);
                    g = c[a + (j + 20) >> 2] | 0;
                    if (!g) {
                        v = m;
                        l = n
                    } else if (g >>> 0 < (c[32318] | 0) >>> 0) ac();
                    else {
                        c[k + 20 >> 2] = g;
                        c[g + 24 >> 2] = k;
                        v = m;
                        l = n;
                        break
                    }
                }
            } else {
                v = g;
                l = p
            } while (0);
        if (v >>> 0 >= r >>> 0) ac();
        g = a + (p + -4) | 0;
        f = c[g >> 2] | 0;
        if (!(f & 1)) ac();
        if (!(f & 2)) {
            if ((r | 0) == (c[32320] | 0)) {
                m = (c[32317] | 0) + l | 0;
                c[32317] = m;
                c[32320] = v;
                c[v + 4 >> 2] = m | 1;
                if ((v | 0) != (c[32319] | 0)) {
                    i = w;
                    return
                }
                c[32319] = 0;
                c[32316] = 0;
                i = w;
                return
            }
            if ((r | 0) == (c[32319] | 0)) {
                m = (c[32316] | 0) + l | 0;
                c[32316] = m;
                c[32319] = v;
                c[v + 4 >> 2] = m | 1;
                c[v + m >> 2] = m;
                i = w;
                return
            }
            h = (f & -8) + l | 0;
            b = f >>> 3;
            do
                if (f >>> 0 < 256) {
                    d = c[a + p >> 2] | 0;
                    e = c[a + (p | 4) >> 2] | 0;
                    g = 129296 + (b << 1 << 2) | 0;
                    if ((d | 0) != (g | 0)) {
                        if (d >>> 0 < (c[32318] | 0) >>> 0) ac();
                        if ((c[d + 12 >> 2] | 0) != (r | 0)) ac()
                    }
                    if ((e | 0) == (d | 0)) {
                        c[32314] = c[32314] & ~(1 << b);
                        break
                    }
                    if ((e | 0) == (g | 0)) o = e + 8 | 0;
                    else {
                        if (e >>> 0 < (c[32318] | 0) >>> 0) ac();
                        f = e + 8 | 0;
                        if ((c[f >> 2] | 0) == (r | 0)) o = f;
                        else ac()
                    }
                    c[d + 12 >> 2] = e;
                    c[o >> 2] = d
                } else {
                    b = c[a + (p + 16) >> 2] | 0;
                    g = c[a + (p | 4) >> 2] | 0;
                    do
                        if ((g | 0) == (r | 0)) {
                            f = a + (p + 12) | 0;
                            g = c[f >> 2] | 0;
                            if (!g) {
                                f = a + (p + 8) | 0;
                                g = c[f >> 2] | 0;
                                if (!g) {
                                    q = 0;
                                    break
                                }
                            }
                            while (1) {
                                e = g + 20 | 0;
                                d = c[e >> 2] | 0;
                                if (d) {
                                    g = d;
                                    f = e;
                                    continue
                                }
                                e = g + 16 | 0;
                                d = c[e >> 2] | 0;
                                if (!d) break;
                                else {
                                    g = d;
                                    f = e
                                }
                            }
                            if (f >>> 0 < (c[32318] | 0) >>> 0) ac();
                            else {
                                c[f >> 2] = 0;
                                q = g;
                                break
                            }
                        } else {
                            f = c[a + p >> 2] | 0;
                            if (f >>> 0 < (c[32318] | 0) >>> 0) ac();
                            e = f + 12 | 0;
                            if ((c[e >> 2] | 0) != (r | 0)) ac();
                            d = g + 8 | 0;
                            if ((c[d >> 2] | 0) == (r | 0)) {
                                c[e >> 2] = g;
                                c[d >> 2] = f;
                                q = g;
                                break
                            } else ac()
                        } while (0);
                    if (b) {
                        g = c[a + (p + 20) >> 2] | 0;
                        f = 129560 + (g << 2) | 0;
                        if ((r | 0) == (c[f >> 2] | 0)) {
                            c[f >> 2] = q;
                            if (!q) {
                                c[32315] = c[32315] & ~(1 << g);
                                break
                            }
                        } else {
                            if (b >>> 0 < (c[32318] | 0) >>> 0) ac();
                            g = b + 16 | 0;
                            if ((c[g >> 2] | 0) == (r | 0)) c[g >> 2] = q;
                            else c[b + 20 >> 2] = q;
                            if (!q) break
                        }
                        g = c[32318] | 0;
                        if (q >>> 0 < g >>> 0) ac();
                        c[q + 24 >> 2] = b;
                        f = c[a + (p + 8) >> 2] | 0;
                        do
                            if (f)
                                if (f >>> 0 < g >>> 0) ac();
                                else {
                                    c[q + 16 >> 2] = f;
                                    c[f + 24 >> 2] = q;
                                    break
                                } while (0);
                        d = c[a + (p + 12) >> 2] | 0;
                        if (d)
                            if (d >>> 0 < (c[32318] | 0) >>> 0) ac();
                            else {
                                c[q + 20 >> 2] = d;
                                c[d + 24 >> 2] = q;
                                break
                            }
                    }
                } while (0);
            c[v + 4 >> 2] = h | 1;
            c[v + h >> 2] = h;
            if ((v | 0) == (c[32319] | 0)) {
                c[32316] = h;
                i = w;
                return
            } else g = h
        } else {
            c[g >> 2] = f & -2;
            c[v + 4 >> 2] = l | 1;
            c[v + l >> 2] = l;
            g = l
        }
        f = g >>> 3;
        if (g >>> 0 < 256) {
            e = f << 1;
            g = 129296 + (e << 2) | 0;
            b = c[32314] | 0;
            d = 1 << f;
            if (!(b & d)) {
                c[32314] = b | d;
                s = 129296 + (e + 2 << 2) | 0;
                t = g
            } else {
                d = 129296 + (e + 2 << 2) | 0;
                b = c[d >> 2] | 0;
                if (b >>> 0 < (c[32318] | 0) >>> 0) ac();
                else {
                    s = d;
                    t = b
                }
            }
            c[s >> 2] = v;
            c[t + 12 >> 2] = v;
            c[v + 8 >> 2] = t;
            c[v + 12 >> 2] = g;
            i = w;
            return
        }
        b = g >>> 8;
        if (!b) f = 0;
        else if (g >>> 0 > 16777215) f = 31;
        else {
            l = (b + 1048320 | 0) >>> 16 & 8;
            m = b << l;
            k = (m + 520192 | 0) >>> 16 & 4;
            m = m << k;
            f = (m + 245760 | 0) >>> 16 & 2;
            f = 14 - (k | l | f) + (m << f >>> 15) | 0;
            f = g >>> (f + 7 | 0) & 1 | f << 1
        }
        d = 129560 + (f << 2) | 0;
        c[v + 28 >> 2] = f;
        c[v + 20 >> 2] = 0;
        c[v + 16 >> 2] = 0;
        b = c[32315] | 0;
        e = 1 << f;
        a: do
            if (!(b & e)) {
                c[32315] = b | e;
                c[d >> 2] = v;
                c[v + 24 >> 2] = d;
                c[v + 12 >> 2] = v;
                c[v + 8 >> 2] = v
            } else {
                d = c[d >> 2] | 0;
                if ((f | 0) == 31) b = 0;
                else b = 25 - (f >>> 1) | 0;
                b: do
                    if ((c[d + 4 >> 2] & -8 | 0) == (g | 0)) u = d;
                    else {
                        f = g << b;
                        while (1) {
                            b = d + (f >>> 31 << 2) + 16 | 0;
                            e = c[b >> 2] | 0;
                            if (!e) break;
                            if ((c[e + 4 >> 2] & -8 | 0) == (g | 0)) {
                                u = e;
                                break b
                            } else {
                                f = f << 1;
                                d = e
                            }
                        }
                        if (b >>> 0 < (c[32318] | 0) >>> 0) ac();
                        else {
                            c[b >> 2] = v;
                            c[v + 24 >> 2] = d;
                            c[v + 12 >> 2] = v;
                            c[v + 8 >> 2] = v;
                            break a
                        }
                    }
                while (0);
                b = u + 8 | 0;
                d = c[b >> 2] | 0;
                m = c[32318] | 0;
                if (u >>> 0 >= m >>> 0 & d >>> 0 >= m >>> 0) {
                    c[d + 12 >> 2] = v;
                    c[b >> 2] = v;
                    c[v + 8 >> 2] = d;
                    c[v + 12 >> 2] = u;
                    c[v + 24 >> 2] = 0;
                    break
                } else ac()
            }
        while (0);
        m = (c[32322] | 0) + -1 | 0;
        c[32322] = m;
        if (!m) b = 129712 | 0;
        else {
            i = w;
            return
        }
        while (1) {
            b = c[b >> 2] | 0;
            if (!b) break;
            else b = b + 8 | 0
        }
        c[32322] = -1;
        i = w;
        return
    }

    function _c(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(590408)
    }

    function $c(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(607704)
    }

    function ad(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(666608)
    }

    function bd(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d
        }
        Rc(678512);
        return c[Ic >> 2] | 0
    }

    function cd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(698732)
    }

    function dd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(718212)
    }

    function ed(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(728864)
    }

    function fd(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(730704)
    }

    function gd(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(743396)
    }

    function hd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(773576)
    }

    function id(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(779444)
    }

    function jd(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(789172)
    }

    function kd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(805380)
    }

    function ld(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(813964);
        return c[Ic >> 2] | 0
    }

    function md(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(831276)
    }

    function nd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(833892)
    }

    function od(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(845716)
    }

    function pd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(847076)
    }

    function qd(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(855404)
    }

    function rd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(856616)
    }

    function sd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(872088)
    }

    function td(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(873264)
    }

    function ud(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(877896)
    }

    function vd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(878900)
    }

    function wd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(920380)
    }

    function xd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(927652)
    }

    function yd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(937132)
    }

    function zd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(943072)
    }

    function Ad(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(957688)
    }

    function Bd(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(971128)
    }

    function Cd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(972868)
    }

    function Dd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(976512)
    }

    function Ed(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(977336)
    }

    function Fd(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(978996);
        return c[Ic >> 2] | 0
    }

    function Gd(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(982836)
    }

    function Hd(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(983604)
    }

    function Id(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(986324)
    }

    function Jd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(998368)
    }

    function Kd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1004312)
    }

    function Ld(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1009252)
    }

    function Md(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1011372)
    }

    function Nd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1020576)
    }

    function Od(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1022420)
    }

    function Pd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1023988)
    }

    function Qd(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d
        }
        Rc(1025600);
        return c[Ic >> 2] | 0
    }

    function Rd(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1028128)
    }

    function Sd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1028868)
    }

    function Td(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1035640)
    }

    function Ud(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1039412)
    }

    function Vd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1041844)
    }

    function Wd(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1042588)
    }

    function Xd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1046024)
    }

    function Yd(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1050460)
    }

    function Zd(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1052492)
    }

    function _d(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1057428)
    }

    function $d(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1058032)
    }

    function ae(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1058640)
    }

    function be(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1060356)
    }

    function ce(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1064216)
    }

    function de(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1073996)
    }

    function ee(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1075840)
    }

    function fe(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1082456)
    }

    function ge(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1083708)
    }

    function he(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1086708)
    }

    function ie(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1088788)
    }

    function je(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1094208)
    }

    function ke(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1110388)
    }

    function le(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1114412)
    }

    function me(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1118276)
    }

    function ne(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d
        }
        Rc(1119828);
        return c[Ic >> 2] | 0
    }

    function oe(a, b, d, e) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        e = e | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d;
            c[Ic + 32 >> 2] = e
        }
        Rc(1121244)
    }

    function pe(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d
        }
        Rc(1126148);
        return c[Ic >> 2] | 0
    }

    function qe(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1128252)
    }

    function re(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1128716)
    }

    function se(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1130288)
    }

    function te(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1131584)
    }

    function ue(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1132124)
    }

    function ve(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1137740)
    }

    function we(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1138684)
    }

    function xe(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1139760)
    }

    function ye(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1140916)
    }

    function ze(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1141968)
    }

    function Ae(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1146512)
    }

    function Be(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1150600)
    }

    function Ce(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1153348)
    }

    function De(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1157588)
    }

    function Ee(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1161944)
    }

    function Fe(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1163648)
    }

    function Ge(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1164500)
    }

    function He(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1171312)
    }

    function Ie(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1173004)
    }

    function Je(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1174832)
    }

    function Ke(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1176540)
    }

    function Le(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1182692)
    }

    function Me(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1187792)
    }

    function Ne(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1189180)
    }

    function Oe(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1190848)
    }

    function Pe(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1191740)
    }

    function Qe(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1193596)
    }

    function Re(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1194504)
    }

    function Se(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1195200)
    }

    function Te(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1195760)
    }

    function Ue(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1196496)
    }

    function Ve(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1198496)
    }

    function We(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1200132)
    }

    function Xe(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1200660)
    }

    function Ye(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1201124)
    }

    function Ze(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1203508)
    }

    function _e(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1205296)
    }

    function $e(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1206280)
    }

    function af(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1209896)
    }

    function bf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1211592)
    }

    function cf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1212404)
    }

    function df(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1213092)
    }

    function ef(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1214284)
    }

    function ff(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1215184)
    }

    function gf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1215556)
    }

    function hf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1219276)
    }

    function jf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1220824)
    }

    function kf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1222260)
    }

    function lf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1223604)
    }

    function mf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1225768)
    }

    function nf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1226908)
    }

    function of (a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1229128)
    }

    function pf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1238480)
    }

    function qf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1238852)
    }

    function rf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1239464)
    }

    function sf() {
        if ((Hc | 0) != 2) {}
        Rc(1241888);
        return c[Ic >> 2] | 0
    }

    function tf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1242624)
    }

    function uf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1248948)
    }

    function vf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1249544)
    }

    function wf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1250864)
    }

    function xf(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d
        }
        Rc(1251268);
        return c[Ic >> 2] | 0
    }

    function yf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1251524)
    }

    function zf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1252728)
    }

    function Af(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1254452)
    }

    function Bf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1255724)
    }

    function Cf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1256476)
    }

    function Df(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1257964)
    }

    function Ef(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1259148)
    }

    function Ff(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1259540)
    }

    function Gf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1260916)
    }

    function Hf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1261448)
    }

    function If(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1282176)
    }

    function Jf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1283432)
    }

    function Kf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1284372)
    }

    function Lf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1288148)
    }

    function Mf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1292252)
    }

    function Nf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1292580)
    }

    function Of(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1293756)
    }

    function Pf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1295148)
    }

    function Qf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1297272)
    }

    function Rf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1298224)
    }

    function Sf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1298496)
    }

    function Tf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1302600)
    }

    function Uf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1304056)
    }

    function Vf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1306236)
    }

    function Wf(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1306784)
    }

    function Xf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1307844)
    }

    function Yf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1308204)
    }

    function Zf(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1310568)
    }

    function _f(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1311612)
    }

    function $f(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1312336)
    }

    function ag(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1314216)
    }

    function bg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1316872)
    }

    function cg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1322428)
    }

    function dg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1322664)
    }

    function eg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1323168)
    }

    function fg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1325264)
    }

    function gg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1328068)
    }

    function hg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1328300)
    }

    function ig(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1328944)
    }

    function jg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1329840)
    }

    function kg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1330680)
    }

    function lg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1330968)
    }

    function mg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1333260)
    }

    function ng(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1333504)
    }

    function og(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1334832)
    }

    function pg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1335044)
    }

    function qg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1336572)
    }

    function rg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1336792)
    }

    function sg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1337344);
        return c[Ic >> 2] | 0
    }

    function tg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1337612)
    }

    function ug(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1340056)
    }

    function vg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1340336)
    }

    function wg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1342784)
    }

    function xg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1343684)
    }

    function yg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1344768)
    }

    function zg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1347884);
        return c[Ic >> 2] | 0
    }

    function Ag(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1350128)
    }

    function Bg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1351104)
    }

    function Cg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1351316)
    }

    function Dg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1351724)
    }

    function Eg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1353544)
    }

    function Fg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1354168)
    }

    function Gg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1355900)
    }

    function Hg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1356996)
    }

    function Ig(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1357688)
    }

    function Jg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1358352)
    }

    function Kg(b, d, e) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0;
        if ((e | 0) >= 4096) return va(b | 0, d | 0, e | 0) | 0;
        f = b | 0;
        if ((b & 3) == (d & 3)) {
            while (b & 3) {
                if (!e) return f | 0;
                a[b >> 0] = a[d >> 0] | 0;
                b = b + 1 | 0;
                d = d + 1 | 0;
                e = e - 1 | 0
            }
            while ((e | 0) >= 4) {
                c[b >> 2] = c[d >> 2];
                b = b + 4 | 0;
                d = d + 4 | 0;
                e = e - 4 | 0
            }
        }
        while ((e | 0) > 0) {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
            e = e - 1 | 0
        }
        return f | 0
    }

    function Lg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1359476)
    }

    function Mg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1360604)
    }

    function Ng(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1361636)
    }

    function Og(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1362036)
    }

    function Pg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1362912)
    }

    function Qg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1363844)
    }

    function Rg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1364416)
    }

    function Sg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1364784)
    }

    function Tg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1365332)
    }

    function Ug(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1365544)
    }

    function Vg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1366836)
    }

    function Wg(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1367396)
    }

    function Xg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1367796)
    }

    function Yg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1367996)
    }

    function Zg(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1368184)
    }

    function _g(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1368404)
    }

    function $g(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1368796)
    }

    function ah(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1369228)
    }

    function bh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1371312)
    }

    function ch(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1372068)
    }

    function dh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1372972)
    }

    function eh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1373984)
    }

    function fh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1374244)
    }

    function gh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1375404);
        return c[Ic >> 2] | 0
    }

    function hh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1375616)
    }

    function ih(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1376888)
    }

    function jh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1377076)
    }

    function kh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1378556)
    }

    function lh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1379312)
    }

    function mh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1380096)
    }

    function nh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1382032)
    }

    function oh(b, d, e) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0,
            g = 0,
            h = 0,
            i = 0;
        f = b + e | 0;
        if ((e | 0) >= 20) {
            d = d & 255;
            h = b & 3;
            i = d | d << 8 | d << 16 | d << 24;
            g = f & ~3;
            if (h) {
                h = b + 4 - h | 0;
                while ((b | 0) < (h | 0)) {
                    a[b >> 0] = d;
                    b = b + 1 | 0
                }
            }
            while ((b | 0) < (g | 0)) {
                c[b >> 2] = i;
                b = b + 4 | 0
            }
        }
        while ((b | 0) < (f | 0)) {
            a[b >> 0] = d;
            b = b + 1 | 0
        }
        return b - e | 0
    }

    function ph(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1383704)
    }

    function qh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1383896)
    }

    function rh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1384416)
    }

    function sh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1384980)
    }

    function th(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1385860)
    }

    function uh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1386760)
    }

    function vh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1387504)
    }

    function wh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1392032)
    }

    function xh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1393352)
    }

    function yh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1393680)
    }

    function zh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1395024)
    }

    function Ah(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1396104)
    }

    function Bh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1396260)
    }

    function Ch(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1398168)
    }

    function Dh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1399196)
    }

    function Eh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1399376)
    }

    function Fh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1400192)
    }

    function Gh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1401604)
    }

    function Hh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1401772)
    }

    function Ih(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1402328)
    }

    function Jh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1402768)
    }

    function Kh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1403520)
    }

    function Lh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1404528)
    }

    function Mh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1404700)
    }

    function Nh(a, b, d, e, f, g) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        g = g | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d;
            c[Ic + 32 >> 2] = e;
            c[Ic + 40 >> 2] = f;
            c[Ic + 48 >> 2] = g
        }
        Rc(1406528);
        return c[Ic >> 2] | 0
    }

    function Oh(a, b, d, e, f, g) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        g = g | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d;
            c[Ic + 32 >> 2] = e;
            c[Ic + 40 >> 2] = f;
            c[Ic + 48 >> 2] = g
        }
        Rc(1407952);
        return c[Ic >> 2] | 0
    }

    function Ph(b) {
        b = b | 0;
        a[k >> 0] = a[b >> 0];
        a[k + 1 >> 0] = a[b + 1 >> 0];
        a[k + 2 >> 0] = a[b + 2 >> 0];
        a[k + 3 >> 0] = a[b + 3 >> 0];
        a[k + 4 >> 0] = a[b + 4 >> 0];
        a[k + 5 >> 0] = a[b + 5 >> 0];
        a[k + 6 >> 0] = a[b + 6 >> 0];
        a[k + 7 >> 0] = a[b + 7 >> 0]
    }

    function Qh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1411696)
    }

    function Rh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1412280)
    }

    function Sh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1412828)
    }

    function Th(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1413132)
    }

    function Uh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1414168)
    }

    function Vh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1417664)
    }

    function Wh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1419132)
    }

    function Xh(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1421752)
    }

    function Yh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1421888)
    }

    function Zh(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1422492)
    }

    function _h(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1422636)
    }

    function $h(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1423172)
    }

    function ai(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1424164)
    }

    function bi(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1424600)
    }

    function ci(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1425216)
    }

    function di(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1426456)
    }

    function ei(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1427452)
    }

    function fi(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1428180)
    }

    function gi(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1428508)
    }

    function hi(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1428620)
    }

    function ii(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1431136)
    }

    function ji(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1431552)
    }

    function ki(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1431964)
    }

    function li(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1432544)
    }

    function mi(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1434856)
    }

    function ni(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1434968)
    }

    function oi(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1435732)
    }

    function pi(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d
        }
        Rc(1436444);
        return c[Ic >> 2] | 0
    }

    function qi(b, c, d) {
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0;
        if ((c | 0) < (b | 0) & (b | 0) < (c + d | 0)) {
            e = b;
            c = c + d | 0;
            b = b + d | 0;
            while ((d | 0) > 0) {
                b = b - 1 | 0;
                c = c - 1 | 0;
                d = d - 1 | 0;
                a[b >> 0] = a[c >> 0] | 0
            }
            b = e
        } else Kg(b, c, d) | 0;
        return b | 0
    }

    function ri(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d
        }
        Rc(1437408);
        return c[Ic >> 2] | 0
    }

    function si(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d
        }
        Rc(1437588);
        return c[Ic >> 2] | 0
    }

    function ti(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1438572)
    }

    function ui(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d
        }
        Rc(1438660);
        return c[Ic >> 2] | 0
    }

    function vi(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1439196)
    }

    function wi(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1440172)
    }

    function xi(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1441288)
    }

    function yi(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1442388)
    }

    function zi(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1442492)
    }

    function Ai(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1442600)
    }

    function Bi(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d
        }
        Rc(1443700);
        return c[Ic >> 2] | 0
    }

    function Ci(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1443872)
    }

    function Di(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1445748)
    }

    function Ei(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1445872)
    }

    function Fi(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1446216)
    }

    function Gi(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1446432)
    }

    function Hi(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1447812)
    }

    function Ii(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1448040)
    }

    function Ji(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1448192)
    }

    function Ki(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1449556)
    }

    function Li(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1449840)
    }

    function Mi(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1451072)
    }

    function Ni(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1452024);
        return c[Ic >> 2] | 0
    }

    function Oi(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1453004)
    }

    function Pi(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1453140)
    }

    function Qi(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1453688)
    }

    function Ri(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1454e3)
    }

    function Si(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1454176)
    }

    function Ti(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1454372)
    }

    function Ui(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1454600)
    }

    function Vi(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1455268);
        return c[Ic >> 2] | 0
    }

    function Wi(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1455940)
    }

    function Xi(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1456168)
    }

    function Yi(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1457096)
    }

    function Zi(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1458216)
    }

    function _i(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1458312)
    }

    function $i(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1459312)
    }

    function aj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1459524)
    }

    function bj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1459680)
    }

    function cj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1460708)
    }

    function dj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1460940)
    }

    function ej(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1461180)
    }

    function fj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1461396)
    }

    function gj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1462488)
    }

    function hj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1462688)
    }

    function ij(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1463136)
    }

    function jj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1463844)
    }

    function kj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1464588)
    }

    function lj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1465036)
    }

    function mj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1465324)
    }

    function nj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1466848);
        return c[Ic >> 2] | 0
    }

    function oj(b, c, d) {
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0,
            f = 0,
            g = 0;
        while ((e | 0) < (d | 0)) {
            g = c + e | 0;
            a[b + e >> 0] = f ? 0 : a[g >> 0] | 0;
            f = f ? 1 : (a[g >> 0] | 0) == 0;
            e = e + 1 | 0
        }
        return b | 0
    }

    function pj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1468096)
    }

    function qj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1469600)
    }

    function rj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1469676)
    }

    function sj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1471780)
    }

    function tj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1471948)
    }

    function uj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1472764)
    }

    function vj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1472848)
    }

    function wj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1474280)
    }

    function xj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1475640)
    }

    function yj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1475808)
    }

    function zj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1476340)
    }

    function Aj(b) {
        b = b | 0;
        a[k >> 0] = a[b >> 0];
        a[k + 1 >> 0] = a[b + 1 >> 0];
        a[k + 2 >> 0] = a[b + 2 >> 0];
        a[k + 3 >> 0] = a[b + 3 >> 0]
    }

    function Bj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1476488)
    }

    function Cj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1476572)
    }

    function Dj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1476712)
    }

    function Ej(a, b, c, d, e, f, g) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        g = g | 0;
        return Oc[a & 3](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0) | 0
    }

    function Fj(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        if ((c | 0) < 32) {
            D = b >> c;
            return a >>> c | (b & (1 << c) - 1) << 32 - c
        }
        D = (b | 0) < 0 ? -1 : 0;
        return b >> c - 32 | 0
    }

    function Gj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1477224)
    }

    function Hj() {}

    function Ij(a, b, d, e) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        e = e | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d;
            c[Ic + 32 >> 2] = e
        }
        Rc(1478284);
        return c[Ic >> 2] | 0
    }

    function Jj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1478452)
    }

    function Kj(b, c) {
        b = b | 0;
        c = c | 0;
        var d = 0,
            e = 0;
        e = b + (Ql(b) | 0) | 0;
        do {
            a[e + d >> 0] = a[c + d >> 0];
            d = d + 1 | 0
        } while (a[c + (d - 1) >> 0] | 0);
        return b | 0
    }

    function Lj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1478568)
    }

    function Mj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1478636)
    }

    function Nj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1479116)
    }

    function Oj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1479724)
    }

    function Pj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1480320)
    }

    function Qj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1480388)
    }

    function Rj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1480464)
    }

    function Sj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1480540)
    }

    function Tj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1480976)
    }

    function Uj(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        if ((c | 0) < 32) {
            D = b << c | (a & (1 << c) - 1 << 32 - c) >>> 32 - c;
            return a << c
        }
        D = a << c - 32;
        return 0
    }

    function Vj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1481404)
    }

    function Wj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1481480)
    }

    function Xj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1481552)
    }

    function Yj(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1481624)
    }

    function Zj(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1481752)
    }

    function _j(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1481944)
    }

    function $j(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1482016)
    }

    function ak(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        if ((c | 0) < 32) {
            D = b >>> c;
            return a >>> c | (b & (1 << c) - 1) << 32 - c
        }
        D = 0;
        return b >>> c - 32 | 0
    }

    function bk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1482188)
    }

    function ck(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1482504)
    }

    function dk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1482580)
    }

    function ek(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d
        }
        Rc(1482748);
        return c[Ic >> 2] | 0
    }

    function fk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1482916)
    }

    function gk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1482984)
    }

    function hk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1483216)
    }

    function ik(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1483308)
    }

    function jk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1483576)
    }

    function kk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1484468)
    }

    function lk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1484548)
    }

    function mk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1484628)
    }

    function nk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1484768)
    }

    function ok(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1485444)
    }

    function pk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1486084);
        return c[Ic >> 2] | 0
    }

    function qk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1486156)
    }

    function rk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1486404)
    }

    function sk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1486972)
    }

    function tk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1487264)
    }

    function uk(b, c) {
        b = b | 0;
        c = c | 0;
        var d = 0;
        do {
            a[b + d >> 0] = a[c + d >> 0];
            d = d + 1 | 0
        } while (a[c + (d - 1) >> 0] | 0);
        return b | 0
    }

    function vk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1488480)
    }

    function wk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1488668)
    }

    function xk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1488732)
    }

    function yk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1488860);
        return c[Ic >> 2] | 0
    }

    function zk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1489640)
    }

    function Ak(a, b, d, e) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        e = e | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d;
            c[Ic + 32 >> 2] = e
        }
        Rc(1489748);
        return c[Ic >> 2] | 0
    }

    function Bk() {
        if ((Hc | 0) != 2) {}
        Rc(1490184);
        return c[Ic >> 2] | 0
    }

    function Ck(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1490248)
    }

    function Dk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1490296)
    }

    function Ek(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1490348);
        return c[Ic >> 2] | 0
    }

    function Fk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1490392);
        return c[Ic >> 2] | 0
    }

    function Gk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1490800)
    }

    function Hk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1491148)
    }

    function Ik(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1491600)
    }

    function Jk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1491720)
    }

    function Kk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1491912)
    }

    function Lk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1491956)
    }

    function Mk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1492316)
    }

    function Nk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1492660)
    }

    function Ok(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1492816)
    }

    function Pk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1493152)
    }

    function Qk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1493204)
    }

    function Rk(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        return Kc[a & 15](b | 0, c | 0, d | 0) | 0
    }

    function Sk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1493420)
    }

    function Tk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1493756)
    }

    function Uk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1494120)
    }

    function Vk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1494160)
    }

    function Wk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1494200)
    }

    function Xk(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1494240)
    }

    function Yk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1494972);
        return c[Ic >> 2] | 0
    }

    function Zk(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1495016);
        return c[Ic >> 2] | 0
    }

    function _k(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1495220);
        return c[Ic >> 2] | 0
    }

    function $k(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1495264);
        return c[Ic >> 2] | 0
    }

    function al(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1495480)
    }

    function bl(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1495524)
    }

    function cl(a) {
        a = a | 0;
        var b = 0;
        b = i;
        i = i + a | 0;
        i = i + 15 & -16;
        return b | 0
    }

    function dl(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1495620)
    }

    function el(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1495916)
    }

    function fl(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1496516)
    }

    function gl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1496688)
    }

    function hl(a, b, d, e, f, g) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        g = g | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d;
            c[Ic + 32 >> 2] = e;
            c[Ic + 40 >> 2] = f;
            c[Ic + 48 >> 2] = g
        }
        Rc(1496728);
        return c[Ic >> 2] | 0
    }

    function il(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1496804)
    }

    function jl(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1496844)
    }

    function kl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1497016)
    }

    function ll(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1497056)
    }

    function ml(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1497240)
    }

    function nl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1497336)
    }

    function ol(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1497376)
    }

    function pl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1497512)
    }

    function ql(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1497552)
    }

    function rl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1497596)
    }

    function sl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1497644)
    }

    function tl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1497736)
    }

    function ul(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1498032)
    }

    function vl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1498072)
    }

    function wl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1498112)
    }

    function xl(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1498264)
    }

    function yl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1498308)
    }

    function zl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1498348)
    }

    function Al(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1498540)
    }

    function Bl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1498580)
    }

    function Cl(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1498616)
    }

    function Dl(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        return Qc[a & 15](b | 0, c | 0) | 0
    }

    function El(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1498824)
    }

    function Fl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1498928)
    }

    function Gl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1499008)
    }

    function Hl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1499048)
    }

    function Il(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1499088)
    }

    function Jl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1499196)
    }

    function Kl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1499472)
    }

    function Ll(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1499508)
    }

    function Ml(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1499552)
    }

    function Nl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1499592)
    }

    function Ol(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1499632)
    }

    function Pl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1499776)
    }

    function Ql(b) {
        b = b | 0;
        var c = 0;
        c = b;
        while (a[c >> 0] | 0) c = c + 1 | 0;
        return c - b | 0
    }

    function Rl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1500128)
    }

    function Sl(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        Nc[a & 255](b | 0, c | 0)
    }

    function Tl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1500388)
    }

    function Ul(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1500428)
    }

    function Vl(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1500508)
    }

    function Wl(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1500668)
    }

    function Xl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1500836)
    }

    function Yl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1500876)
    }

    function Zl(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1500956)
    }

    function _l(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1501048)
    }

    function $l(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1501076)
    }

    function am(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1501104)
    }

    function bm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1501132)
    }

    function cm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1501160)
    }

    function dm(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1501188)
    }

    function em(a, b) {
        a = a | 0;
        b = b | 0;
        if (!o) {
            o = a;
            p = b
        }
    }

    function fm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1501356);
        return c[Ic >> 2] | 0
    }

    function gm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1501424)
    }

    function hm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1501452)
    }

    function im(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1501480)
    }

    function jm(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1501508)
    }

    function km(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1501644)
    }

    function lm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1501692)
    }

    function mm(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1501720)
    }

    function nm(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1501760)
    }

    function om(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1501800)
    }

    function pm(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1501912)
    }

    function qm(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1501952)
    }

    function rm(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1501992)
    }

    function sm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1502064)
    }

    function tm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1502092)
    }

    function um(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1502212)
    }

    function vm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1502288)
    }

    function wm(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1502448)
    }

    function xm(a, b) {
        a = a | 0;
        b = b | 0;
        return Pc[a & 3](b | 0) | 0
    }

    function ym(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1502528)
    }

    function zm(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1502648)
    }

    function Am(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1502804)
    }

    function Bm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1502824)
    }

    function Cm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1502916)
    }

    function Dm(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1502936)
    }

    function Em(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1503008)
    }

    function Fm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1503028)
    }

    function Gm(a, b) {
        a = a | 0;
        b = b | 0;
        Mc[a & 255](b | 0)
    }

    function Hm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1503088)
    }

    function Im(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1503108)
    }

    function Jm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1503128)
    }

    function Km(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1503264)
    }

    function Lm(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1503304)
    }

    function Mm(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b;
            c[Ic + 24 >> 2] = d
        }
        Rc(1503344);
        return c[Ic >> 2] | 0
    }

    function Nm(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1503536)
    }

    function Om(a) {
        a = a | 0;
        return Lc[a & 3]() | 0
    }

    function Pm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504048)
    }

    function Qm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504060)
    }

    function Rm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504156)
    }

    function Sm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504180);
        return c[Ic >> 2] | 0
    }

    function Tm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504224)
    }

    function Um(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504236)
    }

    function Vm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504276)
    }

    function Wm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504288)
    }

    function Xm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504404)
    }

    function Ym(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504416)
    }

    function Zm(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504428)
    }

    function _m(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504532)
    }

    function $m(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504692)
    }

    function an(a) {
        a = a | 0;
        Hc = a
    }

    function bn(a, b) {
        a = a | 0;
        b = b | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a;
            c[Ic + 16 >> 2] = b
        }
        Rc(1504756)
    }

    function cn(a) {
        a = a | 0;
        i = a
    }

    function dn(a) {
        a = a | 0;
        D = a
    }

    function en(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1504956)
    }

    function fn(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1505040);
        return c[Ic >> 2] | 0
    }

    function gn() {
        return Ic | 0
    }

    function hn() {
        return D | 0
    }

    function jn(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1505168)
    }

    function kn() {
        return i | 0
    }

    function ln(a) {
        a = a | 0;
        if ((Hc | 0) != 2) {
            c[Ic + 8 >> 2] = a
        }
        Rc(1505208)
    }

    function mn() {
        if ((Hc | 0) != 2) {}
        Rc(1505292);
        return c[Ic >> 2] | 0
    }

    // EMSCRIPTEN_END_FUNCS
    var Kc = [Mm, si, pi, ui, ri, Bi, pe, ek, Qd, bd, xf, ne, Mm, Mm, Mm, Mm];
    var Lc = [mn, sf, Sc, mn];
    var Mc = [ln, kd, dm, Sk, Nm, ej, Ck, Sd, lj, ge, td, cf, Xi, Re, ai, Ei, bl, ed, om, yi, Dg, Vl, Wl, dl, jl, xh, Hf, Dd, yf, Kd, qf, yd, hd, tf, xe, Mi, mk, bk, Dk, wg, eh, Yc, fl, Xe, Zg, Km, mm, pf, Cd, lk, Qk, gf, Be, nd, zm, _i, Qf, Ge, Ce, Md, Nd, ok, Td, qh, ym, ze, vd, $e, qm, hh, be, nm, ce, vj, jm, Jj, Ud, Vc, Vd, tg, od, Zi, Jg, md, Jf, Cl, Bg, ie, Lg, Ye, Gk, dd, Sh, Ik, uj, Ee, Xd, ah, We, Mj, sh, de, Xk, rf, hf, Tk, wm, eg, nk, vi, oi, Zj, Se, Sg, fe, Ih, Lm, Pd, Hh, fi, Cf, Qe, Hk, Wc, hk, Eg, en, Gi, kk, Dm, rh, ik, Ki, Vh, fj, tj, of , me, Ae, Gg, dh, Bf, pg, we, $g, Pe, Nj, fh, rd, xl, ml, tk, pm, Mh, Fe, Qh, bf, df, xd, Ok, Xf, $j, Lj, ch, Vg, Ef, Pf, gi, Dh, wj, Oe, Xg, ei, Ii, _g, wd, Zh, um, ii, ji, Ci, Zf, ad, ki, Jd, jg, Yf, Ah, ve, af, Eh, mh, Yg, Og, vg, Gj, re, jf, pd, Kh, Ui, Zd, Jh, ke, vf, el, Ad, zd, di, ug, Oi, kh, Ag, $c, Tf, Xc, _d, uh, fg, sd, dj, cd, th, jh, Id, mf, zk, jn, hj, qk, Yh, Li, ij, Fi, Ri, Tj, wk, rm, ln, ln, ln, ln, ln, ln, ln, ln, ln, ln, ln, ln, ln, ln, ln, ln, ln, ln];
    var Nc = [bn, xi, gk, Le, sl, Pl, _e, ng, Lh, Lk, Tg, Uf, Oj, Sj, Qg, Jm, Kl, Bl, hg, Jl, dk, lh, rl, xg, qe, ql, Yd, Qm, bg, $h, Ji, tm, Um, Zm, lg, wi, yh, sm, Vj, le, Od, ae, Ze, Ch, Rj, zl, km, im, sj, Kf, Fm, Bm, Ym, hm, Yl, Wm, Ue, Di, Nf, bh, He, Rd, vm, Kk, Wk, Ai, Wi, ig, Ff, zh, li, rg, Si, Xm, If, ol, Sf, ag, Df, ih, nl, ni, mi, wl, ue, Cg, wf, _h, al, Mg, ck, Qj, Rg, cg, Bh, gj, xj, lm, aj, ef, tl, gl, Lf, ci, Yi, cj, Rf, Mk, Yj, Ke, El, mg, Hl, ti, og, Ul, Rl, zj, Im, Em, vl, Gl, yl, ul, pl, Gf, Of, jj, ll, il, kl, Nl, Ml, ff, je, Uh, Hi, jk, zi, Rh, Pg, Vm, ye, fd, _m, cm, am, Pm, Cm, $l, _l, Gd, Gh, De, id, Me, nh, ph, Vk, Uk, Pj, dg, Nk, Ug, _f, Am, bm, Ve, Pi, te, Cj, se, Ie, Hm, he, Mf, Tl, Xl, vh, Pk, pj, Bd, yj, bi, kj, Ld, kg, Xj, Wh, gg, Wf, hi, _j, kf, nf, Dj, Wj, rk, Wg, yg, Ed, bj, Zl, Te, Ne, uf, Th, Qi, Ng, Fh, Ig, $m, wh, Bj, lf, Xh, gm, Af, Al, Hg, qg, Tm, mj, xk, rj, vk, Jk, zf, Je, $f, qj, $d, fk, Fg, qd, Wd, Rm, sk, ee, jd, Hd, Fl, ud, Ol, Ll, _c, Ti, Vf, gd, Il, $i, bn, bn, bn, bn, bn];
    var Oc = [hl, Nh, Oh, hl];
    var Pc = [fn, pk, yk, fn];
    var Qc = [Sm, ld, Fd, sg, gh, nj, Fk, Ek, Ni, fm, _k, Yk, $k, Zk, Vi, Sm];
    return {
        _i64Subtract: Ij,
        _strcat: Kj,
        _free: Zc,
        _main: Uc,
        _realloc: zg,
        _i64Add: Ak,
        _memmove: qi,
        _strlen: Ql,
        _memset: oh,
        _malloc: Tc,
        _strncpy: oj,
        _memcpy: Kg,
        _bitshift64Lshr: ak,
        _strcpy: uk,
        _gui_web_handle_key: oe,
        _input_available: Bk,
        _bitshift64Shl: Uj,
        runPostSets: Hj,
        stackAlloc: cl,
        stackSave: kn,
        stackRestore: cn,
        setThrew: em,
        setTempRet0: dn,
        getTempRet0: hn,
        emterpret: Rc,
        setAsyncState: an,
        emtStackSave: gn,
        dynCall_iiii: Rk,
        dynCall_i: Om,
        dynCall_vi: Gm,
        dynCall_vii: Sl,
        dynCall_iiiiiii: Ej,
        dynCall_ii: xm,
        dynCall_iii: Dl
    }
})


// EMSCRIPTEN_END_ASM
(VimModule.asmGlobalArg, VimModule.asmLibraryArg, buffer);
var _i64Subtract = VimModule["_i64Subtract"] = asm["_i64Subtract"];
var _strcat = VimModule["_strcat"] = asm["_strcat"];
var _free = VimModule["_free"] = asm["_free"];
var _main = VimModule["_main"] = asm["_main"];
var _realloc = VimModule["_realloc"] = asm["_realloc"];
var _i64Add = VimModule["_i64Add"] = asm["_i64Add"];
var _memmove = VimModule["_memmove"] = asm["_memmove"];
var _strlen = VimModule["_strlen"] = asm["_strlen"];
var _memset = VimModule["_memset"] = asm["_memset"];
var _malloc = VimModule["_malloc"] = asm["_malloc"];
var _strncpy = VimModule["_strncpy"] = asm["_strncpy"];
var _memcpy = VimModule["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = VimModule["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = VimModule["_strcpy"] = asm["_strcpy"];
var _gui_web_handle_key = VimModule["_gui_web_handle_key"] = asm["_gui_web_handle_key"];
var _input_available = VimModule["_input_available"] = asm["_input_available"];
var _bitshift64Shl = VimModule["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = VimModule["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = VimModule["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_i = VimModule["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = VimModule["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = VimModule["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = VimModule["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = VimModule["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = VimModule["dynCall_iii"] = asm["dynCall_iii"];
Runtime.stackAlloc = asm["stackAlloc"];
Runtime.stackSave = asm["stackSave"];
Runtime.stackRestore = asm["stackRestore"];
Runtime.setTempRet0 = asm["setTempRet0"];
Runtime.getTempRet0 = asm["getTempRet0"];
var i64Math = (function() {
    var goog = {
        math: {}
    };
    goog.math.Long = (function(low, high) {
        this.low_ = low | 0;
        this.high_ = high | 0
    });
    goog.math.Long.IntCache_ = {};
    goog.math.Long.fromInt = (function(value) {
        if (-128 <= value && value < 128) {
            var cachedObj = goog.math.Long.IntCache_[value];
            if (cachedObj) {
                return cachedObj
            }
        }
        var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
        if (-128 <= value && value < 128) {
            goog.math.Long.IntCache_[value] = obj
        }
        return obj
    });
    goog.math.Long.fromNumber = (function(value) {
        if (isNaN(value) || !isFinite(value)) {
            return goog.math.Long.ZERO
        } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
            return goog.math.Long.MIN_VALUE
        } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
            return goog.math.Long.MAX_VALUE
        } else if (value < 0) {
            return goog.math.Long.fromNumber(-value).negate()
        } else {
            return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0)
        }
    });
    goog.math.Long.fromBits = (function(lowBits, highBits) {
        return new goog.math.Long(lowBits, highBits)
    });
    goog.math.Long.fromString = (function(str, opt_radix) {
        if (str.length == 0) {
            throw Error("number format error: empty string")
        }
        var radix = opt_radix || 10;
        if (radix < 2 || 36 < radix) {
            throw Error("radix out of range: " + radix)
        }
        if (str.charAt(0) == "-") {
            return goog.math.Long.fromString(str.substring(1), radix).negate()
        } else if (str.indexOf("-") >= 0) {
            throw Error('number format error: interior "-" character: ' + str)
        }
        var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
        var result = goog.math.Long.ZERO;
        for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i);
            var value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = goog.math.Long.fromNumber(Math.pow(radix, size));
                result = result.multiply(power).add(goog.math.Long.fromNumber(value))
            } else {
                result = result.multiply(radixToPower);
                result = result.add(goog.math.Long.fromNumber(value))
            }
        }
        return result
    });
    goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
    goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
    goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
    goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
    goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
    goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
    goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
    goog.math.Long.ZERO = goog.math.Long.fromInt(0);
    goog.math.Long.ONE = goog.math.Long.fromInt(1);
    goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
    goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
    goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
    goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
    goog.math.Long.prototype.toInt = (function() {
        return this.low_
    });
    goog.math.Long.prototype.toNumber = (function() {
        return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned()
    });
    goog.math.Long.prototype.toString = (function(opt_radix) {
        var radix = opt_radix || 10;
        if (radix < 2 || 36 < radix) {
            throw Error("radix out of range: " + radix)
        }
        if (this.isZero()) {
            return "0"
        }
        if (this.isNegative()) {
            if (this.equals(goog.math.Long.MIN_VALUE)) {
                var radixLong = goog.math.Long.fromNumber(radix);
                var div = this.div(radixLong);
                var rem = div.multiply(radixLong).subtract(this);
                return div.toString(radix) + rem.toInt().toString(radix)
            } else {
                return "-" + this.negate().toString(radix)
            }
        }
        var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
        var rem = this;
        var result = "";
        while (true) {
            var remDiv = rem.div(radixToPower);
            var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
            var digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero()) {
                return digits + result
            } else {
                while (digits.length < 6) {
                    digits = "0" + digits
                }
                result = "" + digits + result
            }
        }
    });
    goog.math.Long.prototype.getHighBits = (function() {
        return this.high_
    });
    goog.math.Long.prototype.getLowBits = (function() {
        return this.low_
    });
    goog.math.Long.prototype.getLowBitsUnsigned = (function() {
        return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_
    });
    goog.math.Long.prototype.getNumBitsAbs = (function() {
        if (this.isNegative()) {
            if (this.equals(goog.math.Long.MIN_VALUE)) {
                return 64
            } else {
                return this.negate().getNumBitsAbs()
            }
        } else {
            var val = this.high_ != 0 ? this.high_ : this.low_;
            for (var bit = 31; bit > 0; bit--) {
                if ((val & 1 << bit) != 0) {
                    break
                }
            }
            return this.high_ != 0 ? bit + 33 : bit + 1
        }
    });
    goog.math.Long.prototype.isZero = (function() {
        return this.high_ == 0 && this.low_ == 0
    });
    goog.math.Long.prototype.isNegative = (function() {
        return this.high_ < 0
    });
    goog.math.Long.prototype.isOdd = (function() {
        return (this.low_ & 1) == 1
    });
    goog.math.Long.prototype.equals = (function(other) {
        return this.high_ == other.high_ && this.low_ == other.low_
    });
    goog.math.Long.prototype.notEquals = (function(other) {
        return this.high_ != other.high_ || this.low_ != other.low_
    });
    goog.math.Long.prototype.lessThan = (function(other) {
        return this.compare(other) < 0
    });
    goog.math.Long.prototype.lessThanOrEqual = (function(other) {
        return this.compare(other) <= 0
    });
    goog.math.Long.prototype.greaterThan = (function(other) {
        return this.compare(other) > 0
    });
    goog.math.Long.prototype.greaterThanOrEqual = (function(other) {
        return this.compare(other) >= 0
    });
    goog.math.Long.prototype.compare = (function(other) {
        if (this.equals(other)) {
            return 0
        }
        var thisNeg = this.isNegative();
        var otherNeg = other.isNegative();
        if (thisNeg && !otherNeg) {
            return -1
        }
        if (!thisNeg && otherNeg) {
            return 1
        }
        if (this.subtract(other).isNegative()) {
            return -1
        } else {
            return 1
        }
    });
    goog.math.Long.prototype.negate = (function() {
        if (this.equals(goog.math.Long.MIN_VALUE)) {
            return goog.math.Long.MIN_VALUE
        } else {
            return this.not().add(goog.math.Long.ONE)
        }
    });
    goog.math.Long.prototype.add = (function(other) {
        var a48 = this.high_ >>> 16;
        var a32 = this.high_ & 65535;
        var a16 = this.low_ >>> 16;
        var a00 = this.low_ & 65535;
        var b48 = other.high_ >>> 16;
        var b32 = other.high_ & 65535;
        var b16 = other.low_ >>> 16;
        var b00 = other.low_ & 65535;
        var c48 = 0,
            c32 = 0,
            c16 = 0,
            c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 + b48;
        c48 &= 65535;
        return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32)
    });
    goog.math.Long.prototype.subtract = (function(other) {
        return this.add(other.negate())
    });
    goog.math.Long.prototype.multiply = (function(other) {
        if (this.isZero()) {
            return goog.math.Long.ZERO
        } else if (other.isZero()) {
            return goog.math.Long.ZERO
        }
        if (this.equals(goog.math.Long.MIN_VALUE)) {
            return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO
        } else if (other.equals(goog.math.Long.MIN_VALUE)) {
            return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO
        }
        if (this.isNegative()) {
            if (other.isNegative()) {
                return this.negate().multiply(other.negate())
            } else {
                return this.negate().multiply(other).negate()
            }
        } else if (other.isNegative()) {
            return this.multiply(other.negate()).negate()
        }
        if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
            return goog.math.Long.fromNumber(this.toNumber() * other.toNumber())
        }
        var a48 = this.high_ >>> 16;
        var a32 = this.high_ & 65535;
        var a16 = this.low_ >>> 16;
        var a00 = this.low_ & 65535;
        var b48 = other.high_ >>> 16;
        var b32 = other.high_ & 65535;
        var b16 = other.low_ >>> 16;
        var b00 = other.low_ & 65535;
        var c48 = 0,
            c32 = 0,
            c16 = 0,
            c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 65535;
        return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32)
    });
    goog.math.Long.prototype.div = (function(other) {
        if (other.isZero()) {
            throw Error("division by zero")
        } else if (this.isZero()) {
            return goog.math.Long.ZERO
        }
        if (this.equals(goog.math.Long.MIN_VALUE)) {
            if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
                return goog.math.Long.MIN_VALUE
            } else if (other.equals(goog.math.Long.MIN_VALUE)) {
                return goog.math.Long.ONE
            } else {
                var halfThis = this.shiftRight(1);
                var approx = halfThis.div(other).shiftLeft(1);
                if (approx.equals(goog.math.Long.ZERO)) {
                    return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE
                } else {
                    var rem = this.subtract(other.multiply(approx));
                    var result = approx.add(rem.div(other));
                    return result
                }
            }
        } else if (other.equals(goog.math.Long.MIN_VALUE)) {
            return goog.math.Long.ZERO
        }
        if (this.isNegative()) {
            if (other.isNegative()) {
                return this.negate().div(other.negate())
            } else {
                return this.negate().div(other).negate()
            }
        } else if (other.isNegative()) {
            return this.div(other.negate()).negate()
        }
        var res = goog.math.Long.ZERO;
        var rem = this;
        while (rem.greaterThanOrEqual(other)) {
            var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
            var log2 = Math.ceil(Math.log(approx) / Math.LN2);
            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
            var approxRes = goog.math.Long.fromNumber(approx);
            var approxRem = approxRes.multiply(other);
            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
                approx -= delta;
                approxRes = goog.math.Long.fromNumber(approx);
                approxRem = approxRes.multiply(other)
            }
            if (approxRes.isZero()) {
                approxRes = goog.math.Long.ONE
            }
            res = res.add(approxRes);
            rem = rem.subtract(approxRem)
        }
        return res
    });
    goog.math.Long.prototype.modulo = (function(other) {
        return this.subtract(this.div(other).multiply(other))
    });
    goog.math.Long.prototype.not = (function() {
        return goog.math.Long.fromBits(~this.low_, ~this.high_)
    });
    goog.math.Long.prototype.and = (function(other) {
        return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_)
    });
    goog.math.Long.prototype.or = (function(other) {
        return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_)
    });
    goog.math.Long.prototype.xor = (function(other) {
        return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_)
    });
    goog.math.Long.prototype.shiftLeft = (function(numBits) {
        numBits &= 63;
        if (numBits == 0) {
            return this
        } else {
            var low = this.low_;
            if (numBits < 32) {
                var high = this.high_;
                return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits)
            } else {
                return goog.math.Long.fromBits(0, low << numBits - 32)
            }
        }
    });
    goog.math.Long.prototype.shiftRight = (function(numBits) {
        numBits &= 63;
        if (numBits == 0) {
            return this
        } else {
            var high = this.high_;
            if (numBits < 32) {
                var low = this.low_;
                return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits)
            } else {
                return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1)
            }
        }
    });
    goog.math.Long.prototype.shiftRightUnsigned = (function(numBits) {
        numBits &= 63;
        if (numBits == 0) {
            return this
        } else {
            var high = this.high_;
            if (numBits < 32) {
                var low = this.low_;
                return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits)
            } else if (numBits == 32) {
                return goog.math.Long.fromBits(high, 0)
            } else {
                return goog.math.Long.fromBits(high >>> numBits - 32, 0)
            }
        }
    });
    var navigator = {
        appName: "Modern Browser"
    };
    var dbits;
    var canary = 0xdeadbeefcafe;
    var j_lm = (canary & 16777215) == 15715070;

    function BigInteger(a, b, c) {
        if (a != null)
            if ("number" == typeof a) this.fromNumber(a, b, c);
            else if (b == null && "string" != typeof a) this.fromString(a, 256);
        else this.fromString(a, b)
    }

    function nbi() {
        return new BigInteger(null)
    }

    function am1(i, x, w, j, c, n) {
        while (--n >= 0) {
            var v = x * this[i++] + w[j] + c;
            c = Math.floor(v / 67108864);
            w[j++] = v & 67108863
        }
        return c
    }

    function am2(i, x, w, j, c, n) {
        var xl = x & 32767,
            xh = x >> 15;
        while (--n >= 0) {
            var l = this[i] & 32767;
            var h = this[i++] >> 15;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 32767) << 15) + w[j] + (c & 1073741823);
            c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
            w[j++] = l & 1073741823
        }
        return c
    }

    function am3(i, x, w, j, c, n) {
        var xl = x & 16383,
            xh = x >> 14;
        while (--n >= 0) {
            var l = this[i] & 16383;
            var h = this[i++] >> 14;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 16383) << 14) + w[j] + c;
            c = (l >> 28) + (m >> 14) + xh * h;
            w[j++] = l & 268435455
        }
        return c
    }
    if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
        BigInteger.prototype.am = am2;
        dbits = 30
    } else if (j_lm && navigator.appName != "Netscape") {
        BigInteger.prototype.am = am1;
        dbits = 26
    } else {
        BigInteger.prototype.am = am3;
        dbits = 28
    }
    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = (1 << dbits) - 1;
    BigInteger.prototype.DV = 1 << dbits;
    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2, BI_FP);
    BigInteger.prototype.F1 = BI_FP - dbits;
    BigInteger.prototype.F2 = 2 * dbits - BI_FP;
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array;
    var rr, vv;
    rr = "0".charCodeAt(0);
    for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

    function int2char(n) {
        return BI_RM.charAt(n)
    }

    function intAt(s, i) {
        var c = BI_RC[s.charCodeAt(i)];
        return c == null ? -1 : c
    }

    function bnpCopyTo(r) {
        for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
        r.t = this.t;
        r.s = this.s
    }

    function bnpFromInt(x) {
        this.t = 1;
        this.s = x < 0 ? -1 : 0;
        if (x > 0) this[0] = x;
        else if (x < -1) this[0] = x + DV;
        else this.t = 0
    }

    function nbv(i) {
        var r = nbi();
        r.fromInt(i);
        return r
    }

    function bnpFromString(s, b) {
        var k;
        if (b == 16) k = 4;
        else if (b == 8) k = 3;
        else if (b == 256) k = 8;
        else if (b == 2) k = 1;
        else if (b == 32) k = 5;
        else if (b == 4) k = 2;
        else {
            this.fromRadix(s, b);
            return
        }
        this.t = 0;
        this.s = 0;
        var i = s.length,
            mi = false,
            sh = 0;
        while (--i >= 0) {
            var x = k == 8 ? s[i] & 255 : intAt(s, i);
            if (x < 0) {
                if (s.charAt(i) == "-") mi = true;
                continue
            }
            mi = false;
            if (sh == 0) this[this.t++] = x;
            else if (sh + k > this.DB) {
                this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
                this[this.t++] = x >> this.DB - sh
            } else this[this.t - 1] |= x << sh;
            sh += k;
            if (sh >= this.DB) sh -= this.DB
        }
        if (k == 8 && (s[0] & 128) != 0) {
            this.s = -1;
            if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh
        }
        this.clamp();
        if (mi) BigInteger.ZERO.subTo(this, this)
    }

    function bnpClamp() {
        var c = this.s & this.DM;
        while (this.t > 0 && this[this.t - 1] == c) --this.t
    }

    function bnToString(b) {
        if (this.s < 0) return "-" + this.negate().toString(b);
        var k;
        if (b == 16) k = 4;
        else if (b == 8) k = 3;
        else if (b == 2) k = 1;
        else if (b == 32) k = 5;
        else if (b == 4) k = 2;
        else return this.toRadix(b);
        var km = (1 << k) - 1,
            d, m = false,
            r = "",
            i = this.t;
        var p = this.DB - i * this.DB % k;
        if (i-- > 0) {
            if (p < this.DB && (d = this[i] >> p) > 0) {
                m = true;
                r = int2char(d)
            }
            while (i >= 0) {
                if (p < k) {
                    d = (this[i] & (1 << p) - 1) << k - p;
                    d |= this[--i] >> (p += this.DB - k)
                } else {
                    d = this[i] >> (p -= k) & km;
                    if (p <= 0) {
                        p += this.DB;
                        --i
                    }
                }
                if (d > 0) m = true;
                if (m) r += int2char(d)
            }
        }
        return m ? r : "0"
    }

    function bnNegate() {
        var r = nbi();
        BigInteger.ZERO.subTo(this, r);
        return r
    }

    function bnAbs() {
        return this.s < 0 ? this.negate() : this
    }

    function bnCompareTo(a) {
        var r = this.s - a.s;
        if (r != 0) return r;
        var i = this.t;
        r = i - a.t;
        if (r != 0) return this.s < 0 ? -r : r;
        while (--i >= 0)
            if ((r = this[i] - a[i]) != 0) return r;
        return 0
    }

    function nbits(x) {
        var r = 1,
            t;
        if ((t = x >>> 16) != 0) {
            x = t;
            r += 16
        }
        if ((t = x >> 8) != 0) {
            x = t;
            r += 8
        }
        if ((t = x >> 4) != 0) {
            x = t;
            r += 4
        }
        if ((t = x >> 2) != 0) {
            x = t;
            r += 2
        }
        if ((t = x >> 1) != 0) {
            x = t;
            r += 1
        }
        return r
    }

    function bnBitLength() {
        if (this.t <= 0) return 0;
        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM)
    }

    function bnpDLShiftTo(n, r) {
        var i;
        for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
        for (i = n - 1; i >= 0; --i) r[i] = 0;
        r.t = this.t + n;
        r.s = this.s
    }

    function bnpDRShiftTo(n, r) {
        for (var i = n; i < this.t; ++i) r[i - n] = this[i];
        r.t = Math.max(this.t - n, 0);
        r.s = this.s
    }

    function bnpLShiftTo(n, r) {
        var bs = n % this.DB;
        var cbs = this.DB - bs;
        var bm = (1 << cbs) - 1;
        var ds = Math.floor(n / this.DB),
            c = this.s << bs & this.DM,
            i;
        for (i = this.t - 1; i >= 0; --i) {
            r[i + ds + 1] = this[i] >> cbs | c;
            c = (this[i] & bm) << bs
        }
        for (i = ds - 1; i >= 0; --i) r[i] = 0;
        r[ds] = c;
        r.t = this.t + ds + 1;
        r.s = this.s;
        r.clamp()
    }

    function bnpRShiftTo(n, r) {
        r.s = this.s;
        var ds = Math.floor(n / this.DB);
        if (ds >= this.t) {
            r.t = 0;
            return
        }
        var bs = n % this.DB;
        var cbs = this.DB - bs;
        var bm = (1 << bs) - 1;
        r[0] = this[ds] >> bs;
        for (var i = ds + 1; i < this.t; ++i) {
            r[i - ds - 1] |= (this[i] & bm) << cbs;
            r[i - ds] = this[i] >> bs
        }
        if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
        r.t = this.t - ds;
        r.clamp()
    }

    function bnpSubTo(a, r) {
        var i = 0,
            c = 0,
            m = Math.min(a.t, this.t);
        while (i < m) {
            c += this[i] - a[i];
            r[i++] = c & this.DM;
            c >>= this.DB
        }
        if (a.t < this.t) {
            c -= a.s;
            while (i < this.t) {
                c += this[i];
                r[i++] = c & this.DM;
                c >>= this.DB
            }
            c += this.s
        } else {
            c += this.s;
            while (i < a.t) {
                c -= a[i];
                r[i++] = c & this.DM;
                c >>= this.DB
            }
            c -= a.s
        }
        r.s = c < 0 ? -1 : 0;
        if (c < -1) r[i++] = this.DV + c;
        else if (c > 0) r[i++] = c;
        r.t = i;
        r.clamp()
    }

    function bnpMultiplyTo(a, r) {
        var x = this.abs(),
            y = a.abs();
        var i = x.t;
        r.t = i + y.t;
        while (--i >= 0) r[i] = 0;
        for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
        r.s = 0;
        r.clamp();
        if (this.s != a.s) BigInteger.ZERO.subTo(r, r)
    }

    function bnpSquareTo(r) {
        var x = this.abs();
        var i = r.t = 2 * x.t;
        while (--i >= 0) r[i] = 0;
        for (i = 0; i < x.t - 1; ++i) {
            var c = x.am(i, x[i], r, 2 * i, 0, 1);
            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
                r[i + x.t] -= x.DV;
                r[i + x.t + 1] = 1
            }
        }
        if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
        r.s = 0;
        r.clamp()
    }

    function bnpDivRemTo(m, q, r) {
        var pm = m.abs();
        if (pm.t <= 0) return;
        var pt = this.abs();
        if (pt.t < pm.t) {
            if (q != null) q.fromInt(0);
            if (r != null) this.copyTo(r);
            return
        }
        if (r == null) r = nbi();
        var y = nbi(),
            ts = this.s,
            ms = m.s;
        var nsh = this.DB - nbits(pm[pm.t - 1]);
        if (nsh > 0) {
            pm.lShiftTo(nsh, y);
            pt.lShiftTo(nsh, r)
        } else {
            pm.copyTo(y);
            pt.copyTo(r)
        }
        var ys = y.t;
        var y0 = y[ys - 1];
        if (y0 == 0) return;
        var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
        var d1 = this.FV / yt,
            d2 = (1 << this.F1) / yt,
            e = 1 << this.F2;
        var i = r.t,
            j = i - ys,
            t = q == null ? nbi() : q;
        y.dlShiftTo(j, t);
        if (r.compareTo(t) >= 0) {
            r[r.t++] = 1;
            r.subTo(t, r)
        }
        BigInteger.ONE.dlShiftTo(ys, t);
        t.subTo(y, y);
        while (y.t < ys) y[y.t++] = 0;
        while (--j >= 0) {
            var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
                y.dlShiftTo(j, t);
                r.subTo(t, r);
                while (r[i] < --qd) r.subTo(t, r)
            }
        }
        if (q != null) {
            r.drShiftTo(ys, q);
            if (ts != ms) BigInteger.ZERO.subTo(q, q)
        }
        r.t = ys;
        r.clamp();
        if (nsh > 0) r.rShiftTo(nsh, r);
        if (ts < 0) BigInteger.ZERO.subTo(r, r)
    }

    function bnMod(a) {
        var r = nbi();
        this.abs().divRemTo(a, null, r);
        if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
        return r
    }

    function Classic(m) {
        this.m = m
    }

    function cConvert(x) {
        if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
        else return x
    }

    function cRevert(x) {
        return x
    }

    function cReduce(x) {
        x.divRemTo(this.m, null, x)
    }

    function cMulTo(x, y, r) {
        x.multiplyTo(y, r);
        this.reduce(r)
    }

    function cSqrTo(x, r) {
        x.squareTo(r);
        this.reduce(r)
    }
    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;

    function bnpInvDigit() {
        if (this.t < 1) return 0;
        var x = this[0];
        if ((x & 1) == 0) return 0;
        var y = x & 3;
        y = y * (2 - (x & 15) * y) & 15;
        y = y * (2 - (x & 255) * y) & 255;
        y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
        y = y * (2 - x * y % this.DV) % this.DV;
        return y > 0 ? this.DV - y : -y
    }

    function Montgomery(m) {
        this.m = m;
        this.mp = m.invDigit();
        this.mpl = this.mp & 32767;
        this.mph = this.mp >> 15;
        this.um = (1 << m.DB - 15) - 1;
        this.mt2 = 2 * m.t
    }

    function montConvert(x) {
        var r = nbi();
        x.abs().dlShiftTo(this.m.t, r);
        r.divRemTo(this.m, null, r);
        if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
        return r
    }

    function montRevert(x) {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r
    }

    function montReduce(x) {
        while (x.t <= this.mt2) x[x.t++] = 0;
        for (var i = 0; i < this.m.t; ++i) {
            var j = x[i] & 32767;
            var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
            j = i + this.m.t;
            x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
            while (x[j] >= x.DV) {
                x[j] -= x.DV;
                x[++j]++
            }
        }
        x.clamp();
        x.drShiftTo(this.m.t, x);
        if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)
    }

    function montSqrTo(x, r) {
        x.squareTo(r);
        this.reduce(r)
    }

    function montMulTo(x, y, r) {
        x.multiplyTo(y, r);
        this.reduce(r)
    }
    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;

    function bnpIsEven() {
        return (this.t > 0 ? this[0] & 1 : this.s) == 0
    }

    function bnpExp(e, z) {
        if (e > 4294967295 || e < 1) return BigInteger.ONE;
        var r = nbi(),
            r2 = nbi(),
            g = z.convert(this),
            i = nbits(e) - 1;
        g.copyTo(r);
        while (--i >= 0) {
            z.sqrTo(r, r2);
            if ((e & 1 << i) > 0) z.mulTo(r2, g, r);
            else {
                var t = r;
                r = r2;
                r2 = t
            }
        }
        return z.revert(r)
    }

    function bnModPowInt(e, m) {
        var z;
        if (e < 256 || m.isEven()) z = new Classic(m);
        else z = new Montgomery(m);
        return this.exp(e, z)
    }
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);

    function bnpFromRadix(s, b) {
        this.fromInt(0);
        if (b == null) b = 10;
        var cs = this.chunkSize(b);
        var d = Math.pow(b, cs),
            mi = false,
            j = 0,
            w = 0;
        for (var i = 0; i < s.length; ++i) {
            var x = intAt(s, i);
            if (x < 0) {
                if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
                continue
            }
            w = b * w + x;
            if (++j >= cs) {
                this.dMultiply(d);
                this.dAddOffset(w, 0);
                j = 0;
                w = 0
            }
        }
        if (j > 0) {
            this.dMultiply(Math.pow(b, j));
            this.dAddOffset(w, 0)
        }
        if (mi) BigInteger.ZERO.subTo(this, this)
    }

    function bnpChunkSize(r) {
        return Math.floor(Math.LN2 * this.DB / Math.log(r))
    }

    function bnSigNum() {
        if (this.s < 0) return -1;
        else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;
        else return 1
    }

    function bnpDMultiply(n) {
        this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
        ++this.t;
        this.clamp()
    }

    function bnpDAddOffset(n, w) {
        if (n == 0) return;
        while (this.t <= w) this[this.t++] = 0;
        this[w] += n;
        while (this[w] >= this.DV) {
            this[w] -= this.DV;
            if (++w >= this.t) this[this.t++] = 0;
            ++this[w]
        }
    }

    function bnpToRadix(b) {
        if (b == null) b = 10;
        if (this.signum() == 0 || b < 2 || b > 36) return "0";
        var cs = this.chunkSize(b);
        var a = Math.pow(b, cs);
        var d = nbv(a),
            y = nbi(),
            z = nbi(),
            r = "";
        this.divRemTo(d, y, z);
        while (y.signum() > 0) {
            r = (a + z.intValue()).toString(b).substr(1) + r;
            y.divRemTo(d, y, z)
        }
        return z.intValue().toString(b) + r
    }

    function bnIntValue() {
        if (this.s < 0) {
            if (this.t == 1) return this[0] - this.DV;
            else if (this.t == 0) return -1
        } else if (this.t == 1) return this[0];
        else if (this.t == 0) return 0;
        return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0]
    }

    function bnpAddTo(a, r) {
        var i = 0,
            c = 0,
            m = Math.min(a.t, this.t);
        while (i < m) {
            c += this[i] + a[i];
            r[i++] = c & this.DM;
            c >>= this.DB
        }
        if (a.t < this.t) {
            c += a.s;
            while (i < this.t) {
                c += this[i];
                r[i++] = c & this.DM;
                c >>= this.DB
            }
            c += this.s
        } else {
            c += this.s;
            while (i < a.t) {
                c += a[i];
                r[i++] = c & this.DM;
                c >>= this.DB
            }
            c += a.s
        }
        r.s = c < 0 ? -1 : 0;
        if (c > 0) r[i++] = c;
        else if (c < -1) r[i++] = this.DV + c;
        r.t = i;
        r.clamp()
    }
    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.addTo = bnpAddTo;
    var Wrapper = {
        abs: (function(l, h) {
            var x = new goog.math.Long(l, h);
            var ret;
            if (x.isNegative()) {
                ret = x.negate()
            } else {
                ret = x
            }
            HEAP32[tempDoublePtr >> 2] = ret.low_;
            HEAP32[tempDoublePtr + 4 >> 2] = ret.high_
        }),
        ensureTemps: (function() {
            if (Wrapper.ensuredTemps) return;
            Wrapper.ensuredTemps = true;
            Wrapper.two32 = new BigInteger;
            Wrapper.two32.fromString("4294967296", 10);
            Wrapper.two64 = new BigInteger;
            Wrapper.two64.fromString("18446744073709551616", 10);
            Wrapper.temp1 = new BigInteger;
            Wrapper.temp2 = new BigInteger
        }),
        lh2bignum: (function(l, h) {
            var a = new BigInteger;
            a.fromString(h.toString(), 10);
            var b = new BigInteger;
            a.multiplyTo(Wrapper.two32, b);
            var c = new BigInteger;
            c.fromString(l.toString(), 10);
            var d = new BigInteger;
            c.addTo(b, d);
            return d
        }),
        stringify: (function(l, h, unsigned) {
            var ret = (new goog.math.Long(l, h)).toString();
            if (unsigned && ret[0] == "-") {
                Wrapper.ensureTemps();
                var bignum = new BigInteger;
                bignum.fromString(ret, 10);
                ret = new BigInteger;
                Wrapper.two64.addTo(bignum, ret);
                ret = ret.toString(10)
            }
            return ret
        }),
        fromString: (function(str, base, min, max, unsigned) {
            Wrapper.ensureTemps();
            var bignum = new BigInteger;
            bignum.fromString(str, base);
            var bigmin = new BigInteger;
            bigmin.fromString(min, 10);
            var bigmax = new BigInteger;
            bigmax.fromString(max, 10);
            if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
                var temp = new BigInteger;
                bignum.addTo(Wrapper.two64, temp);
                bignum = temp
            }
            var error = false;
            if (bignum.compareTo(bigmin) < 0) {
                bignum = bigmin;
                error = true
            } else if (bignum.compareTo(bigmax) > 0) {
                bignum = bigmax;
                error = true
            }
            var ret = goog.math.Long.fromString(bignum.toString());
            HEAP32[tempDoublePtr >> 2] = ret.low_;
            HEAP32[tempDoublePtr + 4 >> 2] = ret.high_;
            if (error) throw "range error"
        })
    };
    return Wrapper
})();
if (memoryInitializer) {
    if (typeof VimModule["locateFile"] === "function") {
        memoryInitializer = VimModule["locateFile"](memoryInitializer)
    } else if (VimModule["memoryInitializerPrefixURL"]) {
        memoryInitializer = VimModule["memoryInitializerPrefixURL"] + memoryInitializer
    }

    addRunDependency("memory initializer");

    function applyMemoryInitializer(data) {
        if (data.byteLength) data = new Uint8Array(data);
        HEAPU8.set(data, STATIC_BASE);
        removeRunDependency("memory initializer")
    }
    var request = VimModule["memoryInitializerRequest"];
    if (request) {
        if (request.response) {
            setTimeout((function() {
                applyMemoryInitializer(request.response)
            }), 0)
        } else {
            request.addEventListener("load", (function() {
                if (request.status !== 200 && request.status !== 0) {
                    console.warn("a problem seems to have happened with VimModule.memoryInitializerRequest, status: " + request.status)
                }
                if (!request.response || typeof request.response !== "object" || !request.response.byteLength) {
                    console.warn("a problem seems to have happened with VimModule.memoryInitializerRequest response (expected ArrayBuffer): " + request.response)
                }
                applyMemoryInitializer(request.response)
            }))
        }
    } else {
        Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, (function() {
            throw "could not load memory initializer " + memoryInitializer
        }))
    }
}

function ExitStatus(status) {
    this.name = "ExitStatus";
    this.message = "Program terminated with exit(" + status + ")";
    this.status = status
}
ExitStatus.prototype = new Error;
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
    if (!VimModule["calledRun"]) run();
    if (!VimModule["calledRun"]) dependenciesFulfilled = runCaller
};
VimModule["callMain"] = VimModule.callMain = function callMain(args) {
    assert(runDependencies == 0, "cannot call main when async dependencies remain! (listen on __ATMAIN__)");
    assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
    args = args || [];
    ensureInitRuntime();
    var argc = args.length + 1;

    function pad() {
        for (var i = 0; i < 4 - 1; i++) {
            argv.push(0)
        }
    }
    var argv = [allocate(intArrayFromString(VimModule["thisProgram"]), "i8", ALLOC_NORMAL)];
    pad();
    for (var i = 0; i < argc - 1; i = i + 1) {
        argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_NORMAL));
        pad()
    }
    argv.push(0);
    argv = allocate(argv, "i32", ALLOC_NORMAL);
    initialStackTop = STACKTOP;
    try {
        var ret = VimModule["_main"](argc, argv, 0);
        exit(ret)
    } catch (e) {
        if (e instanceof ExitStatus) {
            return
        } else if (e == "SimulateInfiniteLoop") {
            VimModule["noExitRuntime"] = true;
            return
        } else {
            if (e && typeof e === "object" && e.stack) VimModule.printErr("exception thrown: " + [e, e.stack]);
            throw e
        }
    } finally {
        calledMain = true
    }
};

function run(args) {
    args = args || VimModule["arguments"];
    if (preloadStartTime === null) preloadStartTime = Date.now();
    if (runDependencies > 0) {
        return
    }
    preRun();
    if (runDependencies > 0) return;
    if (VimModule["calledRun"]) return;

    function doRun() {
        if (VimModule["calledRun"]) return;
        VimModule["calledRun"] = true;
        if (ABORT) return;
        ensureInitRuntime();
        preMain();
        if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
            VimModule.printErr("pre-main prep time: " + (Date.now() - preloadStartTime) + " ms")
        }
        if (VimModule["onRuntimeInitialized"]) VimModule["onRuntimeInitialized"]();
        if (VimModule["_main"] && shouldRunNow) VimModule["callMain"](args);
        postRun()
    }
    if (VimModule["setStatus"]) {
        VimModule["setStatus"]("Running...");
        setTimeout((function() {
            setTimeout((function() {
                VimModule["setStatus"]("")
            }), 1);
            doRun()
        }), 1)
    } else {
        doRun()
    }
}
VimModule["run"] = VimModule.run = run;

function exit(status) {
    if (VimModule["noExitRuntime"]) {
        return
    }
    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;
    exitRuntime();
    if (VimModule["onExit"]) VimModule["onExit"](status);
    VimModule["globalEventListeners"].forEach(
      ([type, eventListener]) => document.removeEventListener(type, eventListener)
    );
    const exitStatus = ExitStatus(status);
    if (exitStatus) console.info("ExitStatus", exitStatus);
}
VimModule["exit"] = VimModule.exit = exit;
var abortDecorators = [];

function abort(what) {
    if (what !== undefined) {
        VimModule.print(what);
        VimModule.printErr(what);
        what = JSON.stringify(what)
    } else {
        what = ""
    }
    ABORT = true;
    EXITSTATUS = 1;
    var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
    var output = "abort(" + what + ") at " + stackTrace() + extra;
    abortDecorators.forEach((function(decorator) {
        output = decorator(output, what)
    }));
    // throw output
}
VimModule["abort"] = VimModule.abort = abort;
if (VimModule["preInit"]) {
    if (typeof VimModule["preInit"] == "function") VimModule["preInit"] = [VimModule["preInit"]];
    while (VimModule["preInit"].length > 0) {
        VimModule["preInit"].pop()()
    }
}
var shouldRunNow = true;
if (VimModule["noInitialRun"]) {
    shouldRunNow = false
}
run()
} };
